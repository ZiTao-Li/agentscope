{"docstore/data": {"b90181d6-5d0a-4728-a99f-dba6c838927f": {"__data__": {"id_": "b90181d6-5d0a-4728-a99f-dba6c838927f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 356, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee58de8c-9bd1-44f9-8050-b11ae4becf84", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 356, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "690cc80d752d0be59ee420a3ca13f0234ac80efc6b87d1ac0d7ca7f9f1539bbe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6203898d-79ba-4717-b644-5e383e199383", "node_type": "1", "metadata": {}, "hash": "71a6cb556ed0deb12ecf01100db1eabef2e9f2faccb78d239694cdfd31335a1e", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import all modules in the package. \"\"\"\n\n# modules\nfrom . import agents\nfrom . import memory\nfrom . import models\nfrom . import pipelines\nfrom . import service\nfrom . import message\nfrom . import prompt\nfrom . import web\n\n# objects or function\nfrom .msghub import msghub\nfrom ._version import __version__\nfrom ._init import init", "start_char_idx": 0, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6203898d-79ba-4717-b644-5e383e199383": {"__data__": {"id_": "6203898d-79ba-4717-b644-5e383e199383", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b90181d6-5d0a-4728-a99f-dba6c838927f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 356, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9364e0f0b95c12adaf0051d2c4ec4986730bdc45f75c5ed8ca9434f0612c5d27", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "685f5bd0-da7b-4e4e-acf2-04c72953af5d", "node_type": "1", "metadata": {}, "hash": "7ad878bb06065ffd57b9ba31475d8674c22503561057e2a18b9060d4ff4c3be1", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"The init function for the package.\"\"\"\nimport json\nimport os\nimport shutil\nfrom typing import Optional, Union, Sequence\nfrom agentscope import agents\nfrom .agents import AgentBase\nfrom ._runtime import _runtime\nfrom .file_manager import file_manager\nfrom .utils.logging_utils import LOG_LEVEL, setup_logger\nfrom .utils.monitor import MonitorFactory\nfrom .models import read_model_configs\nfrom .constants import _DEFAULT_DIR\nfrom .constants import _DEFAULT_LOG_LEVEL\n\n# init setting\n_INIT_SETTINGS = {}", "start_char_idx": 0, "end_char_idx": 527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "685f5bd0-da7b-4e4e-acf2-04c72953af5d": {"__data__": {"id_": "685f5bd0-da7b-4e4e-acf2-04c72953af5d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6203898d-79ba-4717-b644-5e383e199383", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "26823cb40b8344d218eb5b93a2d24ad9c62e4594bc5145ecfbd29c863e27592b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94059751-1f0d-4cce-9791-2c827b80ccb6", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def init(\n    model_configs: Optional[Union[dict, str, list]] = None,\n    project: Optional[str] = None,\n    name: Optional[str] = None,\n    save_dir: str = _DEFAULT_DIR,\n    save_log: bool = True,\n    save_code: bool = True,\n    save_api_invoke: bool = True,\n    logger_level: LOG_LEVEL = _DEFAULT_LOG_LEVEL,\n    agent_configs: Optional[Union[str, list, dict]] = None,\n) -> Sequence[AgentBase]:", "start_char_idx": 530, "end_char_idx": 925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94059751-1f0d-4cce-9791-2c827b80ccb6": {"__data__": {"id_": "94059751-1f0d-4cce-9791-2c827b80ccb6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "685f5bd0-da7b-4e4e-acf2-04c72953af5d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c667aa266fb861c52d76a253ef9ccda7c72817bff6f0bcfb8f81397569d74935", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0a4d894-40e9-43d2-9101-7347efc4178f", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0a4d894-40e9-43d2-9101-7347efc4178f": {"__data__": {"id_": "f0a4d894-40e9-43d2-9101-7347efc4178f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94059751-1f0d-4cce-9791-2c827b80ccb6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "58ab2bfafb83faaae2b7d9485d3e2d39eec8b1244e2e231ba4a2ea3be2f06e77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ec7c855-2891-433f-adfc-8cfacbba1dd1", "node_type": "1", "metadata": {}, "hash": "c8a472e4183c44daeeff649e08c265b57d68dd6bcab483c54e69bb604895c72d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ec7c855-2891-433f-adfc-8cfacbba1dd1": {"__data__": {"id_": "4ec7c855-2891-433f-adfc-8cfacbba1dd1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0a4d894-40e9-43d2-9101-7347efc4178f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "58ab2bfafb83faaae2b7d9485d3e2d39eec8b1244e2e231ba4a2ea3be2f06e77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1cc0ab32-2a57-432f-8843-284cb6fcffd8", "node_type": "1", "metadata": {}, "hash": "75819bc5c8f8002832b4bb03358ae279f333f06053357055d33c4c20d43dee45", "class_name": "RelatedNodeInfo"}}, "text": "init_process(\n        model_configs=model_configs,\n        project=project,\n        name=name,\n        save_dir=save_dir,\n        save_api_invoke=save_api_invoke,\n        save_log=save_log,\n        logger_level=logger_level,\n    )\n\n    # save init settings for subprocess\n    _INIT_SETTINGS[\"model_configs\"] = model_configs\n    _INIT_SETTINGS[\"project\"] = project\n    _INIT_SETTINGS[\"name\"] = name\n    _INIT_SETTINGS[\"runtime_id\"] = _runtime.runtime_id\n    _INIT_SETTINGS[\"save_dir\"] = save_dir\n    _INIT_SETTINGS[\"save_api_invoke\"] = save_api_invoke\n    _INIT_SETTINGS[\"save_log\"] = save_log\n    _INIT_SETTINGS[\"logger_level\"] = logger_level\n\n    # Save code if needed\n    if save_code:\n        # Copy python file in os.path.curdir into runtime directory\n        cur_dir = os.path.abspath(os.path.curdir)\n        for filename in os.listdir(cur_dir):\n            if filename.endswith(\".py\"):\n                file_abs = os.path.join(cur_dir, filename)\n                shutil.copy(file_abs, str(file_manager.dir_code))\n\n    # Load config and init agent by configs", "start_char_idx": 2587, "end_char_idx": 3648, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1cc0ab32-2a57-432f-8843-284cb6fcffd8": {"__data__": {"id_": "1cc0ab32-2a57-432f-8843-284cb6fcffd8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ec7c855-2891-433f-adfc-8cfacbba1dd1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ac0e0846cd401e1afc646eaef6b1502c1fd3191510ff8616518cc21da4c4b231", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da31b48f-e804-437c-8447-7cd245e943f7", "node_type": "1", "metadata": {}, "hash": "abad242a4761ee276608751442f2af4e89753e81e049ee3e83e76f7146906647", "class_name": "RelatedNodeInfo"}}, "text": "if agent_configs is not None:\n        if isinstance(agent_configs, str):\n            with open(agent_configs, \"r\", encoding=\"utf-8\") as file:\n                configs = json.load(file)\n        elif isinstance(agent_configs, dict):\n            configs = [agent_configs]\n        else:\n            configs = agent_configs\n\n        # setup agents\n        agent_objs = []\n        for config in configs:\n            agent_cls = getattr(agents, config[\"class\"])\n            agent_args = config[\"args\"]\n            agent = agent_cls(**agent_args)\n            agent_objs.append(agent)\n        return agent_objs\n    return []", "start_char_idx": 3653, "end_char_idx": 4267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da31b48f-e804-437c-8447-7cd245e943f7": {"__data__": {"id_": "da31b48f-e804-437c-8447-7cd245e943f7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1cc0ab32-2a57-432f-8843-284cb6fcffd8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4c5e5924fd82185a851a99bd4c054981bb38f444518033306295f0c911cd4046", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4162af9d-4105-4237-b4f7-218edd693250", "node_type": "1", "metadata": {}, "hash": "e5f1d5d33e21a11885782f638fe3d93c8c666c7ece6ad7a282c3978fb74f605c", "class_name": "RelatedNodeInfo"}}, "text": "def init_process(\n    model_configs: Optional[Union[dict, str, list]] = None,\n    project: Optional[str] = None,\n    name: Optional[str] = None,\n    runtime_id: Optional[str] = None,\n    save_dir: str = _DEFAULT_DIR,\n    save_api_invoke: bool = False,\n    save_log: bool = False,\n    logger_level: LOG_LEVEL = _DEFAULT_LOG_LEVEL,\n) -> None:", "start_char_idx": 4270, "end_char_idx": 4610, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4162af9d-4105-4237-b4f7-218edd693250": {"__data__": {"id_": "4162af9d-4105-4237-b4f7-218edd693250", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da31b48f-e804-437c-8447-7cd245e943f7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1ebee8c3a079bd2a276b90c74849ceb035562028d01ab6aa91a71e4b1e5e0328", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fade3c74-1910-46ff-ab1e-a5f47d504aef", "node_type": "1", "metadata": {}, "hash": "6175ec3086329f598074427a8f439c09a58291b32de7b06d732030ccc98b8976", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"An entry to initialize the package in a process.\n\n    Args:\n        project (`Optional[str]`, defaults to `None`):\n            The project name, which is used to identify the project.\n        name (`Optional[str]`, defaults to `None`):\n            The name for runtime, which is used to identify this runtime.\n        runtime_id (`Optional[str]`, defaults to `None`):\n            The id for runtime, which is used to identify this runtime.\n        save_dir (`str`, defaults to `./runs`):\n            The directory to save logs, files, codes, and api invocations.\n            If `dir` is `None`, when saving logs, files, codes, and api\n            invocations, the default directory `./runs` will be created.\n        save_api_invoke (`bool`, defaults to `False`):\n            Whether to save api invocations locally, including model and web\n            search invocation.\n        model_configs (`Optional[Sequence]`, defaults to `None`):\n            A sequence of pre-init model configs.\n        save_log (`bool`, defaults to `False`):\n            Whether to save logs locally.\n        logger_level (`LOG_LEVEL`, defaults to `\"INFO\"`):\n            The logging level of logger.\n    \"\"\"\n    # Init logger\n    dir_log = str(file_manager.dir_log) if save_log else None\n    setup_logger(dir_log, logger_level)\n\n    # Load model configs if needed\n    if model_configs is not None:\n        read_model_configs(model_configs)\n\n    # Init the runtime", "start_char_idx": 4615, "end_char_idx": 6057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fade3c74-1910-46ff-ab1e-a5f47d504aef": {"__data__": {"id_": "fade3c74-1910-46ff-ab1e-a5f47d504aef", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25e565ce-ddcf-4c26-bf75-cb911798642d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba3ab0d485a6be35fd19cf0d7c9e1f7687f4420f7a709dfa273a331c87b2037c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4162af9d-4105-4237-b4f7-218edd693250", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "15620122c76413e1ae0653f3f8129ed6192f595ebf2dadd3c33abd9cf92075a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "661526b0-5cbd-4c79-9621-b5752a7d1bab", "node_type": "1", "metadata": {}, "hash": "d926f4bad1599200b25e37cae049e476e5a4976fb0647eb99be132c39fed4174", "class_name": "RelatedNodeInfo"}}, "text": "if project is not None:\n        _runtime.project = project\n    if name is not None:\n        _runtime.name = name\n    if runtime_id is not None:\n        _runtime.runtime_id = runtime_id\n\n    # Init file manager and save configs by default\n    file_manager.init(save_dir, save_api_invoke)\n\n    # Init monitor\n    _ = MonitorFactory.get_monitor(db_path=file_manager.path_db)", "start_char_idx": 6062, "end_char_idx": 6433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "661526b0-5cbd-4c79-9621-b5752a7d1bab": {"__data__": {"id_": "661526b0-5cbd-4c79-9621-b5752a7d1bab", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfd5d54fcbaaf2d3af221387de6370c55a6e7a50f31e4d3909c84df484933d35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fade3c74-1910-46ff-ab1e-a5f47d504aef", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a38832a2a1f0609c4ecefbc6a3f78bd9c151025f6ac33a4e92671159d76c3316", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793", "node_type": "1", "metadata": {}, "hash": "9fcf116b3677ee183717fddc9a5a456954b56cfc43c9bec2877e4eea16037b7e", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Manage the id for each runtime\"\"\"\nfrom datetime import datetime\nfrom typing import Any\n\nfrom agentscope.utils.tools import _get_timestamp\nfrom agentscope.utils.tools import _generate_random_code\n\n_RUNTIME_ID_FORMAT = \"run_%Y%m%d-%H%M%S_{}\"\n_RUNTIME_TIMESTAMP_FORMAT = \"%Y-%m-%d %H:%M:%S\"", "start_char_idx": 0, "end_char_idx": 314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793": {"__data__": {"id_": "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfd5d54fcbaaf2d3af221387de6370c55a6e7a50f31e4d3909c84df484933d35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "661526b0-5cbd-4c79-9621-b5752a7d1bab", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a7b6678808e6c75499a76aec151f1ac2a269509559966444425ef62bf25facf6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1", "node_type": "1", "metadata": {}, "hash": "bf67df5bf2694173de6fdc8264b961bb84e5771ddb301b9473fd85c6bf3898e9", "class_name": "RelatedNodeInfo"}}, "text": "class _Runtime:", "start_char_idx": 317, "end_char_idx": 332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1": {"__data__": {"id_": "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfd5d54fcbaaf2d3af221387de6370c55a6e7a50f31e4d3909c84df484933d35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "956800cca4a5f74f23cafcc7527c19e6e7a3930c97697090a73d75aa6e7ad777", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6", "node_type": "1", "metadata": {}, "hash": "03f3b10ad167b0e83691f5e3dbf2c233456622f9f31b5345f00c41af0d20e714", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A singleton class used to record the runtime information, which will\n    be initialized when the package is imported.\"\"\"\n\n    project: str = None\n    \"\"\"The project name, which is used to identify the project.\"\"\"\n\n    name: str = None\n    \"\"\"The name for runtime, which is used to identify this runtime.\"\"\"\n\n    runtime_id: str = None\n    \"\"\"The id for runtime, which is used to identify the this runtime and\n        name the saving directory.\"\"\"\n\n    _timestamp: datetime = datetime.now()\n    \"\"\"The timestamp of when the runtime is initialized.\"\"\"\n\n    _instance = None\n\n    def __new__(cls, *args: Any, **kwargs: Any) -> Any:\n        \"\"\"Create a singleton instance.\"\"\"\n        if not cls._instance:\n            cls._instance = super(_Runtime, cls).__new__(\n                cls,\n                *args,\n                **kwargs,\n            )\n        return cls._instance\n\n    def __init__(self) -> None:\n        \"\"\"Generate random project name, runtime name and default\n        runtime_id when the package is initialized. After that, user can set\n        them by calling `agentscope.init(project=\"xxx\", name=\"xxx\",\n        runtime_id=\"xxx\")`.\"\"\"\n\n        self.project = _generate_random_code()\n        self.name = _generate_random_code(uppercase=False)\n\n        # Obtain time from timestamp in string format, and then turn it into\n        # runtime ID format\n        self.runtime_id = _get_timestamp(\n            _RUNTIME_ID_FORMAT,\n            self._timestamp,\n        ).format(self.name)", "start_char_idx": 337, "end_char_idx": 1831, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6": {"__data__": {"id_": "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfd5d54fcbaaf2d3af221387de6370c55a6e7a50f31e4d3909c84df484933d35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "38f32e9316c6107ad731f6c997420b7eb9c3a54f90e4cad64fc98318bb8a649a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b741fff9-9940-4cf6-a08f-427c5e301490", "node_type": "1", "metadata": {}, "hash": "85aff24b3e376756e17b1c0169ebda58914025831130c30827f4c77417ce2576", "class_name": "RelatedNodeInfo"}}, "text": "@property\n    def timestamp(self) -> str:\n        \"\"\"Get the current timestamp in specific format.\"\"\"\n        return self._timestamp.strftime(_RUNTIME_TIMESTAMP_FORMAT)\n\n    @staticmethod\n    def _flush() -> None:\n        \"\"\"\n        Only for unittest usage. Don't use this function in your code.\n        Flush the runtime singleton.\n        \"\"\"\n        global _runtime\n        _runtime = _Runtime()", "start_char_idx": 1837, "end_char_idx": 2236, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b741fff9-9940-4cf6-a08f-427c5e301490": {"__data__": {"id_": "b741fff9-9940-4cf6-a08f-427c5e301490", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfd5d54fcbaaf2d3af221387de6370c55a6e7a50f31e4d3909c84df484933d35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e8ceeca56ed72524e24bbc698f91349ca429eb105379bb50f9eb5f0b815f0f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ae0256b-0a60-4326-9492-e6f2c1cdf428", "node_type": "1", "metadata": {}, "hash": "3fa363fa6ca8d7429e89d1764ffad5ac19564b4a31f479a88917cc83739040bd", "class_name": "RelatedNodeInfo"}}, "text": "_runtime = _Runtime()", "start_char_idx": 2215, "end_char_idx": 2236, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ae0256b-0a60-4326-9492-e6f2c1cdf428": {"__data__": {"id_": "4ae0256b-0a60-4326-9492-e6f2c1cdf428", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_version.py", "file_name": "_version.py", "file_type": "text/x-python", "file_size": 83, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a015b58-6ff6-4070-8e9c-6864c045b1a7", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_version.py", "file_name": "_version.py", "file_type": "text/x-python", "file_size": 83, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "688706a05ab88fba68742d4d7fafd1d9c815b89ef0f37602395eaaff3ae746ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b741fff9-9940-4cf6-a08f-427c5e301490", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ba5cf4c7092e193cb836e35dd6bee67b51a318fdff5aa094bc993e0ece81bdb3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be88e1ef-062c-4fef-ba7e-4eb79ba17f67", "node_type": "1", "metadata": {}, "hash": "ea44f38ca6b30cfee5b62f9b73ee1883b99cdd1cdb63bdd4c3c376a09a439186", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Version of AgentScope.\"\"\"\n\n__version__ = \"0.0.4-alpha\"", "start_char_idx": 0, "end_char_idx": 82, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be88e1ef-062c-4fef-ba7e-4eb79ba17f67": {"__data__": {"id_": "be88e1ef-062c-4fef-ba7e-4eb79ba17f67", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 572, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83fef82a-3aae-47cf-ae23-9953c81577c6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 572, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "256777d6bfad603e0073f557aa525881ae2122b4c74d2dafb33aedfa423e64aa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ae0256b-0a60-4326-9492-e6f2c1cdf428", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_version.py", "file_name": "_version.py", "file_type": "text/x-python", "file_size": 83, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d479247b50ba168b5bfe411ee788279d4a7c799db783df6a857e3bb61c0dec77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9043f76-a28e-46ce-8550-6797ae689b34", "node_type": "1", "metadata": {}, "hash": "a867367fb392d88cd06343a9cb7816ff2f2f910e92783375b7abaa24796e8fcf", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import all agent related modules in the package. \"\"\"\nfrom .agent import AgentBase\nfrom .operator import Operator\nfrom .dialog_agent import DialogAgent\nfrom .dict_dialog_agent import DictDialogAgent\nfrom .user_agent import UserAgent\nfrom .text_to_image_agent import TextToImageAgent\nfrom .rpc_agent import RpcAgentServerLauncher\nfrom .react_agent import ReActAgent\n\n\n__all__ = [\n    \"AgentBase\",\n    \"Operator\",\n    \"DialogAgent\",\n    \"DictDialogAgent\",\n    \"TextToImageAgent\",\n    \"UserAgent\",\n    \"RpcAgentServerLauncher\",\n    \"ReActAgent\",\n]", "start_char_idx": 0, "end_char_idx": 571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9043f76-a28e-46ce-8550-6797ae689b34": {"__data__": {"id_": "c9043f76-a28e-46ce-8550-6797ae689b34", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be88e1ef-062c-4fef-ba7e-4eb79ba17f67", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 572, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8087a54ba5c2447ac2c267b7ef08b38b365d7fb750c27a05513e66b61abb7d93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b48afb9-884a-4c7d-bf19-f7398d22c63d", "node_type": "1", "metadata": {}, "hash": "316be3e431e8e8bffd96ff546cb3aa01c5b282e139f644226712c25820e3b963", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Base class for Agent \"\"\"\n\nfrom __future__ import annotations\nfrom abc import ABCMeta\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Union\nfrom typing import Any\nimport uuid\nfrom loguru import logger\n\nfrom agentscope.agents.operator import Operator\nfrom agentscope.models import load_model_by_config_name\nfrom agentscope.memory import TemporaryMemory\n\n\nclass _RecordInitSettingMeta(ABCMeta):\n    \"\"\"A wrapper to record the init args into `_init_settings` field.\"\"\"\n\n    def __call__(cls, *args: tuple, **kwargs: dict) -> Any:\n        instance = super().__call__(*args, **kwargs)\n        instance._init_settings = {\"args\": args, \"kwargs\": kwargs}\n        return instance", "start_char_idx": 0, "end_char_idx": 724, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b48afb9-884a-4c7d-bf19-f7398d22c63d": {"__data__": {"id_": "6b48afb9-884a-4c7d-bf19-f7398d22c63d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9043f76-a28e-46ce-8550-6797ae689b34", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6fa058652d27e113908a71738582897ecc2ffd102996c28ca9e88b06a87eac71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "218269a3-6391-407b-aaf7-4749c02c96af", "node_type": "1", "metadata": {}, "hash": "e44a360ced1009dae9ed7728f250a6b727f95878c1196444a854a71d8c5349b5", "class_name": "RelatedNodeInfo"}}, "text": "class AgentBase(Operator, metaclass=_RecordInitSettingMeta):", "start_char_idx": 727, "end_char_idx": 787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "218269a3-6391-407b-aaf7-4749c02c96af": {"__data__": {"id_": "218269a3-6391-407b-aaf7-4749c02c96af", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b48afb9-884a-4c7d-bf19-f7398d22c63d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d6da6aaefdb99be0652f431b040d85b146e2bd22d7094d574cf6b40ea175ad3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087", "node_type": "1", "metadata": {}, "hash": "b47ee5b6c620a4e7ccebbb1f1dbff5a7f7369d62d1ae6aed7ab4d1ee7ca85b66", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Base class for all agents.\n\n    All agents should inherit from this class and implement the `reply`\n    function.\n    \"\"\"\n\n    _version: int = 1", "start_char_idx": 792, "end_char_idx": 939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087": {"__data__": {"id_": "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "218269a3-6391-407b-aaf7-4749c02c96af", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "80c5484ddcb167bfd53656579deb4178b0cd5d268d6b43d3b28f335972165f0d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da292a6f-6839-4bfb-8d5c-637bbe48695b", "node_type": "1", "metadata": {}, "hash": "c3ff0f7ee2dd840c1c9fe71ad3bdf3f266c09ba9e40564beb71d626e235d9436", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        sys_prompt: Optional[str] = None,\n        model_config_name: str = None,\n        use_memory: bool = True,\n        memory_config: Optional[dict] = None,\n    ) -> None:", "start_char_idx": 945, "end_char_idx": 1166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da292a6f-6839-4bfb-8d5c-637bbe48695b": {"__data__": {"id_": "da292a6f-6839-4bfb-8d5c-637bbe48695b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6b2d6d35ce95bced612166bef8a239ba54bd22f8acbcb92104240b0ed09be2ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9b4be0a-7d01-4c0d-828a-b2608edc69ca", "node_type": "1", "metadata": {}, "hash": "2cb674e5cc7bc9a286a42e3c5d18bc83942bac30d8e033a7beadae2252716563", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"Initialize an agent from the given arguments.\n\n        Args:\n            name (`str`):\n                The name of the agent.\n            sys_prompt (`Optional[str]`):\n                The system prompt of the agent, which can be passed by args\n                or hard-coded in the agent.\n            model_config_name (`str`, defaults to None):\n                The name of the model config, which is used to load model from\n                configuration.\n            use_memory (`bool`, defaults to `True`):\n                Whether the agent has memory.\n            memory_config (`Optional[dict]`):\n                The config of memory.\n        \"\"\"\n        self.name = name\n        self.memory_config = memory_config\n\n        if sys_prompt is not None:\n            self.sys_prompt = sys_prompt\n\n        # TODO: support to receive a ModelWrapper instance\n        if model_config_name is not None:\n            self.model = load_model_by_config_name(model_config_name)\n\n        if use_memory:\n            self.memory = TemporaryMemory(memory_config)\n        else:\n            self.memory = None\n\n        # The global unique id of this agent\n        self._agent_id = self.__class__.generate_agent_id()\n\n        # The audience of this agent, which means if this agent generates a\n        # response, it will be passed to all agents in the audience.\n        self._audience = None", "start_char_idx": 1175, "end_char_idx": 2553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9b4be0a-7d01-4c0d-828a-b2608edc69ca": {"__data__": {"id_": "c9b4be0a-7d01-4c0d-828a-b2608edc69ca", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da292a6f-6839-4bfb-8d5c-637bbe48695b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ddb697ae1192ddd6876585d9931dfdcf731588854ee59691d67c03ee2880f522", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84e729da-705c-4471-93cf-f270d1a268e8", "node_type": "1", "metadata": {}, "hash": "79b0436b16f4b1aeff3654a704506d3427599d4ee2e50203b686d548ba2211b9", "class_name": "RelatedNodeInfo"}}, "text": "@classmethod\n    def generate_agent_id(cls) -> str:\n        \"\"\"Generate the agent_id of this agent instance\"\"\"\n        # TODO: change cls.__name__ into a global unique agent_type\n        return f\"{cls.__name__}_{uuid.uuid4().hex}\"\n\n    def reply(self, x: dict = None) -> dict:\n        \"\"\"Define the actions taken by this agent.\n\n        Args:\n            x (`dict`, defaults to `None`):\n                Dialog history and some environment information\n\n        Returns:\n            The agent's response to the input.\n\n        Note:\n            Given that some agents are in an adversarial environment,\n            their input doesn't include the thoughts of other agents.\n        \"\"\"\n        raise NotImplementedError(\n            f\"Agent [{type(self).__name__}] is missing the required \"\n            f'\"reply\" function.',\n        )\n\n    def load_from_config(self, config: dict) -> None:\n        \"\"\"Load configuration for this agent.\n\n        Args:\n            config (`dict`): model configuration\n        \"\"\"\n\n    def export_config(self) -> dict:\n        \"\"\"Return configuration of this agent.\n\n        Returns:\n            The configuration of current agent.\n        \"\"\"\n        return {}\n\n    def load_memory(self, memory: Sequence[dict]) -> None:\n        r\"\"\"Load input memory.\"\"\"", "start_char_idx": 2559, "end_char_idx": 3842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84e729da-705c-4471-93cf-f270d1a268e8": {"__data__": {"id_": "84e729da-705c-4471-93cf-f270d1a268e8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9b4be0a-7d01-4c0d-828a-b2608edc69ca", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d5873e62d85dba408b8bde0b84754ed6c63daccdfe40909f0625f7d17674c214", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7248a7ab-b1dc-46a1-b18d-ba50da379c4f", "node_type": "1", "metadata": {}, "hash": "5caed7076dfbf15c580fb7cf2a59b59622d1a6e15be7de38582881bb7d1579a4", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(self, *args: Any, **kwargs: Any) -> dict:\n        \"\"\"Calling the reply function, and broadcast the generated\n        response to all audiences if needed.\"\"\"\n        res = self.reply(*args, **kwargs)\n\n        # broadcast to audiences if needed\n        if self._audience is not None:\n            self._broadcast_to_audience(res)\n\n        return res\n\n    def speak(\n        self,\n        content: Union[str, dict],\n    ) -> None:\n        \"\"\"Speak out the content generated by the agent.\"\"\"\n        logger.chat(content)\n\n    def observe(self, x: Union[dict, Sequence[dict]]) -> None:\n        \"\"\"Observe the input, store it in memory without response to it.\n\n        Args:\n            x (`Union[dict, Sequence[dict]]`):\n                The input message to be recorded in memory.\n        \"\"\"\n        if self.memory:\n            self.memory.add(x)\n\n    def reset_audience(self, audience: Sequence[AgentBase]) -> None:\n        \"\"\"Set the audience of this agent, which means if this agent\n        generates a response, it will be passed to all audiences.\n\n        Args:\n            audience (`Sequence[AgentBase]`):\n                The audience of this agent, which will be notified when this\n                agent generates a response message.\n        \"\"\"\n        # TODO: we leave the consideration of nested msghub for future.\n        #  for now we suppose one agent can only be in one msghub\n        self._audience = [_ for _ in audience if _ != self]", "start_char_idx": 3848, "end_char_idx": 5307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7248a7ab-b1dc-46a1-b18d-ba50da379c4f": {"__data__": {"id_": "7248a7ab-b1dc-46a1-b18d-ba50da379c4f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84e729da-705c-4471-93cf-f270d1a268e8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "eb306e41cc3bc8202f2ceb5a87264152b2c489e4abcc32dc7a271067dac6ab5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e", "node_type": "1", "metadata": {}, "hash": "6faf0f731004dffd5afd20909358a0053462fa9eeeee9ae67c1252b3ed268a4c", "class_name": "RelatedNodeInfo"}}, "text": "def clear_audience(self) -> None:\n        \"\"\"Remove the audience of this agent.\"\"\"\n        # TODO: we leave the consideration of nested msghub for future.\n        #  for now we suppose one agent can only be in one msghub\n        self._audience = None\n\n    def rm_audience(\n        self,\n        audience: Union[Sequence[AgentBase], AgentBase],\n    ) -> None:\n        \"\"\"Remove the given audience from the Sequence\"\"\"\n        if not isinstance(audience, Sequence):\n            audience = [audience]\n\n        for agent in audience:\n            if self._audience is not None and agent in self._audience:\n                self._audience.pop(self._audience.index(agent))\n            else:\n                logger.warning(\n                    f\"Skip removing agent [{agent.name}] from the \"\n                    f\"audience for its inexistence.\",\n                )\n\n    def _broadcast_to_audience(self, x: dict) -> None:\n        \"\"\"Broadcast the input to all audiences.\"\"\"\n        for agent in self._audience:\n            agent.observe(x)\n\n    @property\n    def agent_id(self) -> str:\n        \"\"\"The unique id of this agent.\n\n        Returns:\n            str: agent_id\n        \"\"\"\n        return self._agent_id", "start_char_idx": 5313, "end_char_idx": 6513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e": {"__data__": {"id_": "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7248a7ab-b1dc-46a1-b18d-ba50da379c4f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ab5a632943d3ec1fcb80ac3a45edf0f6a13519cc81424cdcac58ff22152c091c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2924ab7-385a-4056-9c54-8caaad86ad00", "node_type": "1", "metadata": {}, "hash": "add4a5b1160fdd1dbb4a383714f0aa9ecf7b7c01a6c5d3bb2ab16ca965e5b8ac", "class_name": "RelatedNodeInfo"}}, "text": "def to_dist(\n        self,\n        host: str = \"localhost\",\n        port: int = None,\n        max_pool_size: int = 8192,\n        max_timeout_seconds: int = 1800,\n        launch_server: bool = True,\n        local_mode: bool = True,\n        lazy_launch: bool = True,\n    ) -> AgentBase:", "start_char_idx": 6519, "end_char_idx": 6803, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2924ab7-385a-4056-9c54-8caaad86ad00": {"__data__": {"id_": "f2924ab7-385a-4056-9c54-8caaad86ad00", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa97ca-71d8-448c-a263-f01176910ea4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "72de94c0f4e9bc7bcacf310d969c5a7f7021801ff95a296fa070dcb32a77327d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c14c0a2f628224e30d03dd84d69a86ca59ddf71f7bb8145c1fece377b2d1ee6e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bab0f365-9f49-4cc9-b8c4-e49d78ea6658", "node_type": "1", "metadata": {}, "hash": "878ad1600212509b3b1e0f2591ee6d805b691c0d525f7b7c49536f3df8abc4de", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Convert current agent instance into a distributed version.\n\n        Args:\n            host (`str`, defaults to `\"localhost\"`):\n                Hostname of the rpc agent server.\n            port (`int`, defaults to `None`):\n                Port of the rpc agent server.\n            max_pool_size (`int`, defaults to `8192`):\n                Max number of task results that the server can accommodate.\n            max_timeout_seconds (`int`, defaults to `1800`):\n                Timeout for task results.\n            local_mode (`bool`, defaults to `True`):\n                Whether the started rpc server only listens to local\n                requests.\n            lazy_launch (`bool`, defaults to `True`):\n                Only launch the server when the agent is called.\n\n        Returns:\n            `AgentBase`: the wrapped agent instance with distributed\n            functionality\n        \"\"\"\n        from .rpc_agent import RpcAgent\n\n        if issubclass(self.__class__, RpcAgent):\n            return self\n        return RpcAgent(\n            agent_class=self.__class__,\n            agent_configs=self._init_settings,\n            name=self.name,\n            host=host,\n            port=port,\n            max_pool_size=max_pool_size,\n            max_timeout_seconds=max_timeout_seconds,\n            launch_server=launch_server,\n            local_mode=local_mode,\n            lazy_launch=lazy_launch,\n            agent_id=self.agent_id,\n        )", "start_char_idx": 6812, "end_char_idx": 8262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bab0f365-9f49-4cc9-b8c4-e49d78ea6658": {"__data__": {"id_": "bab0f365-9f49-4cc9-b8c4-e49d78ea6658", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2924ab7-385a-4056-9c54-8caaad86ad00", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "42152003f41a26607301b7743a10ceac3d81ae1347ec4b1a260797a41123b6d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1ab4667-3ba5-473a-96d6-02dde0988f7e", "node_type": "1", "metadata": {}, "hash": "24641d9b982370f6f93329b6be6b1eae1949f0d15383582a78f2a6e84d056215", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"A general dialog agent.\"\"\"\nfrom typing import Optional\n\nfrom loguru import logger\n\nfrom ..message import Msg\nfrom .agent import AgentBase\nfrom ..prompt import PromptType", "start_char_idx": 0, "end_char_idx": 196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1ab4667-3ba5-473a-96d6-02dde0988f7e": {"__data__": {"id_": "b1ab4667-3ba5-473a-96d6-02dde0988f7e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bab0f365-9f49-4cc9-b8c4-e49d78ea6658", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4b587e586b87c74ec5c9015c06fcc49e4e6878b851f40b3c914c4c18c73676e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9ce2f2b-9fe5-408d-9840-016378649119", "node_type": "1", "metadata": {}, "hash": "be18a5a1aa355dbaaa116be41f91bfd2bc9f8f9e132d515f409f31446a9a0803", "class_name": "RelatedNodeInfo"}}, "text": "class DialogAgent(AgentBase):", "start_char_idx": 199, "end_char_idx": 228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9ce2f2b-9fe5-408d-9840-016378649119": {"__data__": {"id_": "a9ce2f2b-9fe5-408d-9840-016378649119", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1ab4667-3ba5-473a-96d6-02dde0988f7e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "09e3f2ceb376add034dc67289f8d2398d0b58765109bcec221396911dd318085", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "382c58a5-44a0-40f5-8f3f-efcf44ed1298", "node_type": "1", "metadata": {}, "hash": "c50666d3805089de4bf2a9a2cd7679b416e7cd926f79d2a85c0cf1866670c549", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A simple agent used to perform a dialogue. Your can set its role by\n    `sys_prompt`.\"\"\"", "start_char_idx": 233, "end_char_idx": 324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "382c58a5-44a0-40f5-8f3f-efcf44ed1298": {"__data__": {"id_": "382c58a5-44a0-40f5-8f3f-efcf44ed1298", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9ce2f2b-9fe5-408d-9840-016378649119", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e133420eb30cc7ca4053d2a3ba0c0792cf6e238992f5f8210c4c21038ede9c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "baf690d5-47c8-4346-9e8a-a88326507b87", "node_type": "1", "metadata": {}, "hash": "e6d40e262a3abbab1ef226a9d5b930a9f22675a182157c7fc07cda57df7d9de7", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        sys_prompt: str,\n        model_config_name: str,\n        use_memory: bool = True,\n        memory_config: Optional[dict] = None,\n        prompt_type: Optional[PromptType] = None,\n    ) -> None:", "start_char_idx": 330, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baf690d5-47c8-4346-9e8a-a88326507b87": {"__data__": {"id_": "baf690d5-47c8-4346-9e8a-a88326507b87", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "382c58a5-44a0-40f5-8f3f-efcf44ed1298", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "998699f9cbd47fd3af4d09e08e355d0398312ddc7e4623c5a0009d275895b147", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a537cefa-75c2-4e19-9d2f-946b48e76a12", "node_type": "1", "metadata": {}, "hash": "3f4a6be48cc14e422c31da7bcece2f22537f07938f8a60d974640b162e7eedd8", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Initialize the dialog agent.\n\n        Arguments:\n            name (`str`):\n                The name of the agent.\n            sys_prompt (`Optional[str]`):\n                The system prompt of the agent, which can be passed by args\n                or hard-coded in the agent.\n            model_config_name (`str`):\n                The name of the model config, which is used to load model from\n                configuration.\n            use_memory (`bool`, defaults to `True`):\n                Whether the agent has memory.\n            memory_config (`Optional[dict]`):\n                The config of memory.\n            prompt_type (`Optional[PromptType]`, defaults to\n            `PromptType.LIST`):\n                The type of the prompt organization, chosen from\n                `PromptType.LIST` or `PromptType.STRING`.\n        \"\"\"\n        super().__init__(\n            name=name,\n            sys_prompt=sys_prompt,\n            model_config_name=model_config_name,\n            use_memory=use_memory,\n            memory_config=memory_config,\n        )\n\n        if prompt_type is not None:\n            logger.warning(\n                \"The argument `prompt_type` is deprecated and \"\n                \"will be removed in the future.\",\n            )", "start_char_idx": 586, "end_char_idx": 1836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a537cefa-75c2-4e19-9d2f-946b48e76a12": {"__data__": {"id_": "a537cefa-75c2-4e19-9d2f-946b48e76a12", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa4a798fffdfcbe720532a41cefcd67f5c1ac91b59630f25b7056c1a71be2100", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "baf690d5-47c8-4346-9e8a-a88326507b87", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "797e4b8259b212dc28315bad32fa219ad7653766e9c211e659141517a78070e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54b07793-0bc9-4dd1-b376-ecdc5f65695f", "node_type": "1", "metadata": {}, "hash": "e960ea32a2ebb74bba0e1f105c662be0909e2539197b9d1d2d558bb61ead58d8", "class_name": "RelatedNodeInfo"}}, "text": "def reply(self, x: dict = None) -> dict:\n        \"\"\"Reply function of the agent. Processes the input data,\n        generates a prompt using the current dialogue memory and system\n        prompt, and invokes the language model to produce a response. The\n        response is then formatted and added to the dialogue memory.\n\n        Args:\n            x (`dict`, defaults to `None`):\n                A dictionary representing the user's input to the agent. This\n                input is added to the dialogue memory if provided. Defaults to\n                None.\n        Returns:\n            A dictionary representing the message generated by the agent in\n            response to the user's input.\n        \"\"\"\n        # record the input if needed\n        if self.memory:\n            self.memory.add(x)\n\n        # prepare prompt\n        prompt = self.model.format(\n            Msg(\"system\", self.sys_prompt, role=\"system\"),\n            self.memory and self.memory.get_memory(),  # type: ignore[arg-type]\n        )\n\n        # call llm and generate response\n        response = self.model(prompt).text\n        msg = Msg(self.name, response, role=\"assistant\")\n\n        # Print/speak the message in this agent's voice\n        self.speak(msg)\n\n        # Record the message in memory\n        if self.memory:\n            self.memory.add(msg)\n\n        return msg", "start_char_idx": 1842, "end_char_idx": 3191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54b07793-0bc9-4dd1-b376-ecdc5f65695f": {"__data__": {"id_": "54b07793-0bc9-4dd1-b376-ecdc5f65695f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a537cefa-75c2-4e19-9d2f-946b48e76a12", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "31eead234a01c0903599b814631442cc0f49a7120ac8608c69cf6e8e8a6af725", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8b7a360-e872-4498-8d6a-554fdefa5c82", "node_type": "1", "metadata": {}, "hash": "858f71fab6aa5de5a3735ab344ede3849aee884d69385aa19a49fcd107ef566c", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"A dict dialog agent that using `parse_func` and `fault_handler` to\nparse the model response.\"\"\"\nimport json\nfrom typing import Any, Optional, Callable\nfrom loguru import logger\n\nfrom ..message import Msg\nfrom .agent import AgentBase\nfrom ..models import ModelResponse\nfrom ..prompt import PromptType\nfrom ..utils.tools import _convert_to_str\n\n\ndef parse_dict(response: ModelResponse) -> ModelResponse:\n    \"\"\"Parse function for DictDialogAgent\"\"\"\n    try:\n        if response.text is not None:\n            response_dict = json.loads(response.text)\n        else:\n            raise ValueError(\n                f\"The text field of the response s None: {response}\",\n            )\n    except json.decoder.JSONDecodeError:\n        # Sometimes LLM may return a response with single quotes, which is not\n        # a valid JSON format. We replace single quotes with double quotes and\n        # try to load it again.\n        # TODO: maybe using a more robust json library to handle this case\n        response_dict = json.loads(response.text.replace(\"'\", '\"'))\n\n    return ModelResponse(raw=response_dict)\n\n\ndef default_response(response: ModelResponse) -> ModelResponse:\n    \"\"\"The default response of fault_handler\"\"\"\n    return ModelResponse(raw={\"speak\": response.text})", "start_char_idx": 0, "end_char_idx": 1290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8b7a360-e872-4498-8d6a-554fdefa5c82": {"__data__": {"id_": "a8b7a360-e872-4498-8d6a-554fdefa5c82", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54b07793-0bc9-4dd1-b376-ecdc5f65695f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b02a29cb7a77f03f8b4afd5a128176d618828f27ba376129e7c0fa04c0de706e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33244bee-93e4-4d4e-b1a7-68c303f04b75", "node_type": "1", "metadata": {}, "hash": "76900d8524f9d40b6c3cdcaf48a91f857ae838c953d1dedd882df75836a28623", "class_name": "RelatedNodeInfo"}}, "text": "class DictDialogAgent(AgentBase):", "start_char_idx": 1293, "end_char_idx": 1326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33244bee-93e4-4d4e-b1a7-68c303f04b75": {"__data__": {"id_": "33244bee-93e4-4d4e-b1a7-68c303f04b75", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a8b7a360-e872-4498-8d6a-554fdefa5c82", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "de698a881095756af7dc194928b6b89b9a1012e768502692e8cf239683eccba5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3509d152-f601-413c-b64b-9df5918a9970", "node_type": "1", "metadata": {}, "hash": "6ac41e2d2e263710330e2cbf64943b3622b975bb97d14777444d9c1d2b0c2beb", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"An agent that generates response in a dict format, where user can\n    specify the required fields in the response via prompt, e.g.\n\n    .. code-block:: python\n\n        prompt = \"... Response in the following format that can be loaded by\n        python json.loads()\n        {\n            \"thought\": \"thought\",\n            \"speak\": \"thoughts summary to say to others\",\n            # ...\n        }\"\n\n    This agent class is an example for using `parse_func` and `fault_handler`\n    to parse the output from the model, and handling the fault when parsing\n    fails. We take \"speak\" as a required field in the response, and print\n    the speak field as the output response.\n\n    For usage example, please refer to the example of werewolf in\n    `examples/game_werewolf`\"\"\"", "start_char_idx": 1331, "end_char_idx": 2101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3509d152-f601-413c-b64b-9df5918a9970": {"__data__": {"id_": "3509d152-f601-413c-b64b-9df5918a9970", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33244bee-93e4-4d4e-b1a7-68c303f04b75", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7912873643d71cdae813c8167fbf23490fd2d8b7fcbe0e86a5f2948848a2c44b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72b2c525-7c4b-4812-a75c-11cefae2a507", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        sys_prompt: str,\n        model_config_name: str,\n        use_memory: bool = True,\n        memory_config: Optional[dict] = None,\n        parse_func: Optional[Callable[..., Any]] = parse_dict,\n        fault_handler: Optional[Callable[..., Any]] = default_response,\n        max_retries: Optional[int] = 3,\n        prompt_type: Optional[PromptType] = None,\n    ) -> None:", "start_char_idx": 2107, "end_char_idx": 2529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72b2c525-7c4b-4812-a75c-11cefae2a507": {"__data__": {"id_": "72b2c525-7c4b-4812-a75c-11cefae2a507", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3509d152-f601-413c-b64b-9df5918a9970", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b41229ba95e6dccb0fb86a0f80769e82a4355a609e2238f9bc3105eafe930d52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47c5a56d-ea18-4837-a175-79d58f7ad9e0", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47c5a56d-ea18-4837-a175-79d58f7ad9e0": {"__data__": {"id_": "47c5a56d-ea18-4837-a175-79d58f7ad9e0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72b2c525-7c4b-4812-a75c-11cefae2a507", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "51601b1700b4597c55248947866165234a7655f94becf696795be244b2c594b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb647b88-eb78-44d4-97c3-48deca1b1846", "node_type": "1", "metadata": {}, "hash": "93e66cf01bc32fa4e6aa60841f5ef638f5ef901e7979513e9126e53b21aa3e87", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb647b88-eb78-44d4-97c3-48deca1b1846": {"__data__": {"id_": "cb647b88-eb78-44d4-97c3-48deca1b1846", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47c5a56d-ea18-4837-a175-79d58f7ad9e0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "51601b1700b4597c55248947866165234a7655f94becf696795be244b2c594b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8fd9fcff-22f7-4b88-9d9e-095370b28679", "node_type": "1", "metadata": {}, "hash": "2d0dc66e532ce295be3e469f100b545cbb02d9b532de8ed23867f997fa70444f", "class_name": "RelatedNodeInfo"}}, "text": "super().__init__(\n            name=name,\n            sys_prompt=sys_prompt,\n            model_config_name=model_config_name,\n            use_memory=use_memory,\n            memory_config=memory_config,\n        )\n\n        # record the func and handler for parsing and handling faults\n        self.parse_func = parse_func\n        self.fault_handler = fault_handler\n        self.max_retries = max_retries\n\n        if prompt_type is not None:\n            logger.warning(\n                \"The argument `prompt_type` is deprecated and \"\n                \"will be removed in the future.\",\n            )", "start_char_idx": 4089, "end_char_idx": 4682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fd9fcff-22f7-4b88-9d9e-095370b28679": {"__data__": {"id_": "8fd9fcff-22f7-4b88-9d9e-095370b28679", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb647b88-eb78-44d4-97c3-48deca1b1846", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cbcedb5780091610a9347c6cf6df48ee7ceb742827ad2477077c83be07bddee8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a674bd3e-8894-4781-93b4-eda776f903e5", "node_type": "1", "metadata": {}, "hash": "fce31bf787fefd409690783adfa4da408d01453b0bf0e3b6b0a25694a45e4426", "class_name": "RelatedNodeInfo"}}, "text": "def reply(self, x: dict = None) -> dict:", "start_char_idx": 4688, "end_char_idx": 4728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a674bd3e-8894-4781-93b4-eda776f903e5": {"__data__": {"id_": "a674bd3e-8894-4781-93b4-eda776f903e5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fd9fcff-22f7-4b88-9d9e-095370b28679", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4efa5d8bdff19db51e23f9f871ae1fe76dc4c85d762cb0f762b1d6093678d758", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e60c9422-bbe2-4468-bb36-4b10299dde38", "node_type": "1", "metadata": {}, "hash": "e13dabef190c40829c4106545f8d75e6d79c21dbcd6ebece5dab44f0a1373c6d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Reply function of the agent.\n        Processes the input data, generates a prompt using the current\n        dialogue memory and system prompt, and invokes the language\n        model to produce a response. The response is then formatted\n        and added to the dialogue memory.\n\n        Args:\n            x (`dict`, defaults to `None`):\n                A dictionary representing the user's input to the agent.\n                This input is added to the dialogue memory if provided.\n        Returns:\n            A dictionary representing the message generated by the agent in\n            response to the user's input. It contains at least a 'speak' key\n            with the textual response and may include other keys such as\n            'agreement' if provided by the language model.\n\n        Raises:\n            `json.decoder.JSONDecodeError`:\n                If the response from the language model is not valid JSON,\n                it defaults to treating the response as plain text.\n        \"\"\"\n        # record the input if needed\n        if self.memory:\n            self.memory.add(x)\n\n        # prepare prompt\n        prompt = self.model.format(\n            Msg(\"system\", self.sys_prompt, role=\"system\"),\n            self.memory and self.memory.get_memory(),  # type: ignore[arg-type]\n        )\n\n        # call llm", "start_char_idx": 4737, "end_char_idx": 6062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e60c9422-bbe2-4468-bb36-4b10299dde38": {"__data__": {"id_": "e60c9422-bbe2-4468-bb36-4b10299dde38", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "590343c31f1f3fb8b5fc599dd917e67b3f19aff9ec652f7b3fec4e3e22fdd226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a674bd3e-8894-4781-93b4-eda776f903e5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c16272ec9112265e2f4e0468d207d95743a50cfd7ac4c96e459d43c15386e64d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1799e18c-0d7c-418b-98bc-31d9b0c258a9", "node_type": "1", "metadata": {}, "hash": "58e78b74049484c647091b710f110b03e3d7b3fc01ea83179444f5fba5861e37", "class_name": "RelatedNodeInfo"}}, "text": "response = self.model(\n            prompt,\n            parse_func=self.parse_func,\n            fault_handler=self.fault_handler,\n            max_retries=self.max_retries,\n        ).raw\n\n        # logging raw messages in debug mode\n        logger.debug(json.dumps(response, indent=4, ensure_ascii=False))\n\n        # In this agent, if the response is a dict, we treat \"speak\" as a\n        # special key, which represents the text to be spoken\n        if isinstance(response, dict) and \"speak\" in response:\n            msg = Msg(\n                self.name,\n                response[\"speak\"],\n                role=\"assistant\",\n                **response,\n            )\n        else:\n            msg = Msg(self.name, response, role=\"assistant\")\n\n        # Print/speak the message in this agent's voice\n        self.speak(msg)\n\n        # record to memory\n        if self.memory:\n            # Convert the response dict into a string to store in memory\n            msg_memory = Msg(\n                name=self.name,\n                content=_convert_to_str(response),\n                role=\"assistant\",\n            )\n            self.memory.add(msg_memory)\n\n        return msg", "start_char_idx": 6071, "end_char_idx": 7237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1799e18c-0d7c-418b-98bc-31d9b0c258a9": {"__data__": {"id_": "1799e18c-0d7c-418b-98bc-31d9b0c258a9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/operator.py", "file_name": "operator.py", "file_type": "text/x-python", "file_size": 546, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c21e103f-8669-4b5d-aaf7-b86f4035ad06", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/operator.py", "file_name": "operator.py", "file_type": "text/x-python", "file_size": 546, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cf51bc85742a64410dd5795f43270cb2990e42565ce35a37c86a892178d6b467", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e60c9422-bbe2-4468-bb36-4b10299dde38", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35900a8191a1befdd8ff3cf3557c9447c1c8fd1e81da2acba6801d3be41cadaa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5e54b55-7461-4605-ab93-e262cb4cb636", "node_type": "1", "metadata": {}, "hash": "73557313870a60d4f90657d4c05859712b1a31bf8a72918e476a73a7be197b5b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"A common base class for AgentBase and PipelineBase\"\"\"\nfrom abc import ABC\nfrom abc import abstractmethod\nfrom typing import Any\n\n\nclass Operator(ABC):\n    \"\"\"\n    Abstract base class `Operator` defines a protocol for classes that\n    implement callable behavior.\n    The class is designed to be subclassed with an overridden `__call__`\n    method that specifies the execution logic for the operator.\n    \"\"\"\n\n    @abstractmethod\n    def __call__(self, *args: Any, **kwargs: Any) -> dict:\n        \"\"\"Calling function\"\"\"", "start_char_idx": 0, "end_char_idx": 545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5e54b55-7461-4605-ab93-e262cb4cb636": {"__data__": {"id_": "e5e54b55-7461-4605-ab93-e262cb4cb636", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1799e18c-0d7c-418b-98bc-31d9b0c258a9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/operator.py", "file_name": "operator.py", "file_type": "text/x-python", "file_size": 546, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b5c7ba17cef82d21ecf969f843dc2b5e64203df6de60e371f8c3b01a86f1072d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3f69594-2249-45d4-8f69-7efd2cd54c8c", "node_type": "1", "metadata": {}, "hash": "ec6a365e91f55541efff6023f19360cb324423c7a1e17562d25df500b4fea0f8", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"An agent class that implements the ReAct algorithm. The agent will reason\nand act iteratively to solve problems. More details can be found in the paper\nhttps://arxiv.org/abs/2210.03629.\n\"\"\"\nimport json\nfrom typing import Tuple, List\n\nfrom agentscope.agents import AgentBase\nfrom agentscope.message import Msg\nfrom agentscope.models import ResponseParser, ResponseParsingError\nfrom agentscope.service import ServiceResponse, ServiceExecStatus", "start_char_idx": 0, "end_char_idx": 468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3f69594-2249-45d4-8f69-7efd2cd54c8c": {"__data__": {"id_": "f3f69594-2249-45d4-8f69-7efd2cd54c8c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e5e54b55-7461-4605-ab93-e262cb4cb636", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a93c02d34584f40d6671c40e900717d81899a3ba0487fecf8705cc1e3b8f4daa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc", "node_type": "1", "metadata": {}, "hash": "1f6609efb4b369f31fd4f49744cfd0fce73adf3a606b701041dd2139f7b1236e", "class_name": "RelatedNodeInfo"}}, "text": "DEFAULT_TOOL_PROMPT = \"\"\"The following tool functions are available in the format of\n```\n{{index}}. {{function name}}: {{function description}}\n    {{argument1 name}} ({{argument type}}): {{argument description}}\n    {{argument2 name}} ({{argument type}}): {{argument description}}\n    ...\n```\n\n## Tool Functions:\n{function_prompt}\n\n## What You Should Do:\n1. First, analyze the current situation, and determine your goal.\n2. Then, check if your goal is already achieved. If so, try to generate a response. Otherwise, think about how to achieve it with the help of provided tool functions.\n3. Respond in the required format.\n\n## Note:\n1. Fully understand the tool functions and their arguments before using them.\n2. You should decide if you need to use the tool functions, if not then return an empty list in \"function\" field.\n3. Make sure the types and values of the arguments you provided to the tool functions are correct.\n4. Don't take things for granted. For example, where you are, what's the time now, etc. You can try to use the tool functions to get information.\n5. If the function execution fails, you should analyze the error and try to solve it.\n\n\"\"\"  # noqa", "start_char_idx": 471, "end_char_idx": 1640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc": {"__data__": {"id_": "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3f69594-2249-45d4-8f69-7efd2cd54c8c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1985599ebce38806e1dc848f101466a2364d27b805aa6a902066795f81c307a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e202262-89e8-44d0-9bc4-0918fd71171d", "node_type": "1", "metadata": {}, "hash": "683bd4c085bc998e40f6956af873088eb7f277947b1d0d98744334ad44b5a8c8", "class_name": "RelatedNodeInfo"}}, "text": "TOOL_HINT_PROMPT = \"\"\"\n## Response Format:\nYou should respond with a JSON object in the following format, which can be loaded by `json.loads` in Python directly. If no tool function is used, the \"function\" field should be an empty list.\n{\n    \"thought\": \"what you thought\",\n    \"speak\": \"what you said\",\n    \"function\": [{\"name\": \"{function name}\", \"arguments\": {\"{argument1 name}\": xxx, \"{argument2 name}\": xxx}}]\n}\"\"\"  # noqa\n\nFUNCTION_RESULT_TITLE_PROMPT = \"\"\"Execution Results:\n\"\"\"\n\nFUNCTION_RESULT_PROMPT = \"\"\"{index}. {function_name}:\n    [EXECUTE STATUS]: {status}\n    [EXECUTE RESULT]: {result}\n\"\"\"\n\nERROR_INFO_PROMPT = \"\"\"Your response is not a JSON object, and cannot be parsed by `json.loads` in parse function:\n## Your Response:\n[YOUR RESPONSE BEGIN]\n{response}\n[YOUR RESPONSE END]\n\n## Error Information:\n{error_info}\n\nAnalyze the reason, and re-correct your response in the correct format.\"\"\"  # pylint: disable=all  # noqa", "start_char_idx": 1642, "end_char_idx": 2578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e202262-89e8-44d0-9bc4-0918fd71171d": {"__data__": {"id_": "2e202262-89e8-44d0-9bc4-0918fd71171d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "484e24fae6bc3e3cfe02b4252edce8c530b2af5c97190964634b2edee7af3eaf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46574ed9-f63d-4f66-948b-ab552db74bfe", "node_type": "1", "metadata": {}, "hash": "e01ec8a8284d204efec7cb92ec0f82a542c55c13dc6c65aad9dc3e97206a1727", "class_name": "RelatedNodeInfo"}}, "text": "class ReActAgent(AgentBase):", "start_char_idx": 2581, "end_char_idx": 2609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46574ed9-f63d-4f66-948b-ab552db74bfe": {"__data__": {"id_": "46574ed9-f63d-4f66-948b-ab552db74bfe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e202262-89e8-44d0-9bc4-0918fd71171d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e4805d9448f9da9807e7f0db7c2ce113aa9d6a1a24f85b76c38da4139b9373d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4691c874-261a-435f-b00f-6527dbf70577", "node_type": "1", "metadata": {}, "hash": "994f7ddff9370dbad9f655c9710322a6b80a8475c633845f4b728489c24df6a5", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"An agent class that implements the ReAct algorithm. More details refer\n    to https://arxiv.org/abs/2210.03629.\n\n    Note this is an example implementation of ReAct algorithm in AgentScope.\n    We follow the idea within the paper, but the detailed prompt engineering\n    maybe different. Developers are encouraged to modify the prompt to fit\n    their own needs.\n    \"\"\"", "start_char_idx": 2614, "end_char_idx": 2987, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4691c874-261a-435f-b00f-6527dbf70577": {"__data__": {"id_": "4691c874-261a-435f-b00f-6527dbf70577", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46574ed9-f63d-4f66-948b-ab552db74bfe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8523fc1f64154af4ebc71c1d9a6f6d585b59bff4e99eeca69af3a9e3ed347dba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f5db5f2-ab0b-4e84-8075-21aa02174977", "node_type": "1", "metadata": {}, "hash": "6f631dffb3ecb628b66cda99a626d36b3caf178df25b80d6964889314e8a42f6", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        model_config_name: str,\n        tools: List[Tuple],\n        sys_prompt: str = \"You're a helpful assistant. Your name is {name}.\",\n        max_iters: int = 10,\n        verbose: bool = True,\n    ) -> None:", "start_char_idx": 2993, "end_char_idx": 3251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f5db5f2-ab0b-4e84-8075-21aa02174977": {"__data__": {"id_": "3f5db5f2-ab0b-4e84-8075-21aa02174977", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4691c874-261a-435f-b00f-6527dbf70577", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2d58d3c77f4db6af02f3074823a0e3e1e492f3e97b08f2b625f58c14caa8bee0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dab05d0e-801b-4004-9e29-808ce1cdbea2", "node_type": "1", "metadata": {}, "hash": "6b60281e36e54caceb7cd98378e775ef7af5d6f2403e3fca23df9d015f74450f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Initialize the ReAct agent with the given name, model config name\n        and tools.\n\n        Args:\n            name (`str`):\n                The name of the agent.\n            sys_prompt (`str`):\n                The system prompt of the agent.\n            model_config_name (`str`):\n                The name of the model config, which is used to load model from\n                configuration.\n            tools (`List[Tuple]`):\n                A list of tuples, each containing the name of a tool and the\n                tool's description in JSON schema format.\n            max_iters (`int`, defaults to `10`):\n                The maximum number of iterations of the reasoning-acting loops.\n            verbose (`bool`, defaults to `True`):\n                Whether to print the output of the tools.\n        \"\"\"\n        super().__init__(\n            name=name,\n            sys_prompt=sys_prompt,\n            model_config_name=model_config_name,\n        )\n\n        self.tools = tools\n        self.verbose = verbose\n        self.max_iters = max_iters\n\n        func_prompt, self.func_name_mapping = self.prepare_funcs_prompt(tools)\n\n        # Prepare system prompt\n        tools_prompt = DEFAULT_TOOL_PROMPT.format(function_prompt=func_prompt)\n\n        if sys_prompt.endswith(\"\\n\"):\n            self.sys_prompt = sys_prompt.format(name=self.name) + tools_prompt\n        else:\n            self.sys_prompt = (\n                sys_prompt.format(name=self.name) + \"\\n\" + tools_prompt\n            )", "start_char_idx": 3260, "end_char_idx": 4754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dab05d0e-801b-4004-9e29-808ce1cdbea2": {"__data__": {"id_": "dab05d0e-801b-4004-9e29-808ce1cdbea2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f5db5f2-ab0b-4e84-8075-21aa02174977", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7ca9123b727e3ada5639ccbf85ee47a01f597b1ee1446ff3559b6502f29496d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4", "node_type": "1", "metadata": {}, "hash": "2d0dc66e532ce295be3e469f100b545cbb02d9b532de8ed23867f997fa70444f", "class_name": "RelatedNodeInfo"}}, "text": "# Put sys prompt into memory\n        self.memory.add(Msg(\"system\", self.sys_prompt, role=\"system\"))", "start_char_idx": 4764, "end_char_idx": 4863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4": {"__data__": {"id_": "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dab05d0e-801b-4004-9e29-808ce1cdbea2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6e4f491930e85608014b6c24cc7b0a055544f387fdcb93655ad7baf3302949c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "258bb81f-ccf0-42de-aa7a-78c0841d361d", "node_type": "1", "metadata": {}, "hash": "5adf5275d3a81dfa4cbd33c56c8eb70c8fad1bca63ea94b6f8f67fde11c1102c", "class_name": "RelatedNodeInfo"}}, "text": "def reply(self, x: dict = None) -> dict:", "start_char_idx": 4869, "end_char_idx": 4909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "258bb81f-ccf0-42de-aa7a-78c0841d361d": {"__data__": {"id_": "258bb81f-ccf0-42de-aa7a-78c0841d361d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52fbefa93556b16243f8904c890cff986cbc7176100e15789790bf01413cb7b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5a0d612b-b0c2-4bcf-936f-2377851266ee", "node_type": "1", "metadata": {}, "hash": "04414340fd7de97b84b2999c94f070418573057cbda053f14a07b660db137f6d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The reply function that achieves the ReAct algorithm.\n        The more details please refer to https://arxiv.org/abs/2210.03629\"\"\"\n\n        if self.memory:\n            self.memory.add(x)", "start_char_idx": 4918, "end_char_idx": 5107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a0d612b-b0c2-4bcf-936f-2377851266ee": {"__data__": {"id_": "5a0d612b-b0c2-4bcf-936f-2377851266ee", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "258bb81f-ccf0-42de-aa7a-78c0841d361d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "252bc62e7e3d8ad313656f799ee6309e80d8fe997641991fbac49757ba71f8df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "096977be-93b2-4d60-b93c-0fae3be1a340", "node_type": "1", "metadata": {}, "hash": "d01237548ddac77fef31003a02783109baaff0504504c340ee0030b596a0323f", "class_name": "RelatedNodeInfo"}}, "text": "for _ in range(self.max_iters):\n            # Step 1: Thought", "start_char_idx": 5117, "end_char_idx": 5178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "096977be-93b2-4d60-b93c-0fae3be1a340": {"__data__": {"id_": "096977be-93b2-4d60-b93c-0fae3be1a340", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5a0d612b-b0c2-4bcf-936f-2377851266ee", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6b9d935234d07b694fda45bfea33fd6b2904948aea539fd5e145e32b27212e93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4741fec3-d4f8-49fb-bd96-34e659f782ea", "node_type": "1", "metadata": {}, "hash": "60398a0025daea1d68995280b4e21425e3c9799d88cbe83b7c8e9882b1e9b97b", "class_name": "RelatedNodeInfo"}}, "text": "self.speak(f\" ITER {_+1}, STEP 1: REASONING \".center(70, \"#\"))\n\n            try:\n                hint_msg = Msg(\"system\", TOOL_HINT_PROMPT, role=\"system\")\n                self.memory.add(hint_msg)\n\n                # Generate LLM response\n                prompt = self.model.format(self.memory.get_memory())\n                res = self.model(\n                    prompt,\n                    parse_func=ResponseParser.to_dict,\n                    max_retries=1,\n                ).json\n\n            except ResponseParsingError as e:\n                # Record the wrong response from the model\n                response_msg = Msg(self.name, e.response.text, \"assistant\")\n                self.speak(response_msg)\n\n                # Re-correct by model itself\n                error_msg = Msg(\n                    \"system\",\n                    ERROR_INFO_PROMPT.format(\n                        parse_func=ResponseParser.to_dict,\n                        error_info=e.error_info,\n                        response=e.response.text,\n                    ),\n                    \"system\",\n                )\n                self.speak(error_msg)\n\n                self.memory.add([response_msg, error_msg])\n\n                # Skip acting step to re-correct the response\n                continue\n\n            # Record the response in memory\n            msg_thought = Msg(self.name, res, role=\"assistant\")\n\n            # To better display the response, we reformat it by json.dumps here", "start_char_idx": 5192, "end_char_idx": 6656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4741fec3-d4f8-49fb-bd96-34e659f782ea": {"__data__": {"id_": "4741fec3-d4f8-49fb-bd96-34e659f782ea", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "096977be-93b2-4d60-b93c-0fae3be1a340", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b3d34500002ec9724bd2ce9396c516e9f0ba7099220f05ae3756c3642363fb16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9", "node_type": "1", "metadata": {}, "hash": "4ef421b3e5c02b83bf015321b1db025acb1895b9331d80fb4058b55b875bec3e", "class_name": "RelatedNodeInfo"}}, "text": "self.speak(\n                Msg(self.name, json.dumps(res, indent=4), role=\"assistant\"),\n            )\n\n            if self.memory:\n                self.memory.add(msg_thought)\n\n            # Skip the next steps if no need to call tools\n            if len(res.get(\"function\", [])) == 0:\n                return msg_thought\n\n            # Step 2: Action\n\n            self.speak(f\" ITER {_+1}, STEP 2: ACTION \".center(70, \"#\"))\n\n            # Execute functions\n            # TODO: check the provided arguments and re-correct them if needed\n            execute_results = []\n            for i, func in enumerate(res[\"function\"]):\n                # Execute the function\n                func_res = self.execute_func(i, func)\n                execute_results.append(func_res)\n\n            # Prepare prompt for execution results\n            execute_results_prompt = \"\\n\".join(\n                [\n                    FUNCTION_RESULT_PROMPT.format_map(res)\n                    for res in execute_results\n                ],\n            )\n            # Add title\n            execute_results_prompt = (\n                FUNCTION_RESULT_TITLE_PROMPT + execute_results_prompt\n            )\n\n            # Note: Observing the execution results and generate response are\n            # finished in the next loop. We just put the execution results\n            # into memory, and wait for the next loop to generate response.\n\n            # Record execution results into memory as a message from the system", "start_char_idx": 6669, "end_char_idx": 8150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9": {"__data__": {"id_": "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4741fec3-d4f8-49fb-bd96-34e659f782ea", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2d2a1e19bbef6585698db80a6c040d2bb94722ccf24dcd19ed7e1f57c8e57ad3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "112db4fa-f445-445a-aacb-676e3721f544", "node_type": "1", "metadata": {}, "hash": "75e11599b5630029e4a697a313fa293cda21ab5444b9c2910997d23e051b46e9", "class_name": "RelatedNodeInfo"}}, "text": "msg_res = Msg(\n                name=\"system\",\n                content=execute_results_prompt,\n                role=\"system\",\n            )\n            self.speak(msg_res)\n            if self.memory:\n                self.memory.add(msg_res)", "start_char_idx": 8163, "end_char_idx": 8402, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "112db4fa-f445-445a-aacb-676e3721f544": {"__data__": {"id_": "112db4fa-f445-445a-aacb-676e3721f544", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "df00b7c6ce373a3c33d6edc7995c3ff0dce7bd7c274199763e066a58263fdc77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c464b44-56a0-420a-a837-e162af077046", "node_type": "1", "metadata": {}, "hash": "977af17f668287cd8c99c46d707d3b4e016c2390da41567760d17bb2286861dd", "class_name": "RelatedNodeInfo"}}, "text": "return Msg(\n            \"system\",\n            \"The agent has reached the maximum iterations.\",\n            role=\"system\",\n        )", "start_char_idx": 8412, "end_char_idx": 8543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c464b44-56a0-420a-a837-e162af077046": {"__data__": {"id_": "4c464b44-56a0-420a-a837-e162af077046", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "112db4fa-f445-445a-aacb-676e3721f544", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b0a49754b3d91c0b91bb4e080f43ff04f7d0796d37882c5c25ae0680b8f1a201", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9", "node_type": "1", "metadata": {}, "hash": "470b78714462e775ee3c501e0e58cda62e2fab950282574d4515c161400d4b22", "class_name": "RelatedNodeInfo"}}, "text": "def execute_func(self, index: int, func_call: dict) -> dict:\n        \"\"\"Execute the tool function and return the result.\n\n        Args:\n            index (`int`):\n                The index of the tool function.\n            func_call (`dict`):\n                The function call dictionary with keys 'name' and 'arguments'.\n\n        Returns:\n            `ServiceResponse`: The execution results.\n        \"\"\"\n        # Extract the function name and arguments\n        func_name = func_call[\"name\"]\n        func_args = func_call[\"arguments\"]\n\n        self.speak(f\">>> Executing function {func_name} ...\")\n\n        try:\n            func_res = self.func_name_mapping[func_name](**func_args)\n        except Exception as e:\n            func_res = ServiceResponse(\n                status=ServiceExecStatus.ERROR,\n                content=str(e),\n            )\n\n        self.speak(\">>> END \")\n\n        status = (\n            \"SUCCESS\"\n            if func_res.status == ServiceExecStatus.SUCCESS\n            else \"FAILED\"\n        )\n\n        # return the result of the function\n        return {\n            \"index\": index + 1,\n            \"function_name\": func_name,\n            \"status\": status,\n            \"result\": func_res.content,\n        }", "start_char_idx": 8549, "end_char_idx": 9781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9": {"__data__": {"id_": "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c464b44-56a0-420a-a837-e162af077046", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aea0af9a88cf9dd464476452c5425b35fa27a0ccbffc144bba7e3b7982bc7fbf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d202763-13ba-4eff-bdaa-8fd42ad5187a", "node_type": "1", "metadata": {}, "hash": "f96e74e75b0223fa0b070f93c6d37e78832683eb76862d05f5e1c44e85206e2b", "class_name": "RelatedNodeInfo"}}, "text": "def prepare_funcs_prompt(self, tools: List[Tuple]) -> Tuple[str, dict]:", "start_char_idx": 9787, "end_char_idx": 9858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d202763-13ba-4eff-bdaa-8fd42ad5187a": {"__data__": {"id_": "9d202763-13ba-4eff-bdaa-8fd42ad5187a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8fe7bbf6c6951d87dbd18a4b4332bdbafe8b4a392ac91c551b8830a6daef0b14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8647b94c-9ea1-445a-9387-9bee64b249f5", "node_type": "1", "metadata": {}, "hash": "cf34585f7470ae6388f8b7a829f0d8bd50e2210b573cc44973493239b228dcac", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Convert function descriptions from json schema format to\n        string prompt format.\n\n        Args:\n            tools (`List[Tuple]`):\n                The list of tool functions and their descriptions in JSON\n                schema format.\n\n        Returns:\n            `Tuple[str, dict]`:\n                The string prompt for the tool functions and a function name\n                mapping dict.\n\n            .. code-block:: python\n\n                {index}. {function name}: {function description}\n                    {argument name} ({argument type}): {argument description}\n                    ...\n\n        \"\"\"\n        tools_prompt = []\n        func_name_mapping = {}", "start_char_idx": 9867, "end_char_idx": 10542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8647b94c-9ea1-445a-9387-9bee64b249f5": {"__data__": {"id_": "8647b94c-9ea1-445a-9387-9bee64b249f5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "16c9b8c1b58b155b152a2972bc0441152b64b9173bfef5ed54964746f1065098", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d202763-13ba-4eff-bdaa-8fd42ad5187a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "88d7868b93acb34018e5228cebae79b12a0e2a399695618bcb2eee69f372f76a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3dc408e-78ab-461e-ae75-531e0f50b91b", "node_type": "1", "metadata": {}, "hash": "5a0d12887827f5182b674627edcd0ad9a1e64575b6c7bdff2763eddf7e4b14a1", "class_name": "RelatedNodeInfo"}}, "text": "for i, (func, desc) in enumerate(tools):\n            func_name = desc[\"function\"][\"name\"]\n            func_name_mapping[func_name] = func\n\n            func_desc = desc[\"function\"][\"description\"]\n            args_desc = desc[\"function\"][\"parameters\"][\"properties\"]\n\n            args_list = [f\"{i + 1}. {func_name}: {func_desc}\"]\n            for args_name, args_info in args_desc.items():\n                if \"type\" in args_info:\n                    args_line = (\n                        f'\\t{args_name} ({args_info[\"type\"]}): '\n                        f'{args_info.get(\"description\", \"\")}'\n                    )\n                else:\n                    args_line = (\n                        f'\\t{args_name}: {args_info.get(\"description\", \"\")}'\n                    )\n                args_list.append(args_line)\n\n            func_prompt = \"\\n\".join(args_list)\n            tools_prompt.append(func_prompt)\n\n        return \"\\n\".join(tools_prompt), func_name_mapping", "start_char_idx": 10551, "end_char_idx": 11511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3dc408e-78ab-461e-ae75-531e0f50b91b": {"__data__": {"id_": "f3dc408e-78ab-461e-ae75-531e0f50b91b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8647b94c-9ea1-445a-9387-9bee64b249f5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4837fa9fdcada13925126fe731871fac0003da9d80586f51b5dc230dbb2684b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b", "node_type": "1", "metadata": {}, "hash": "78b056587cc02257951ed3fcd8516ba0ba5e0c35de1b2d1e6269c0aa3b78dff3", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Base class for Rpc Agent \"\"\"\n\nfrom multiprocessing import Process, Event, Pipe, cpu_count\nfrom multiprocessing.synchronize import Event as EventClass\nimport socket\nimport threading\nimport json\nimport traceback\nfrom typing import Any, Optional, Union, Type, Sequence\nfrom concurrent import futures\nfrom loguru import logger\n\ntry:\n    import grpc\n    from grpc import ServicerContext\nexcept ImportError:\n    grpc = None\n    ServicerContext = Any\n\ntry:\n    from expiringdict import ExpiringDict\nexcept ImportError:\n    ExpiringDict = None\n\nfrom agentscope._init import init_process, _INIT_SETTINGS\nfrom agentscope.agents.agent import AgentBase\nfrom agentscope.message import (\n    Msg,\n    PlaceholderMessage,\n    deserialize,\n    serialize,\n)\nfrom agentscope.rpc import (\n    RpcAgentClient,\n    RpcMsg,\n    RpcAgentServicer,\n    add_RpcAgentServicer_to_server,\n)\n\n\ndef rpc_servicer_method(  # type: ignore[no-untyped-def]\n    func,\n):\n    \"\"\"A decorator used to identify that the specific method is an rpc agent\n    servicer method, which can only be run in the rpc server process.\n    \"\"\"\n\n    def inner(rpc_agent, msg):  # type: ignore[no-untyped-def]\n        if not rpc_agent.is_servicer:\n            error_msg = f\"Detect main process try to use rpc servicer method \\\n                 [{func.__name__}]\"\n            logger.error(error_msg)\n            raise RuntimeError(error_msg)\n        return func(rpc_agent, msg)\n\n    return inner", "start_char_idx": 0, "end_char_idx": 1465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b": {"__data__": {"id_": "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3dc408e-78ab-461e-ae75-531e0f50b91b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1d223ead2795de5b354d6cc3395b9b7a7537b3c2d881b488224a4ce1fcc5ba01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86", "node_type": "1", "metadata": {}, "hash": "a43f2913e95290486e5622190c5fba6bb9866f87156b6f60393820a310573a12", "class_name": "RelatedNodeInfo"}}, "text": "class RpcAgent(AgentBase):", "start_char_idx": 1468, "end_char_idx": 1494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86": {"__data__": {"id_": "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fe07708bb415fb9a226fd3396653d775300086c243f8df55dcdaf22a8c9f8eea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0abec0b1-757d-4164-a97b-802dca884a65", "node_type": "1", "metadata": {}, "hash": "ce52addc5ae7926f9ee987bab439662355f8f49708d833637b1a92d169694afc", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A wrapper to extend an AgentBase into a gRPC Client.\"\"\"", "start_char_idx": 1499, "end_char_idx": 1557, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0abec0b1-757d-4164-a97b-802dca884a65": {"__data__": {"id_": "0abec0b1-757d-4164-a97b-802dca884a65", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3c223f373645a637ddbe0cafac4753ee662451ae28a262be75bf0f855078c1b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1050cb4f-c875-4aa1-bb9a-45afb0afe663", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        agent_class: Type[AgentBase],\n        agent_configs: Optional[dict] = None,\n        host: str = \"localhost\",\n        port: int = None,\n        launch_server: bool = True,\n        max_pool_size: int = 8192,\n        max_timeout_seconds: int = 1800,\n        local_mode: bool = True,\n        lazy_launch: bool = True,\n        agent_id: str = None,\n        create_with_agent_configs: bool = True,\n    ) -> None:", "start_char_idx": 1563, "end_char_idx": 2024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1050cb4f-c875-4aa1-bb9a-45afb0afe663": {"__data__": {"id_": "1050cb4f-c875-4aa1-bb9a-45afb0afe663", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0abec0b1-757d-4164-a97b-802dca884a65", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dde501c3d54c323f95736f91fe770145e14b75a225c4f9eeccde60658e0f92a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a595f6eb-ae63-492f-bb13-d63d073f877c", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a595f6eb-ae63-492f-bb13-d63d073f877c": {"__data__": {"id_": "a595f6eb-ae63-492f-bb13-d63d073f877c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1050cb4f-c875-4aa1-bb9a-45afb0afe663", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35afe5e4d0bc970a6a366c5bd90727192e60b38837860bed9e67eefdd9c34e2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e467c41-6572-49d1-a926-b71bd24a6c64", "node_type": "1", "metadata": {}, "hash": "5e6f5095de2c9c9215108ab01858e2635ff17f4fa06e5b7f4fb786dd95da138f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e467c41-6572-49d1-a926-b71bd24a6c64": {"__data__": {"id_": "0e467c41-6572-49d1-a926-b71bd24a6c64", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a595f6eb-ae63-492f-bb13-d63d073f877c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35afe5e4d0bc970a6a366c5bd90727192e60b38837860bed9e67eefdd9c34e2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7da0025f-e402-4b26-a1a1-b66d046f727a", "node_type": "1", "metadata": {}, "hash": "9c2503d0baf748c9345efe73baad41392dbb79cb1e048d71824b989edcc8698d", "class_name": "RelatedNodeInfo"}}, "text": "super().__init__(name=name)\n        self.host = host\n        self.port = port\n        self.server_launcher = None\n        self.client = None\n        if agent_id is not None:\n            self._agent_id = agent_id\n        else:\n            self._agent_id = agent_class.generate_agent_id()\n        self.agent_class = agent_class\n        if launch_server:\n            self.server_launcher = RpcAgentServerLauncher(\n                agent_class=agent_class,\n                agent_args=agent_configs[\"args\"] if agent_configs else None,\n                agent_kwargs=(\n                    agent_configs[\"kwargs\"] if agent_configs else None\n                ),\n                host=host,\n                port=port,\n                max_pool_size=max_pool_size,\n                max_timeout_seconds=max_timeout_seconds,\n                local_mode=local_mode,\n            )\n            if not lazy_launch:\n                self._launch_server()\n        else:\n            self.client = RpcAgentClient(\n                host=self.host,\n                port=self.port,\n                agent_id=self.agent_id,\n            )\n            self.client.create_agent(\n                agent_configs if create_with_agent_configs else None,\n            )", "start_char_idx": 3662, "end_char_idx": 4886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7da0025f-e402-4b26-a1a1-b66d046f727a": {"__data__": {"id_": "7da0025f-e402-4b26-a1a1-b66d046f727a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e467c41-6572-49d1-a926-b71bd24a6c64", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "93c7d731e8422fa79f52bd189e98608a2dd7f30093a734c26e832a999e9d115f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f707b04c-f27e-4e19-8df4-d0d3370144bf", "node_type": "1", "metadata": {}, "hash": "4ede2f1c3f800606e0ce992e41807ce631d51c7e7a5d976107dc37a1b8a8a5db", "class_name": "RelatedNodeInfo"}}, "text": "def _launch_server(self) -> None:\n        \"\"\"Launch a rpc server and update the port and the client\"\"\"\n        self.server_launcher.launch()\n        self.port = self.server_launcher.port\n        self.client = RpcAgentClient(\n            host=self.host,\n            port=self.port,\n            agent_id=self.agent_id,\n        )\n\n    def reply(self, x: dict = None) -> dict:\n        if self.client is None:\n            self._launch_server()\n        return PlaceholderMessage(\n            name=self.name,\n            content=None,\n            client=self.client,\n            x=x,\n        )\n\n    def observe(self, x: Union[dict, Sequence[dict]]) -> None:\n        if self.client is None:\n            self._launch_server()\n        self.client.call_func(\n            func_name=\"_observe\",\n            value=serialize(x),  # type: ignore[arg-type]\n        )", "start_char_idx": 4892, "end_char_idx": 5741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f707b04c-f27e-4e19-8df4-d0d3370144bf": {"__data__": {"id_": "f707b04c-f27e-4e19-8df4-d0d3370144bf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7da0025f-e402-4b26-a1a1-b66d046f727a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "476d7c914e9cb7a5b0dd8f657f1f915613e6e9c4fa26abd527aa7d96c2a5ceae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "763a9a82-9b19-44eb-be3d-76b4857beabe", "node_type": "1", "metadata": {}, "hash": "9d17744a61352a8397ea6a8672e7d6a6d0055db5b2f02cdc1a817d2d595cea02", "class_name": "RelatedNodeInfo"}}, "text": "def clone_instances(\n        self,\n        num_instances: int,\n        including_self: bool = True,\n    ) -> Sequence[AgentBase]:\n        \"\"\"\n        Clone a series of this instance with different agent_id and\n        return them as a list.\n\n        Args:\n            num_instances (`int`): The number of instances in the returned\n            list.\n            including_self (`bool`): Whether to include the instance calling\n            this method in the returned list.\n\n        Returns:\n            `Sequence[AgentBase]`: A list of agent instances.\n        \"\"\"\n        generated_instance_number = (\n            num_instances - 1 if including_self else num_instances\n        )\n        generated_instances = []\n\n        # launch the server before clone instances\n        if self.client is None:\n            self._launch_server()\n\n        # put itself as the first element of the returned list\n        if including_self:\n            generated_instances.append(self)\n\n        # clone instances without agent server\n        for _ in range(generated_instance_number):\n            generated_instances.append(\n                RpcAgent(\n                    name=self.name,\n                    agent_class=self.agent_class,\n                    host=self.host,\n                    port=self.port,\n                    launch_server=False,\n                    create_with_agent_configs=False,\n                ),\n            )\n        return generated_instances", "start_char_idx": 5747, "end_char_idx": 7197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "763a9a82-9b19-44eb-be3d-76b4857beabe": {"__data__": {"id_": "763a9a82-9b19-44eb-be3d-76b4857beabe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f707b04c-f27e-4e19-8df4-d0d3370144bf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f5a35baeff7041f944b110687cdf64f1d617dfe6bcc85f5a45104c2cf7f16d3c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56dacfc3-3ff3-4b59-b322-01b52adcf5a0", "node_type": "1", "metadata": {}, "hash": "485b4b26397fccec835e4fba7b66cb163f1f3e2b6deaed6d8708ae49dbb6e392", "class_name": "RelatedNodeInfo"}}, "text": "def stop(self) -> None:\n        \"\"\"Stop the RpcAgent and the rpc server.\"\"\"\n        if self.server_launcher is not None:\n            self.server_launcher.shutdown()\n\n    def __del__(self) -> None:\n        self.stop()", "start_char_idx": 7203, "end_char_idx": 7419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56dacfc3-3ff3-4b59-b322-01b52adcf5a0": {"__data__": {"id_": "56dacfc3-3ff3-4b59-b322-01b52adcf5a0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "763a9a82-9b19-44eb-be3d-76b4857beabe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "902e4eeb0c7cda74c8272444beb2ecb14e484d4620e817e61a90135dcb61bd6e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9661b907-8a09-44ab-88a5-f12fbac1cf8f", "node_type": "1", "metadata": {}, "hash": "a1e42b8d052189342057076f09d9d8be0262267323bdf3925f3e70e5406916ba", "class_name": "RelatedNodeInfo"}}, "text": "def setup_rpc_agent_server(\n    agent_class: Type[AgentBase],\n    agent_args: tuple,\n    agent_kwargs: dict,\n    host: str,\n    port: int,\n    init_settings: dict = None,\n    start_event: EventClass = None,\n    stop_event: EventClass = None,\n    pipe: int = None,\n    local_mode: bool = True,\n    max_pool_size: int = 8192,\n    max_timeout_seconds: int = 1800,\n) -> None:", "start_char_idx": 7422, "end_char_idx": 7793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9661b907-8a09-44ab-88a5-f12fbac1cf8f": {"__data__": {"id_": "9661b907-8a09-44ab-88a5-f12fbac1cf8f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56dacfc3-3ff3-4b59-b322-01b52adcf5a0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2edf7825e3c27e3ec4701b3abba61236ea30bdded30bb809182baa8d2f1af92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53152c00-0897-461a-a748-f78db2379fa8", "node_type": "1", "metadata": {}, "hash": "1d349a8def177f895d0d2dfe659dd1491e3a257b0dd266448e4c15118c20899c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Setup gRPC server rpc agent.\n\n    Args:\n        agent_class (`Type[AgentBase]`):\n            A subclass of AgentBase.\n        agent_args (`tuple`): The args tuple used to initialize the\n            agent_class.\n        agent_kwargs (`dict`): The args dict used to initialize the\n            agent_class.\n        host (`str`, defaults to `\"localhost\"`):\n            Hostname of the rpc agent server.\n        port (`int`):\n            The socket port monitored by grpc server.\n        init_settings (`dict`, defaults to `None`):\n            Init settings for agentscope.init.\n        start_event (`EventClass`, defaults to `None`):\n            An Event instance used to determine whether the child process\n            has been started.\n        stop_event (`EventClass`, defaults to `None`):\n            The stop Event instance used to determine whether the child\n            process has been stopped.\n        pipe (`int`, defaults to `None`):\n            A pipe instance used to pass the actual port of the server.\n        local_mode (`bool`, defaults to `None`):\n            Only listen to local requests.\n        max_pool_size (`int`, defaults to `8192`):\n            Max number of task results that the server can accommodate.\n        max_timeout_seconds (`int`, defaults to `1800`):\n            Timeout for task results.\n    \"\"\"\n\n    if init_settings is not None:\n        init_process(**init_settings)", "start_char_idx": 7798, "end_char_idx": 9204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53152c00-0897-461a-a748-f78db2379fa8": {"__data__": {"id_": "53152c00-0897-461a-a748-f78db2379fa8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9661b907-8a09-44ab-88a5-f12fbac1cf8f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a7e2d6e55b40b480f0dfd675b589e36fe81c0c2ea6691db054e91f0e02ce2b01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef2ede42-35ff-4b97-8c11-775f02b553cc", "node_type": "1", "metadata": {}, "hash": "ce3011bf4eb80b2b590b0c44e6414864178c7d6edceb8d60581486cfa1a05ed2", "class_name": "RelatedNodeInfo"}}, "text": "servicer = RpcServerSideWrapper(\n        agent_class,\n        agent_args,\n        agent_kwargs,\n        host=host,\n        port=port,\n        max_pool_size=max_pool_size,\n        max_timeout_seconds=max_timeout_seconds,\n    )\n    while True:\n        try:\n            port = check_port(port)\n            servicer.port = port\n            logger.info(\n                f\"Starting rpc server [{agent_class.__name__}] at port\"\n                f\" [{port}]...\",\n            )\n            server = grpc.server(\n                futures.ThreadPoolExecutor(max_workers=cpu_count()),\n            )\n            add_RpcAgentServicer_to_server(servicer, server)\n            if local_mode:\n                server.add_insecure_port(f\"localhost:{port}\")\n            else:\n                server.add_insecure_port(f\"0.0.0.0:{port}\")\n            server.start()\n            break\n        except OSError:\n            logger.warning(\n                f\"Failed to start rpc server at port [{port}]\"\n                f\"try another port\",\n            )\n    logger.info(\n        f\"rpc server [{agent_class.__name__}] at port [{port}] started \"\n        \"successfully\",\n    )\n    if start_event is not None:\n        pipe.send(port)\n        start_event.set()\n        stop_event.wait()\n        logger.info(\n            f\"Stopping rpc server [{agent_class.__name__}] at port [{port}]\",\n        )\n        server.stop(1.0).wait()\n    else:\n        server.wait_for_termination()", "start_char_idx": 9209, "end_char_idx": 10649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef2ede42-35ff-4b97-8c11-775f02b553cc": {"__data__": {"id_": "ef2ede42-35ff-4b97-8c11-775f02b553cc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53152c00-0897-461a-a748-f78db2379fa8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78d8a8b727af7aa64b003c133b035f34e7b1d74131b5b64af1ba3c7388b0c6ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c59ef9b0-3456-4e93-b54c-645259c70c9b", "node_type": "1", "metadata": {}, "hash": "832d2a1b9305db81e3c1e5abd74ae3d7d380180966062d3835e8afd0c6fc0bf6", "class_name": "RelatedNodeInfo"}}, "text": "logger.info(\n        f\"rpc server [{agent_class.__name__}] at port [{port}] stopped \"\n        \"successfully\",\n    )", "start_char_idx": 10654, "end_char_idx": 10769, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c59ef9b0-3456-4e93-b54c-645259c70c9b": {"__data__": {"id_": "c59ef9b0-3456-4e93-b54c-645259c70c9b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef2ede42-35ff-4b97-8c11-775f02b553cc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a7eba76494cb69922755238e69a51c162ffdbaee305553018a5be5fced1c63e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e6eda6c-6f1e-4a0b-9521-52ccec226f93", "node_type": "1", "metadata": {}, "hash": "e552c12e0fd85a5219e99614550d62c96497f4633e013bffcf30c4bfdc222a7d", "class_name": "RelatedNodeInfo"}}, "text": "def find_available_port() -> int:\n    \"\"\"Get an unoccupied socket port number.\"\"\"\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((\"\", 0))\n        return s.getsockname()[1]\n\n\ndef check_port(port: Optional[int] = None) -> int:\n    \"\"\"Check if the port is available.\n\n    Args:\n        port (`int`):\n            the port number being checked.\n\n    Returns:\n        `int`: the port number that passed the check. If the port is found\n        to be occupied, an available port number will be automatically\n        returned.\n    \"\"\"\n    if port is None:\n        new_port = find_available_port()\n        logger.warning(\n            \"gRpc server port is not provided, automatically select \"\n            f\"[{new_port}] as the port number.\",\n        )\n        return new_port\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        if s.connect_ex((\"localhost\", port)) == 0:\n            new_port = find_available_port()\n            logger.warning(\n                f\"Port [{port}] is occupied, use [{new_port}] instead\",\n            )\n            return new_port\n    return port", "start_char_idx": 10772, "end_char_idx": 11888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e6eda6c-6f1e-4a0b-9521-52ccec226f93": {"__data__": {"id_": "4e6eda6c-6f1e-4a0b-9521-52ccec226f93", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c59ef9b0-3456-4e93-b54c-645259c70c9b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "22eb6a8df953c8fced37a5c92e280970506490e8395f913ff8a0a016f3c62856", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "441b007b-7232-4b91-a629-f6add264998b", "node_type": "1", "metadata": {}, "hash": "e6365201c2ffa67bae5913a76746a0b95aa68eb2b33750057cb6d1ff59e20d41", "class_name": "RelatedNodeInfo"}}, "text": "class RpcAgentServerLauncher:", "start_char_idx": 11891, "end_char_idx": 11920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "441b007b-7232-4b91-a629-f6add264998b": {"__data__": {"id_": "441b007b-7232-4b91-a629-f6add264998b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e6eda6c-6f1e-4a0b-9521-52ccec226f93", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "17d349a7ed0aa6a4acd247a3df4583df0a45dc43d17bf6a6a1d0f9ebca567613", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df4a1682-029c-442b-9c19-d9329e74b2b6", "node_type": "1", "metadata": {}, "hash": "a6e357077f3f50426f160801d86099386e3dba60c8f3b775806295630ab2b90b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Launcher of rpc agent server.\"\"\"", "start_char_idx": 11925, "end_char_idx": 11960, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df4a1682-029c-442b-9c19-d9329e74b2b6": {"__data__": {"id_": "df4a1682-029c-442b-9c19-d9329e74b2b6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "441b007b-7232-4b91-a629-f6add264998b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9a7e6513127e9b415a2a4e0e64e5b341fbbf2e70b98e76afc1f4f80dc6996eca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e95ecf6-1741-43de-97d1-3a28acfb77a7", "node_type": "1", "metadata": {}, "hash": "cae73c2cc2a7318e6a63247c225a115200be2591d61e48e15ed965fd8d587615", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        agent_class: Type[AgentBase] = None,\n        agent_args: tuple = (),\n        agent_kwargs: dict = None,\n        host: str = \"localhost\",\n        port: int = None,\n        max_pool_size: int = 8192,\n        max_timeout_seconds: int = 1800,\n        local_mode: bool = False,\n    ) -> None:", "start_char_idx": 11966, "end_char_idx": 12289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e95ecf6-1741-43de-97d1-3a28acfb77a7": {"__data__": {"id_": "1e95ecf6-1741-43de-97d1-3a28acfb77a7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df4a1682-029c-442b-9c19-d9329e74b2b6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4d1bb35b7a661aa4452a508821c4e03ad4ab4fc74783e2319bab6f47515dbc3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f53bdb4-2d58-4885-b48b-118fe9074db6", "node_type": "1", "metadata": {}, "hash": "358789c87f63db9ea44bc110149954e8c945ea2e4d9a5d37684a4a0024d739e9", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Init a rpc agent server launcher.\n\n        Args:\n            agent_class (`Type[AgentBase]`, defaults to `None`):\n                The AgentBase subclass encapsulated by this wrapper.\n            agent_args (`tuple`): The args tuple used to initialize the\n                agent_class.\n            agent_kwargs (`dict`): The args dict used to initialize the\n                agent_class.\n            host (`str`, defaults to `\"localhost\"`):\n                Hostname of the rpc agent server.\n            port (`int`, defaults to `None`):\n                Port of the rpc agent server.\n            max_pool_size (`int`, defaults to `8192`):\n                Max number of task results that the server can accommodate.\n            max_timeout_seconds (`int`, defaults to `1800`):\n                Timeout for task results.\n            local_mode (`bool`, defaults to `False`):\n                Whether the started rpc server only listens to local\n                requests.\n        \"\"\"\n        self.agent_class = agent_class\n        self.agent_args = agent_args\n        self.agent_kwargs = agent_kwargs\n        self.host = host\n        self.port = check_port(port)\n        self.max_pool_size = max_pool_size\n        self.max_timeout_seconds = max_timeout_seconds\n        self.local_mode = local_mode\n        self.server = None\n        self.stop_event = None\n        self.parent_con = None", "start_char_idx": 12298, "end_char_idx": 13678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f53bdb4-2d58-4885-b48b-118fe9074db6": {"__data__": {"id_": "5f53bdb4-2d58-4885-b48b-118fe9074db6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e95ecf6-1741-43de-97d1-3a28acfb77a7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0aed99e1d3e65718e6f448a3e0590dc581cec1848f8e77b730804ddae67b4519", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0c2837e6-c149-4636-965b-55948c8186fe", "node_type": "1", "metadata": {}, "hash": "b41f36712dd00d41eab2991022d0d07bf3ae2772242c4f5d4a62d8178dd18299", "class_name": "RelatedNodeInfo"}}, "text": "def _launch_in_main(self) -> None:\n        \"\"\"Launch gRPC server in main-process\"\"\"\n        server_thread = threading.Thread(\n            target=setup_rpc_agent_server,\n            kwargs={\n                \"agent_class\": self.agent_class,\n                \"agent_args\": self.agent_args,\n                \"agent_kwargs\": self.agent_kwargs,\n                \"host\": self.host,\n                \"port\": self.port,\n                \"max_pool_size\": self.max_pool_size,\n                \"max_timeout_seconds\": self.max_timeout_seconds,\n                \"local_mode\": self.local_mode,\n            },\n        )\n        server_thread.start()\n        logger.info(\n            f\"Launch [{self.agent_class.__name__}] server at \"\n            f\"[{self.host}:{self.port}] success\",\n        )\n        server_thread.join()", "start_char_idx": 13684, "end_char_idx": 14483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c2837e6-c149-4636-965b-55948c8186fe": {"__data__": {"id_": "0c2837e6-c149-4636-965b-55948c8186fe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f53bdb4-2d58-4885-b48b-118fe9074db6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc384c591e2e8953647e9082fbf7575bd77d3cc502e9de2c10185fee6a9a2335", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c1af76f-e13c-46db-9b3b-cf0279e91df7", "node_type": "1", "metadata": {}, "hash": "2f75d9352d9326af0d04dff2922eea93983e5b7d1153c8b48322c2db942632f3", "class_name": "RelatedNodeInfo"}}, "text": "def _launch_in_sub(self) -> None:\n        \"\"\"Launch gRPC server in sub-process.\"\"\"\n        self.stop_event = Event()\n        self.parent_con, child_con = Pipe()\n        start_event = Event()\n        server_process = Process(\n            target=setup_rpc_agent_server,\n            kwargs={\n                \"agent_class\": self.agent_class,\n                \"agent_args\": self.agent_args,\n                \"agent_kwargs\": self.agent_kwargs,\n                \"host\": self.host,\n                \"port\": self.port,\n                \"init_settings\": _INIT_SETTINGS,\n                \"start_event\": start_event,\n                \"stop_event\": self.stop_event,\n                \"pipe\": child_con,\n                \"max_pool_size\": self.max_pool_size,\n                \"max_timeout_seconds\": self.max_timeout_seconds,\n                \"local_mode\": self.local_mode,\n            },\n        )\n        server_process.start()\n        self.port = self.parent_con.recv()\n        start_event.wait()\n        self.server = server_process\n        logger.info(\n            f\"Launch [{self.agent_class.__name__}] server at \"\n            f\"[{self.host}:{self.port}] success\",\n        )", "start_char_idx": 14489, "end_char_idx": 15641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c1af76f-e13c-46db-9b3b-cf0279e91df7": {"__data__": {"id_": "1c1af76f-e13c-46db-9b3b-cf0279e91df7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c2837e6-c149-4636-965b-55948c8186fe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "301639ed3a7f4a4b710fc19041f3a3dfae7a7dee133715d2af04286b5ab76306", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3b98729-6857-4d3e-b192-21171cfba6fb", "node_type": "1", "metadata": {}, "hash": "9d64dbb62772ad6a4655adbd3690f63bbf9f8a346702b08355758fb1d139ce73", "class_name": "RelatedNodeInfo"}}, "text": "def launch(self, in_subprocess: bool = True) -> None:\n        \"\"\"launch a rpc agent server.\n\n        Args:\n            in_subprocess (bool, optional): launch the server in subprocess.\n                Defaults to True. For agents that need to obtain command line\n                input, such as UserAgent, please set this value to False.\n        \"\"\"\n        if in_subprocess:\n            self._launch_in_sub()\n        else:\n            self._launch_in_main()\n\n    def wait_until_terminate(self) -> None:\n        \"\"\"Wait for server process\"\"\"\n        if self.server is not None:\n            self.server.join()\n\n    def shutdown(self) -> None:\n        \"\"\"Shutdown the rpc agent server.\"\"\"\n        if self.server is not None:\n            if self.stop_event is not None:\n                self.stop_event.set()\n                self.stop_event = None\n            self.server.join()\n            if self.server.is_alive():\n                self.server.kill()\n                logger.info(\n                    f\"Rpc server [{self.agent_class.__name__}] at port\"\n                    f\" [{self.port}] is killed.\",\n                )\n            self.server = None", "start_char_idx": 15647, "end_char_idx": 16793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3b98729-6857-4d3e-b192-21171cfba6fb": {"__data__": {"id_": "f3b98729-6857-4d3e-b192-21171cfba6fb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c1af76f-e13c-46db-9b3b-cf0279e91df7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7908bd17d851a2b749eeedfa49e46c6fb3a26683ebb7d579180d57c1eccb1f7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db62a88d-da0d-41c4-8fb3-82c96aede40a", "node_type": "1", "metadata": {}, "hash": "e81b0e415d9ac35bcd00547a78cc29dc2c4b65d674ccd85d967e94fbe13aed5b", "class_name": "RelatedNodeInfo"}}, "text": "class RpcServerSideWrapper(RpcAgentServicer):", "start_char_idx": 16796, "end_char_idx": 16841, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db62a88d-da0d-41c4-8fb3-82c96aede40a": {"__data__": {"id_": "db62a88d-da0d-41c4-8fb3-82c96aede40a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3b98729-6857-4d3e-b192-21171cfba6fb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "42f27465e4c183b30307640fe9e7ed0c9bbb70d6f2682154cc3989fbbc640f8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "451c9af4-c08d-4da7-a2b7-d3c9821c615b", "node_type": "1", "metadata": {}, "hash": "6ca0b1e6cd869badecf62ff7121cb096afe714be0b81ef9135d7e631b98b72f6", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A wrapper to extend an AgentBase into a gRPC Servicer.\"\"\"", "start_char_idx": 16846, "end_char_idx": 16906, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "451c9af4-c08d-4da7-a2b7-d3c9821c615b": {"__data__": {"id_": "451c9af4-c08d-4da7-a2b7-d3c9821c615b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db62a88d-da0d-41c4-8fb3-82c96aede40a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3e91755a76bf3e9f8c301599583d65c2d83e4f313b06a4354e364ca7807d3889", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a06f2471-44c6-4937-ba75-123a14fbcba0", "node_type": "1", "metadata": {}, "hash": "2e922ef420ef78a535e1200134e15003860bdaf2fbfbf971c69253f5218dc04c", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        agent_class: Type[AgentBase],\n        agent_args: tuple,\n        agent_kwargs: dict,\n        host: str = \"localhost\",\n        port: int = None,\n        max_pool_size: int = 8192,\n        max_timeout_seconds: int = 1800,\n    ):", "start_char_idx": 16912, "end_char_idx": 17174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a06f2471-44c6-4937-ba75-123a14fbcba0": {"__data__": {"id_": "a06f2471-44c6-4937-ba75-123a14fbcba0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "451c9af4-c08d-4da7-a2b7-d3c9821c615b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9968d29a80ca82497a3622f0075c233207cb8eccb85b96954736e6960be7ac03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab19c48a-a921-43d4-8ca1-f1906bea2fac", "node_type": "1", "metadata": {}, "hash": "8622556b0f9b58979f3bd7ebc7c50a28a0a4afbe6296afbad798498b07418826", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Init the service side wrapper.\n\n        Args:\n            agent_class (`Type[AgentBase]`): The AgentBase subclass\n                encapsulated by this wrapper.\n            agent_args (`tuple`): The args tuple used to initialize the\n                agent_class.\n            agent_kwargs (`dict`): The args dict used to initialize the\n                agent_class.\n            host (`str`, defaults to \"localhost\"):\n                Hostname of the rpc agent server.\n            port (`int`, defaults to `None`):\n                Port of the rpc agent server.\n            max_pool_size (`int`, defaults to `8192`):\n                The max number of task results that the server can\n                accommodate. Note that the oldest result will be deleted\n                after exceeding the pool size.\n            max_timeout_seconds (`int`, defaults to `1800`):\n                Timeout for task results. Note that expired results will be\n                deleted.\n        \"\"\"\n        self.agent_class = agent_class\n        self.agent_args = agent_args\n        self.agent_kwargs = agent_kwargs\n        self.host = host\n        self.port = port\n        self.result_pool = ExpiringDict(\n            max_len=max_pool_size,\n            max_age_seconds=max_timeout_seconds,\n        )\n        self.executor = futures.ThreadPoolExecutor(max_workers=cpu_count())\n        self.task_id_lock = threading.Lock()\n        self.agent_id_lock = threading.Lock()\n        self.task_id_counter = 0", "start_char_idx": 17183, "end_char_idx": 18658, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab19c48a-a921-43d4-8ca1-f1906bea2fac": {"__data__": {"id_": "ab19c48a-a921-43d4-8ca1-f1906bea2fac", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a06f2471-44c6-4937-ba75-123a14fbcba0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4545194d2634271de5ed0aa3570d8a753005c7614884ba9725d2058a5fa84dfe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "235d2fde-d4d1-486f-9900-8d108ac7973f", "node_type": "1", "metadata": {}, "hash": "930ec727d139bccdba8a9ed12f7cfef64b9b11130e946f4d9672fe5e2e499741", "class_name": "RelatedNodeInfo"}}, "text": "self.agent_pool: dict[str, AgentBase] = {}", "start_char_idx": 18667, "end_char_idx": 18709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "235d2fde-d4d1-486f-9900-8d108ac7973f": {"__data__": {"id_": "235d2fde-d4d1-486f-9900-8d108ac7973f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab19c48a-a921-43d4-8ca1-f1906bea2fac", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "63240f2a01ce6af7be464981fe840655c7e7826f812cf32f142e5bb626d4d7b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f0b2f50-aba4-41dd-b83a-1576e3c87c02", "node_type": "1", "metadata": {}, "hash": "c13ecf6cff5cc8cb22d396e4ac6556acb32c8c7687237c72a50007a3fd0f59ca", "class_name": "RelatedNodeInfo"}}, "text": "def get_task_id(self) -> int:\n        \"\"\"Get the auto-increment task id.\"\"\"\n        with self.task_id_lock:\n            self.task_id_counter += 1\n            return self.task_id_counter\n\n    def check_and_generate_agent(\n        self,\n        agent_id: str,\n        agent_configs: dict = None,\n    ) -> None:\n        \"\"\"\n        Check whether the agent exists, and create new agent instance\n        for new agent.\n\n        Args:\n            agent_id (`str`): the agent id.\n        \"\"\"\n        with self.agent_id_lock:\n            if agent_id not in self.agent_pool:\n                if agent_configs is not None:\n                    agent_instance = self.agent_class(\n                        *agent_configs[\"args\"],\n                        **agent_configs[\"kwargs\"],\n                    )\n                else:\n                    agent_instance = self.agent_class(\n                        *self.agent_args,\n                        **self.agent_kwargs,\n                    )\n                agent_instance._agent_id = agent_id  # pylint: disable=W0212\n                self.agent_pool[agent_id] = agent_instance\n                logger.info(f\"create agent instance [{agent_id}]\")", "start_char_idx": 18715, "end_char_idx": 19891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f0b2f50-aba4-41dd-b83a-1576e3c87c02": {"__data__": {"id_": "7f0b2f50-aba4-41dd-b83a-1576e3c87c02", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "235d2fde-d4d1-486f-9900-8d108ac7973f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4c14d15eee15d5bedb9c45a2899bf37406a30262358cf4c14fd5e3d9ed38cf40", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be91ba27-2442-4949-9dc6-8e01ef1fe156", "node_type": "1", "metadata": {}, "hash": "c3a23b04bfdc4cfca2984fb5e9418732acf9bf80de10db3e4e66a3fa7a928945", "class_name": "RelatedNodeInfo"}}, "text": "def check_and_delete_agent(self, agent_id: str) -> None:\n        \"\"\"\n        Check whether the agent exists, and delete the agent instance\n        for the agent_id.\n\n        Args:\n            agent_id (`str`): the agent id.\n        \"\"\"\n        with self.agent_id_lock:\n            if agent_id in self.agent_pool:\n                self.agent_pool.pop(agent_id)\n                logger.info(f\"delete agent instance [{agent_id}]\")\n\n    def call_func(self, request: RpcMsg, _: ServicerContext) -> RpcMsg:\n        \"\"\"Call the specific servicer function.\"\"\"\n        if hasattr(self, request.target_func):\n            if request.target_func not in [\"_create_agent\", \"_get\"]:\n                self.check_and_generate_agent(request.agent_id)\n            return getattr(self, request.target_func)(request)\n        else:\n            # TODO: support other user defined method\n            logger.error(f\"Unsupported method {request.target_func}\")\n            return RpcMsg(\n                value=Msg(\n                    name=self.agent_pool[request.agent_id].name,\n                    content=f\"Unsupported method {request.target_func}\",\n                    role=\"assistant\",\n                ).serialize(),\n            )", "start_char_idx": 19897, "end_char_idx": 21102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be91ba27-2442-4949-9dc6-8e01ef1fe156": {"__data__": {"id_": "be91ba27-2442-4949-9dc6-8e01ef1fe156", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f0b2f50-aba4-41dd-b83a-1576e3c87c02", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc70a59fa211c3846dd01cfdca1cd1fa99ec2d2c03afdfa3b882a89aba86a952", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00", "node_type": "1", "metadata": {}, "hash": "57e9c60cdd55a5109c715a989308c572d682f494a7991d02f4662cf4191ef8d5", "class_name": "RelatedNodeInfo"}}, "text": "def _reply(self, request: RpcMsg) -> RpcMsg:\n        \"\"\"Call function of RpcAgentService\n\n        Args:\n            request (`RpcMsg`):\n                Message containing input parameters or input parameter\n                placeholders.\n\n        Returns:\n            `RpcMsg`: A serialized Msg instance with attributes name, host,\n            port and task_id\n        \"\"\"\n        if request.value:\n            msg = deserialize(request.value)\n        else:\n            msg = None\n        task_id = self.get_task_id()\n        self.result_pool[task_id] = threading.Condition()\n        self.executor.submit(\n            self.process_messages,\n            task_id,\n            request.agent_id,\n            msg,  # type: ignore[arg-type]\n        )\n        return RpcMsg(\n            value=Msg(\n                name=self.agent_pool[request.agent_id].name,\n                content=None,\n                task_id=task_id,\n            ).serialize(),\n        )", "start_char_idx": 21108, "end_char_idx": 22058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00": {"__data__": {"id_": "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be91ba27-2442-4949-9dc6-8e01ef1fe156", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1c626ed1bd687df5441c9663ffb44a3a14187960b1e8ae9f3ff468683256f424", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "422f1889-118d-41a3-b160-1567f06b4b56", "node_type": "1", "metadata": {}, "hash": "76f1de3fc5abede4f8c893e8fa22aa3086c9f5b0d2e7e8cad9b120472e63be25", "class_name": "RelatedNodeInfo"}}, "text": "def _get(self, request: RpcMsg) -> RpcMsg:\n        \"\"\"Get function of RpcAgentService\n\n        Args:\n            request (`RpcMsg`):\n                Identifier of message, with json format::\n\n                {\n                    'task_id': int\n                }\n\n        Returns:\n            `RpcMsg`: Concrete values of the specific message (or part of it).\n        \"\"\"\n        msg = json.loads(request.value)\n        while True:\n            result = self.result_pool.get(msg[\"task_id\"])\n            if isinstance(result, threading.Condition):\n                with result:\n                    result.wait(timeout=1)\n            else:\n                break\n        return RpcMsg(value=result.serialize())\n\n    def _observe(self, request: RpcMsg) -> RpcMsg:\n        \"\"\"Observe function of RpcAgentService\n\n        Args:\n            request (`RpcMsg`):\n                The serialized input to be observed.\n\n        Returns:\n            `RpcMsg`: Empty RpcMsg.\n        \"\"\"\n        msgs = deserialize(request.value)\n        for msg in msgs:\n            if isinstance(msg, PlaceholderMessage):\n                msg.update_value()\n        self.agent_pool[request.agent_id].observe(msgs)\n        return RpcMsg()", "start_char_idx": 22064, "end_char_idx": 23268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "422f1889-118d-41a3-b160-1567f06b4b56": {"__data__": {"id_": "422f1889-118d-41a3-b160-1567f06b4b56", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "074d8f0ec00ba536485001ed24e54803983bf2a21588bf5f23fad78e7351a335", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0aa0593d-011d-4c4e-b603-16d5d8afc1c7", "node_type": "1", "metadata": {}, "hash": "76581a3a272edeb110a054e1446388e501a0189c1c607bb5d66c033209635434", "class_name": "RelatedNodeInfo"}}, "text": "def _create_agent(self, request: RpcMsg) -> RpcMsg:\n        \"\"\"Create a new agent instance for the agent_id.\n\n        Args:\n            request (RpcMsg): request message with a `agent_id` field.\n        \"\"\"\n        self.check_and_generate_agent(\n            request.agent_id,\n            agent_configs=json.loads(request.value) if request.value else None,\n        )\n        return RpcMsg()\n\n    def _delete_agent(self, request: RpcMsg) -> RpcMsg:\n        \"\"\"Delete the agent instance of the specific sesssion_id.\n\n        Args:\n            request (RpcMsg): request message with a `agent_id` field.\n        \"\"\"\n        self.check_and_delete_agent(request.agent_id)\n        return RpcMsg()", "start_char_idx": 23274, "end_char_idx": 23962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0aa0593d-011d-4c4e-b603-16d5d8afc1c7": {"__data__": {"id_": "0aa0593d-011d-4c4e-b603-16d5d8afc1c7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0dbb24134674c56f1311b4e7966b232b92fa5e102be085f71d3d26ac1e5572e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "422f1889-118d-41a3-b160-1567f06b4b56", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "69edac924ca2b584ff2e0ffa57f64430c64921a1e769b47073d871b22dd9f5de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d", "node_type": "1", "metadata": {}, "hash": "1aba4a9ae356d166f86dfb2db4a4c53e9ca67c84478a69390c22bf9cf71af1f5", "class_name": "RelatedNodeInfo"}}, "text": "def process_messages(\n        self,\n        task_id: int,\n        agent_id: str,\n        task_msg: dict = None,\n    ) -> None:\n        \"\"\"Task processing.\"\"\"\n        if isinstance(task_msg, PlaceholderMessage):\n            task_msg.update_value()\n        cond = self.result_pool[task_id]\n        try:\n            result = self.agent_pool[agent_id].reply(task_msg)\n            self.result_pool[task_id] = result\n        except Exception:\n            error_msg = traceback.format_exc()\n            logger.error(f\"Error in agent [{agent_id}]:\\n{error_msg}\")\n            self.result_pool[task_id] = Msg(\n                name=\"ERROR\",\n                role=\"assistant\",\n                __status=\"ERROR\",\n                content=f\"Error in agent [{agent_id}]:\\n{error_msg}\",\n            )\n        with cond:\n            cond.notify_all()", "start_char_idx": 23968, "end_char_idx": 24798, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d": {"__data__": {"id_": "b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "241c3e24bae5d8dbf3b05a135caf2fa9a564ee8c42dde0eaa298ba1678d22a53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0aa0593d-011d-4c4e-b603-16d5d8afc1c7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5731512fd0af7076f5e29b33a1244ffc458c2f91543b6e53a1d05a9f16e7d86a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23f15c9d-9966-4040-ba8b-c3b7fb273377", "node_type": "1", "metadata": {}, "hash": "fa4871419fe82089be49bb5daec2f56508472a742d624488a1b142fea9ac9a22", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"An agent that convert text to image.\"\"\"\n\nfrom typing import Optional\n\nfrom .agent import AgentBase\nfrom ..message import Msg", "start_char_idx": 0, "end_char_idx": 151, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23f15c9d-9966-4040-ba8b-c3b7fb273377": {"__data__": {"id_": "23f15c9d-9966-4040-ba8b-c3b7fb273377", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "241c3e24bae5d8dbf3b05a135caf2fa9a564ee8c42dde0eaa298ba1678d22a53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "431ab45ec6f98c1daf1daa25dc3bdfa89747fb9e53d165de6e2e7e353599af0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b5a9ccc-df53-40b5-a358-b37de987f291", "node_type": "1", "metadata": {}, "hash": "62409b3dd16f0c59c96fc43a93951c4ff0b85224f684bd7b7ae5c96d91964238", "class_name": "RelatedNodeInfo"}}, "text": "class TextToImageAgent(AgentBase):", "start_char_idx": 154, "end_char_idx": 188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b5a9ccc-df53-40b5-a358-b37de987f291": {"__data__": {"id_": "8b5a9ccc-df53-40b5-a358-b37de987f291", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "241c3e24bae5d8dbf3b05a135caf2fa9a564ee8c42dde0eaa298ba1678d22a53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23f15c9d-9966-4040-ba8b-c3b7fb273377", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "287f7562d7c62d47483fad56ffd793c55a2ab7c15fbd2b18b5c1fe3fa38133d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34b9be46-e563-4c2f-80f3-5a971d5b57a1", "node_type": "1", "metadata": {}, "hash": "c9c51fd838c6f97268094a2a3d1ed0180904301c288471a936bdfa1c18875526", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    A agent used to perform text to image tasks.\n\n    TODO: change the agent into a service.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        model_config_name: str,\n        use_memory: bool = True,\n        memory_config: Optional[dict] = None,\n    ) -> None:\n        \"\"\"Initialize the text to image agent.\n\n        Arguments:\n            name (`str`):\n                The name of the agent.\n            model_config_name (`str`, defaults to None):\n                The name of the model config, which is used to load model from\n                configuration.\n            use_memory (`bool`, defaults to `True`):\n                Whether the agent has memory.\n            memory_config (`Optional[dict]`):\n                The config of memory.\n        \"\"\"\n        super().__init__(\n            name=name,\n            sys_prompt=\"\",\n            model_config_name=model_config_name,\n            use_memory=use_memory,\n            memory_config=memory_config,\n        )", "start_char_idx": 193, "end_char_idx": 1180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34b9be46-e563-4c2f-80f3-5a971d5b57a1": {"__data__": {"id_": "34b9be46-e563-4c2f-80f3-5a971d5b57a1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "241c3e24bae5d8dbf3b05a135caf2fa9a564ee8c42dde0eaa298ba1678d22a53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b5a9ccc-df53-40b5-a358-b37de987f291", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6fe44df41ae6ebe6eb7f4f533f2cc032da0a9c4a795abc34ce9fb272245497bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4", "node_type": "1", "metadata": {}, "hash": "f45d94fff7700ba616df8f09c7e3035929a59a10e6982093ab01f2d8dbdb19ed", "class_name": "RelatedNodeInfo"}}, "text": "def reply(self, x: dict = None) -> dict:\n        if self.memory:\n            self.memory.add(x)\n        if x is None:\n            # get the last message from memory\n            if self.memory and self.memory.size() > 0:\n                x = self.memory.get_memory()[-1]\n            else:\n                # if no message find, just return None\n                return {}\n        image_urls = self.model(x.content).image_urls\n        # TODO: optimize the construction of content\n        msg = Msg(\n            self.name,\n            content=\"This is the generated image \",\n            role=\"assistant\",\n            url=image_urls,\n        )\n\n        self.speak(msg)\n\n        if self.memory:\n            self.memory.add(msg)\n\n        return msg", "start_char_idx": 1186, "end_char_idx": 1925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4": {"__data__": {"id_": "aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34b9be46-e563-4c2f-80f3-5a971d5b57a1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfe9fba3ca68f21249fd96612fd772bd4edafcceb46d24b2a6a9f0195d208daa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "169af950-9210-4da7-9b5d-c9968bc662e8", "node_type": "1", "metadata": {}, "hash": "1ab34c60f43bcf312a0594473045b338adaa237345d7ab49dc85c8c9ef6ca9ae", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"User Agent class\"\"\"\nimport time\nfrom typing import Union\nfrom typing import Optional\nfrom loguru import logger\n\nfrom agentscope.agents import AgentBase\nfrom agentscope.message import Msg\nfrom agentscope.web.studio.utils import user_input", "start_char_idx": 0, "end_char_idx": 264, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "169af950-9210-4da7-9b5d-c9968bc662e8": {"__data__": {"id_": "169af950-9210-4da7-9b5d-c9968bc662e8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3c1c5c228bcf57f739a7ca4688672813e5fa53842daa44d6bc123311feefbb35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7", "node_type": "1", "metadata": {}, "hash": "95086f61a7a170ec2c963d1347cc7b4e4c5efacfe3e4dc3755e6225cdf980e5c", "class_name": "RelatedNodeInfo"}}, "text": "class UserAgent(AgentBase):", "start_char_idx": 267, "end_char_idx": 294, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7": {"__data__": {"id_": "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "169af950-9210-4da7-9b5d-c9968bc662e8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "63c81d6b50cbe31eb935b0eda750a1f5c47681aca33fb81967fbb8f8e802da36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d856b8d-211e-42ee-b047-ce0322df72fc", "node_type": "1", "metadata": {}, "hash": "90765bc024341e517e3ab0a649e88404bcd0adeae9aa45b1290439aece65b233", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"User agent class\"\"\"\n\n    def __init__(self, name: str = \"User\", require_url: bool = False) -> None:\n        \"\"\"Initialize a UserAgent object.\n\n        Arguments:\n            name (`str`, defaults to `\"User\"`):\n                The name of the agent. Defaults to \"User\".\n            require_url (`bool`, defaults to `False`):\n                Whether the agent requires user to input a URL. Defaults to\n                False. The URL can lead to a website, a file,\n                or a directory. It will be added into the generated message\n                in field `url`.\n        \"\"\"\n        super().__init__(name=name)\n\n        self.name = name\n        self.require_url = require_url", "start_char_idx": 299, "end_char_idx": 984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d856b8d-211e-42ee-b047-ce0322df72fc": {"__data__": {"id_": "3d856b8d-211e-42ee-b047-ce0322df72fc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "977ad91778747f7e0f672272dd75c7255f10f8030319db9ae641aacd1155b731", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c470d38-f8c5-4604-9e15-863d84daf17c", "node_type": "1", "metadata": {}, "hash": "e2b9503c80e62186bd50636f47f5d902e25979f5de78fc08b3288179da98f3fa", "class_name": "RelatedNodeInfo"}}, "text": "def reply(\n        self,\n        x: dict = None,\n        required_keys: Optional[Union[list[str], str]] = None,\n        timeout: Optional[int] = None,\n    ) -> dict:", "start_char_idx": 990, "end_char_idx": 1155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c470d38-f8c5-4604-9e15-863d84daf17c": {"__data__": {"id_": "2c470d38-f8c5-4604-9e15-863d84daf17c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d856b8d-211e-42ee-b047-ce0322df72fc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "986251106af705271c9fd4d5f0ee20342c343029c755a838e54183b60ee9200f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "161fdc8a-da9d-439f-b4ea-68533a951268", "node_type": "1", "metadata": {}, "hash": "3540583d763d4f5ec1f5af3d2b516101ac68ad4214bbca0ed92cc3e7fb755ee0", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n        Processes the input provided by the user and stores it in memory,\n        potentially formatting it with additional provided details.\n\n        The method prompts the user for input, then optionally prompts for\n        additional specifics based on the provided format keys. All\n        information is encapsulated in a message object, which is then\n        added to the object's memory.\n\n        Arguments:\n            x (`dict`, defaults to `None`):\n                A dictionary containing initial data to be added to memory.\n                Defaults to None.\n            required_keys \\\n                (`Optional[Union[list[str], str]]`, defaults to `None`):\n                Strings that requires user to input, which will be used as\n                the key of the returned dict. Defaults to None.\n            timeout (`Optional[int]`, defaults to `None`):\n                Raise `TimeoutError` if user exceed input time, set to None\n                for no limit.\n\n        Returns:\n            `dict`: A dictionary representing the message object that contains\n            the user's input and any additional details. This is also\n            stored in the object's memory.\n        \"\"\"\n        if self.memory:\n            self.memory.add(x)\n\n        # TODO: To avoid order confusion, because `input` print much quicker\n        #  than logger.chat\n        time.sleep(0.5)\n        content = user_input(timeout=timeout)\n\n        kwargs = {}", "start_char_idx": 1164, "end_char_idx": 2615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "161fdc8a-da9d-439f-b4ea-68533a951268": {"__data__": {"id_": "161fdc8a-da9d-439f-b4ea-68533a951268", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c470d38-f8c5-4604-9e15-863d84daf17c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7ec3750e854b3ba970b614a6c86c61a8c62c1b951ec08ccba8d26e855c97df56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba5f065a-0140-4449-a54a-67d9f3a4faeb", "node_type": "1", "metadata": {}, "hash": "0aebb35b26dbf405ae11535c8630264e97f78484e4e46a655c1e020b885a24fa", "class_name": "RelatedNodeInfo"}}, "text": "if required_keys is not None:\n            if isinstance(required_keys, str):\n                required_keys = [required_keys]\n\n            for key in required_keys:\n                kwargs[key] = input(f\"{key}: \")\n\n        # Input url of file, image, video, audio or website\n        url = None\n        if self.require_url:\n            url = input(\"URL: \")\n\n        # Add additional keys\n        msg = Msg(\n            name=self.name,\n            role=\"user\",\n            content=content,\n            url=url,\n            **kwargs,  # type: ignore[arg-type]\n        )\n\n        self.speak(msg)\n\n        # Add to memory\n        if self.memory:\n            self.memory.add(msg)\n\n        return msg", "start_char_idx": 2624, "end_char_idx": 3315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba5f065a-0140-4449-a54a-67d9f3a4faeb": {"__data__": {"id_": "ba5f065a-0140-4449-a54a-67d9f3a4faeb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a74cc4d924eeabb9c191b419e1f3e8ad68ae6a775a7d1c2c3dad91316d92e653", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "161fdc8a-da9d-439f-b4ea-68533a951268", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a739a7532bae189b1aba2f0c99ba2121abe8e0fcc15c701d243640f93f0e59cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95e2a8f5-9b74-4553-8e3f-1d799f80d31a", "node_type": "1", "metadata": {}, "hash": "1c09c975b7684127707670d4827eef6fb4a3b86d7dcad1579a4b6719f96dfd6a", "class_name": "RelatedNodeInfo"}}, "text": "def speak(\n        self,\n        content: Union[str, dict],\n    ) -> None:\n        \"\"\"Speak the content to the audience.\"\"\"\n        logger.chat(content, disable_studio=True)", "start_char_idx": 3321, "end_char_idx": 3494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95e2a8f5-9b74-4553-8e3f-1d799f80d31a": {"__data__": {"id_": "95e2a8f5-9b74-4553-8e3f-1d799f80d31a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/constants.py", "file_name": "constants.py", "file_type": "text/x-python", "file_size": 1395, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45c04801-210c-40ea-9624-9fa9b296cd14", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/constants.py", "file_name": "constants.py", "file_type": "text/x-python", "file_size": 1395, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6179dfa3bf36976f30a17fc9abdabbeb866d932ce2de475efdcc427318adcdef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba5f065a-0140-4449-a54a-67d9f3a4faeb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6d20ed4d689e3e8212d9d8be23307a569e7630dc9d0952485b9623ea63bba579", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95ceec4e-67f5-482f-95f6-6ab226d72c61", "node_type": "1", "metadata": {}, "hash": "80a784bc0553eaf3a29741bcd49e4f107c6f049b3ffc365fc7b39bd5a0cf09b4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Some constants used in the project\"\"\"\nfrom numbers import Number\nfrom enum import IntEnum\n\nPACKAGE_NAME = \"agentscope\"\nMSG_TOKEN = f\"[{PACKAGE_NAME}_msg]\"\n\n\n# default values\n\n# for file manager\n_DEFAULT_DIR = \"./runs\"\n_DEFAULT_LOG_LEVEL = \"INFO\"\n_DEFAULT_SUBDIR_CODE = \"code\"\n_DEFAULT_SUBDIR_FILE = \"file\"\n_DEFAULT_SUBDIR_INVOKE = \"invoke\"\n_DEFAULT_CFG_NAME = \".config\"\n_DEFAULT_IMAGE_NAME = \"image_{}_{}.png\"\n_DEFAULT_SQLITE_DB_PATH = \"agentscope.db\"\n\n\n# for model wrapper\n_DEFAULT_MAX_RETRIES = 3\n_DEFAULT_MESSAGES_KEY = \"inputs\"\n_DEFAULT_RETRY_INTERVAL = 1\n_DEFAULT_API_BUDGET = None\n# for execute python\n_DEFAULT_PYPI_MIRROR = \"http://mirrors.aliyun.com/pypi/simple/\"\n_DEFAULT_TRUSTED_HOST = \"mirrors.aliyun.com\"\n# for monitor\n_DEFAULT_MONITOR_TABLE_NAME = \"monitor_metrics\"\n# for summarization\n_DEFAULT_SUMMARIZATION_PROMPT = \"\"\"\nTEXT: {}\n\"\"\"\n_DEFAULT_SYSTEM_PROMPT = \"\"\"\nYou are a helpful agent to summarize the text.\nYou need to keep all the key information of the text in the summary.\n\"\"\"\n_DEFAULT_TOKEN_LIMIT_PROMPT = \"\"\"\nSummarize the text after TEXT in less than {} tokens:\n\"\"\"\n\n# typing\nEmbedding = list[Number]\n\n\n# enums\nclass ResponseFormat(IntEnum):\n    \"\"\"Enum for model response format.\"\"\"\n\n    NONE = 0\n    JSON = 1\n\n\nclass ShrinkPolicy(IntEnum):\n    \"\"\"Enum for shrink strategies when the prompt is too long.\"\"\"\n\n    TRUNCATE = 0\n    SUMMARIZE = 1", "start_char_idx": 0, "end_char_idx": 1394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95ceec4e-67f5-482f-95f6-6ab226d72c61": {"__data__": {"id_": "95ceec4e-67f5-482f-95f6-6ab226d72c61", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95e2a8f5-9b74-4553-8e3f-1d799f80d31a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/constants.py", "file_name": "constants.py", "file_type": "text/x-python", "file_size": 1395, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "38eb91ecd8c12a67e81d609f506f8f737cb7f3ccc715c74ce80f6cbecdd074b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed98c22a-fcc0-4a27-a0c9-454573b9df28", "node_type": "1", "metadata": {}, "hash": "9491a8b2a7a4d03650fae9db8abb6b0afa9174e7000d29ff47758f4e7e57ef17", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Manage the file system for saving files, code and logs.\"\"\"\nimport json\nimport os\nfrom typing import Any, Union, Optional\n\nimport numpy as np\n\nfrom agentscope._runtime import _runtime\nfrom agentscope.utils.tools import _download_file, _get_timestamp\nfrom agentscope.utils.tools import _generate_random_code\nfrom agentscope.constants import (\n    _DEFAULT_DIR,\n    _DEFAULT_SUBDIR_CODE,\n    _DEFAULT_SUBDIR_FILE,\n    _DEFAULT_SUBDIR_INVOKE,\n    _DEFAULT_SQLITE_DB_PATH,\n    _DEFAULT_IMAGE_NAME,\n    _DEFAULT_CFG_NAME,\n)", "start_char_idx": 0, "end_char_idx": 544, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed98c22a-fcc0-4a27-a0c9-454573b9df28": {"__data__": {"id_": "ed98c22a-fcc0-4a27-a0c9-454573b9df28", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95ceec4e-67f5-482f-95f6-6ab226d72c61", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "880b4803e9b3b8613c38ace3dc25a7675a773c28b82a9bf2def294f605222416", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1", "node_type": "1", "metadata": {}, "hash": "00a82844737a0e4d48d4297be28cc9987d332d68d5bb5eaeb44b8c8a7b7288a6", "class_name": "RelatedNodeInfo"}}, "text": "class _FileManager:", "start_char_idx": 547, "end_char_idx": 566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1": {"__data__": {"id_": "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed98c22a-fcc0-4a27-a0c9-454573b9df28", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "108d4b221a3d2cad9f8ce417e30f1d44bd9f0008c8e2ca60e6821d131ee567d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d", "node_type": "1", "metadata": {}, "hash": "674a497b690c9f277cc6bcaa3d36dd7927b8ab9da27fc8c2aed38a8fdfea9552", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A singleton class for managing the file system for saving files,\n    code and logs.\"\"\"\n\n    _instance = None\n\n    dir: str = _DEFAULT_DIR\n    \"\"\"The directory for saving files, code and logs.\"\"\"\n\n    save_api_invoke: bool = False\n    \"\"\"Whether to save api invocation locally.\"\"\"\n\n    def __new__(cls, *args: Any, **kwargs: Any) -> Any:\n        \"\"\"Create a singleton instance.\"\"\"\n        if not cls._instance:\n            cls._instance = super(_FileManager, cls).__new__(\n                cls,\n                *args,\n                **kwargs,\n            )\n        return cls._instance\n\n    def _get_and_create_subdir(self, subdir: str) -> str:\n        \"\"\"Get the path of the subdir and create the subdir if it does not\n        exist.\"\"\"\n        path = os.path.join(self.dir, _runtime.runtime_id, subdir)\n        os.makedirs(path, exist_ok=True)\n        return path\n\n    def _get_file_path(self, file_name: str) -> str:\n        \"\"\"Get the path of the file.\"\"\"\n        return os.path.join(self.dir, _runtime.runtime_id, file_name)\n\n    @property\n    def dir_root(self) -> str:\n        \"\"\"The root directory to save code, information and logs.\"\"\"\n        return os.path.join(self.dir, _runtime.runtime_id)\n\n    @property\n    def dir_log(self) -> str:\n        \"\"\"The directory for saving logs.\"\"\"\n        return os.path.join(self.dir, _runtime.runtime_id)", "start_char_idx": 571, "end_char_idx": 1925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d": {"__data__": {"id_": "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e005d238cc622368034ff2fe1a3149baea51f0e60e87d608d501f3d40c503a13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fbd4497-29ec-4579-9a97-f7fc84a09cc9", "node_type": "1", "metadata": {}, "hash": "e4bb76701896bc2c7cb2c0f301932a08d91ed355fed3c89faf25a9bf3c2b1f45", "class_name": "RelatedNodeInfo"}}, "text": "@property\n    def dir_file(self) -> str:\n        \"\"\"The directory for saving files, including images, audios and\n        videos.\"\"\"\n        return self._get_and_create_subdir(_DEFAULT_SUBDIR_FILE)\n\n    @property\n    def dir_code(self) -> str:\n        \"\"\"The directory for saving codes.\"\"\"\n        return self._get_and_create_subdir(_DEFAULT_SUBDIR_CODE)\n\n    @property\n    def dir_invoke(self) -> str:\n        \"\"\"The directory for saving api invocations.\"\"\"\n        return self._get_and_create_subdir(_DEFAULT_SUBDIR_INVOKE)\n\n    @property\n    def path_db(self) -> str:\n        \"\"\"The path to the sqlite db file.\"\"\"\n        return self._get_file_path(_DEFAULT_SQLITE_DB_PATH)\n\n    def init(self, save_dir: str, save_api_invoke: bool = False) -> None:\n        \"\"\"Set the directory for saving files.\"\"\"\n        self.dir = save_dir\n        runtime_dir = os.path.join(save_dir, _runtime.runtime_id)\n        os.makedirs(runtime_dir, exist_ok=True)\n\n        self.save_api_invoke = save_api_invoke\n\n        # Save the project and name to the runtime directory\n        self._save_config()", "start_char_idx": 1931, "end_char_idx": 3011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fbd4497-29ec-4579-9a97-f7fc84a09cc9": {"__data__": {"id_": "0fbd4497-29ec-4579-9a97-f7fc84a09cc9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a30c80e904daae1f87b333d1fa3aac72fbb460d67a75b89d7a18c49d04a7049c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67c4a408-bf45-438b-a93d-75b09fb8e1b7", "node_type": "1", "metadata": {}, "hash": "37af7d9d381ee5a369faa5402650c7f8dd3ad073f0e1c67e883433f270bdeb7f", "class_name": "RelatedNodeInfo"}}, "text": "def _save_config(self) -> None:\n        \"\"\"Save the configuration of the runtime in its root directory.\"\"\"\n        cfg = {\n            \"project\": _runtime.project,\n            \"name\": _runtime.name,\n            \"id\": _runtime.runtime_id,\n            \"timestamp\": _runtime.timestamp,\n        }\n        with open(\n            os.path.join(self.dir_root, _DEFAULT_CFG_NAME),\n            \"w\",\n            encoding=\"utf-8\",\n        ) as file:\n            json.dump(cfg, file, indent=4)\n\n    def save_api_invocation(\n        self,\n        prefix: str,\n        record: dict,\n    ) -> Union[None, str]:\n        \"\"\"Save api invocation locally.\"\"\"\n        if self.save_api_invoke:\n            filename = f\"{prefix}_{_generate_random_code()}.json\"\n            path_save = os.path.join(str(self.dir_invoke), filename)\n            with open(path_save, \"w\", encoding=\"utf-8\") as file:\n                json.dump(record, file, indent=4)\n\n            return filename\n        else:\n            return None", "start_char_idx": 3017, "end_char_idx": 4004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67c4a408-bf45-438b-a93d-75b09fb8e1b7": {"__data__": {"id_": "67c4a408-bf45-438b-a93d-75b09fb8e1b7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fbd4497-29ec-4579-9a97-f7fc84a09cc9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5b4136f10a6f8771d741179554c2a5d4b455f562e57195fd094038d570adc6a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40fa8227-95a0-4ce8-a888-9828db45360e", "node_type": "1", "metadata": {}, "hash": "3c122040d818bada350e864adc035ce4cdbc46741a826e2c92fa156141379623", "class_name": "RelatedNodeInfo"}}, "text": "def save_image(\n        self,\n        image: Union[str, np.ndarray],\n        filename: Optional[str] = None,\n    ) -> str:\n        \"\"\"Save image file locally, and return the local image path.\n\n        Args:\n            image (`Union[str, np.ndarray]`):\n                The image url, or the image array.\n            filename (`Optional[str]`):\n                The filename of the image. If not specified, a random filename\n                will be used.\n        \"\"\"\n\n        if filename is None:\n            filename = _DEFAULT_IMAGE_NAME.format(\n                _get_timestamp(\n                    \"%Y%m%d-%H%M%S\",\n                ),\n                _generate_random_code(),\n            )\n\n        path_file = os.path.join(self.dir_file, filename)\n\n        if isinstance(image, str):\n            # download the image from url\n            _download_file(image, path_file)\n        else:\n            from PIL import Image\n\n            # save image via PIL\n            Image.fromarray(image).save(path_file)\n\n        return path_file\n\n    @staticmethod\n    def _flush() -> None:\n        \"\"\"\n        Only for unittest usage. Don't use this function in your code.\n        Flush the file_manager singleton.\n        \"\"\"\n        global file_manager\n        file_manager = _FileManager()", "start_char_idx": 4010, "end_char_idx": 5287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40fa8227-95a0-4ce8-a888-9828db45360e": {"__data__": {"id_": "40fa8227-95a0-4ce8-a888-9828db45360e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f409e82d71ee747dafec33127e57f0a776119a9363143522c538508bc977c7b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67c4a408-bf45-438b-a93d-75b09fb8e1b7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2b87dc98816a0ddcec25fc073e9c591f0ed51933fb1e447c67629121c38757a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "882b3318-e945-4112-8feb-469285e1ee34", "node_type": "1", "metadata": {}, "hash": "e96de31e1f33b314dad2a3892cb22f2dc8af4840bb330aa1f499372bfd9c3fa9", "class_name": "RelatedNodeInfo"}}, "text": "file_manager = _FileManager()", "start_char_idx": 5258, "end_char_idx": 5287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "882b3318-e945-4112-8feb-469285e1ee34": {"__data__": {"id_": "882b3318-e945-4112-8feb-469285e1ee34", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 200, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a766b2c3-e1ba-4bc1-9289-68448259e06d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 200, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "04d51d1c7b90acda982cfa9b549fc48336bd20dc59486747946220f2d123ec67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40fa8227-95a0-4ce8-a888-9828db45360e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0a9278a1716317f8acb6d51fb72a843be8f0a74be0c96807796d7315c38145a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38a4f3e5-fdb1-4620-9bf8-1b40768dd898", "node_type": "1", "metadata": {}, "hash": "f26dbd5028d50e45cf781fec89bc635ad424d7b5cef3d78be2392a5ab1296907", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\n\"\"\"\nimport al memory related modules\n\"\"\"\n\nfrom .memory import MemoryBase\nfrom .temporary_memory import TemporaryMemory\n\n__all__ = [\n    \"MemoryBase\",\n    \"TemporaryMemory\",\n]", "start_char_idx": 0, "end_char_idx": 199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38a4f3e5-fdb1-4620-9bf8-1b40768dd898": {"__data__": {"id_": "38a4f3e5-fdb1-4620-9bf8-1b40768dd898", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7839c67-5582-4f88-afbe-d81a51f0171c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1a18371aa74962680ec72f8fe2ac39397eb9c75c44b7deb3163c5a644d934572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "882b3318-e945-4112-8feb-469285e1ee34", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 200, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "90cdd53963b98555d6d4c3ed70aec5850e220460f7c20388871422487ae31496", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91780960-267d-4acd-87bb-30609b98f56d", "node_type": "1", "metadata": {}, "hash": "4146314c8175d4456fdf53331e2d8587c30ab2546dc702ed01cc6b521d02923d", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"\nBase class for memory\n\nTODO: a abstract class for a piece of memory\nTODO: data structure to organize multiple memory pieces in memory class\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Union\nfrom typing import Callable", "start_char_idx": 0, "end_char_idx": 317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91780960-267d-4acd-87bb-30609b98f56d": {"__data__": {"id_": "91780960-267d-4acd-87bb-30609b98f56d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7839c67-5582-4f88-afbe-d81a51f0171c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1a18371aa74962680ec72f8fe2ac39397eb9c75c44b7deb3163c5a644d934572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38a4f3e5-fdb1-4620-9bf8-1b40768dd898", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4cb024cb1e40d816b598351463c17c7377bb4e79c5cbb2b17bdc6d5f422f91f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa3a2110-c458-4ca6-bdb4-c3aa54b750af", "node_type": "1", "metadata": {}, "hash": "39d878d1dc50def729e9fb5a5d57df50e2749b6996d3c2ec80cf7001367e7daf", "class_name": "RelatedNodeInfo"}}, "text": "class MemoryBase(ABC):", "start_char_idx": 320, "end_char_idx": 342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa3a2110-c458-4ca6-bdb4-c3aa54b750af": {"__data__": {"id_": "aa3a2110-c458-4ca6-bdb4-c3aa54b750af", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7839c67-5582-4f88-afbe-d81a51f0171c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1a18371aa74962680ec72f8fe2ac39397eb9c75c44b7deb3163c5a644d934572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91780960-267d-4acd-87bb-30609b98f56d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c8d27a12faee874e8883716b9fddc356274035ff2192fd558e2aeb93bf9b949e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "245137c8-a387-45b9-b2f0-510fb273815d", "node_type": "1", "metadata": {}, "hash": "75e414b08b14c119075cafd38111cfe42a8412b3c6fe46cc2b10b483dd311e73", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Base class for memory.\"\"\"\n\n    _version: int = 1\n\n    def __init__(\n        self,\n        config: Optional[dict] = None,\n    ) -> None:\n        \"\"\"MemoryBase is a base class for memory of agents.\n\n        Args:\n            config (`Optional[dict]`, defaults to `None`):\n                Configuration of this memory.\n        \"\"\"\n        self.config = {} if config is None else config\n\n    def update_config(self, config: dict) -> None:\n        \"\"\"\n        Configure memory as specified in config\n        \"\"\"\n        self.config = config\n\n    @abstractmethod\n    def get_memory(\n        self,\n        recent_n: Optional[int] = None,\n        filter_func: Optional[Callable[[int, dict], bool]] = None,\n    ) -> list:\n        \"\"\"\n        Return a certain range (`recent_n` or all) of memory, filtered by\n        `filter_func`\n        \"\"\"\n\n    @abstractmethod\n    def add(self, memories: Union[list[dict], dict, None]) -> None:\n        \"\"\"\n        Adding new memory fragment, depending on how the memory are stored\n        \"\"\"\n\n    @abstractmethod\n    def delete(self, index: Union[Iterable, int]) -> None:\n        \"\"\"\n        Delete memory fragment, depending on how the memory are stored\n        and matched\n        \"\"\"\n\n    @abstractmethod\n    def load(\n        self,\n        memories: Union[str, dict, list],\n        overwrite: bool = False,\n    ) -> None:\n        \"\"\"\n        Load memory, depending on how the memory are passed, design to load\n        from both file or dict\n        \"\"\"", "start_char_idx": 347, "end_char_idx": 1835, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "245137c8-a387-45b9-b2f0-510fb273815d": {"__data__": {"id_": "245137c8-a387-45b9-b2f0-510fb273815d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7839c67-5582-4f88-afbe-d81a51f0171c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1a18371aa74962680ec72f8fe2ac39397eb9c75c44b7deb3163c5a644d934572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa3a2110-c458-4ca6-bdb4-c3aa54b750af", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "337d9b48364fc788996a8b7ee07c53a0b959d3e06e9a4a60c9fba99fcf158a6d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d327349-d31c-4fd2-a763-ceeccbc70b11", "node_type": "1", "metadata": {}, "hash": "29df72def72bd0393ed1373b4daf0dcfa53eabe91f11ae35534153283a430a01", "class_name": "RelatedNodeInfo"}}, "text": "@abstractmethod\n    def export(\n        self,\n        to_mem: bool = False,\n        file_path: Optional[str] = None,\n    ) -> Optional[list]:\n        \"\"\"Export memory, depending on how the memory are stored\"\"\"\n\n    @abstractmethod\n    def clear(self) -> None:\n        \"\"\"Clean memory, depending on how the memory are stored\"\"\"\n\n    @abstractmethod\n    def size(self) -> int:\n        \"\"\"Returns the number of memory segments in memory.\"\"\"\n        raise NotImplementedError", "start_char_idx": 1841, "end_char_idx": 2312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d327349-d31c-4fd2-a763-ceeccbc70b11": {"__data__": {"id_": "9d327349-d31c-4fd2-a763-ceeccbc70b11", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "245137c8-a387-45b9-b2f0-510fb273815d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "40f7fd6cb88ffe0fb2acafc88b40b53a8b069f04a8fbecad166e3a64670e5b09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff157f11-3b85-4bd4-8505-27e6b960d8ad", "node_type": "1", "metadata": {}, "hash": "b63ba34fea8388a48b3b1f3cda3990dab6bd3ce545d8ee47aa16f6cacd7748ba", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"\nMemory module for conversation\n\"\"\"\n\nimport json\nimport os\nfrom typing import Iterable, Sequence\nfrom typing import Optional\nfrom typing import Union\nfrom typing import Callable\n\nfrom loguru import logger\n\nfrom .memory import MemoryBase\nfrom ..models import load_model_by_config_name\nfrom ..service.retrieval.retrieval_from_list import retrieve_from_list\nfrom ..service.retrieval.similarity import Embedding", "start_char_idx": 0, "end_char_idx": 434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff157f11-3b85-4bd4-8505-27e6b960d8ad": {"__data__": {"id_": "ff157f11-3b85-4bd4-8505-27e6b960d8ad", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d327349-d31c-4fd2-a763-ceeccbc70b11", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "99014d4892d12cc3bdc0c8bad4184782938cf5f4b764fa159c7d7943a25fec89", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa16ac99-534e-45c3-a614-5c21d6f62cd1", "node_type": "1", "metadata": {}, "hash": "8e54a542ff9fad3a2db87741201de33ad0b0daa3f0865aef42c8cfca37c5cbb3", "class_name": "RelatedNodeInfo"}}, "text": "class TemporaryMemory(MemoryBase):", "start_char_idx": 437, "end_char_idx": 471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa16ac99-534e-45c3-a614-5c21d6f62cd1": {"__data__": {"id_": "fa16ac99-534e-45c3-a614-5c21d6f62cd1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff157f11-3b85-4bd4-8505-27e6b960d8ad", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d5f8baef458518bae9c6b22729cc28cc13b07906f05665ea0ca5f4de1584e2db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1", "node_type": "1", "metadata": {}, "hash": "643df16e591a82dd86eca8da8712460ba5e25b6254291c5d8c2a2157f2e2be1f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    In-memory memory module, not writing to hard disk\n    \"\"\"\n\n    def __init__(\n        self,\n        config: Optional[dict] = None,\n        embedding_model: Union[str, Callable] = None,\n    ) -> None:\n        super().__init__(config)\n\n        self._content = []\n\n        # prepare embedding model if needed\n        if isinstance(embedding_model, str):\n            self.embedding_model = load_model_by_config_name(embedding_model)\n        else:\n            self.embedding_model = embedding_model", "start_char_idx": 476, "end_char_idx": 976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1": {"__data__": {"id_": "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa16ac99-534e-45c3-a614-5c21d6f62cd1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d836970b978d861a533ac676000b0a07db601cba4c42b6a8a618941205f208af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb1f7104-21f5-4153-9b05-f797b1000df4", "node_type": "1", "metadata": {}, "hash": "a50f40713c66dd3d738f1b62c518170a63501514d3902fe93c5477b3054b7756", "class_name": "RelatedNodeInfo"}}, "text": "def add(\n        self,\n        memories: Union[Sequence[dict], dict, None],\n        embed: bool = False,\n    ) -> None:\n        if memories is None:\n            return\n\n        if not isinstance(memories, list):\n            record_memories = [memories]\n        else:\n            record_memories = memories\n\n        # if memory doesn't have id attribute, we skip the checking\n        memories_idx = set(_.id for _ in self._content if hasattr(_, \"id\"))\n        for memory_unit in record_memories:\n            # add to memory if it's new\n            if (\n                not hasattr(memory_unit, \"id\")\n                or memory_unit.id not in memories_idx\n            ):\n                if embed:\n                    if self.embedding_model:\n                        # TODO: embed only content or its string representation\n                        memory_unit.embedding = self.embedding_model(\n                            [memory_unit],\n                            return_embedding_only=True,\n                        )\n                    else:\n                        raise RuntimeError(\"Embedding model is not provided.\")\n                self._content.append(memory_unit)", "start_char_idx": 982, "end_char_idx": 2150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb1f7104-21f5-4153-9b05-f797b1000df4": {"__data__": {"id_": "bb1f7104-21f5-4153-9b05-f797b1000df4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c7bb616acff3c68120568fb403ad75320a3455af493bd090180c611f7e5e1df3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29f282be-aba6-4aea-b88d-de131065b3fe", "node_type": "1", "metadata": {}, "hash": "ddb1ae83764c6d8624dcf0c1a3f24e8bf364ed3b5cacb1cb47bf09eae97daa7d", "class_name": "RelatedNodeInfo"}}, "text": "def delete(self, index: Union[Iterable, int]) -> None:\n        if self.size() == 0:\n            logger.warning(\n                \"The memory is empty, and the delete operation is \"\n                \"skipping.\",\n            )\n            return\n\n        if isinstance(index, int):\n            index = [index]\n\n        if isinstance(index, list):\n            index = set(index)\n\n            invalid_index = [_ for _ in index if _ >= self.size() or _ < 0]\n            if len(invalid_index) > 0:\n                logger.warning(\n                    f\"Skip delete operation for the invalid \"\n                    f\"index {invalid_index}\",\n                )\n\n            self._content = [\n                _ for i, _ in enumerate(self._content) if i not in index\n            ]\n        else:\n            raise NotImplementedError(\n                \"index type only supports {None, int, list}\",\n            )\n\n    def export(\n        self,\n        to_mem: bool = False,\n        file_path: Optional[str] = None,\n    ) -> Optional[list]:\n        \"\"\"Export memory to json file\"\"\"\n        if to_mem:\n            return self._content\n\n        if to_mem is False and file_path is not None:\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                json.dump(self._content, f, indent=4)\n        else:\n            raise NotImplementedError(\n                \"file type only supports \"\n                \"{json, yaml, pkl}, default is json\",\n            )\n        return None", "start_char_idx": 2156, "end_char_idx": 3625, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29f282be-aba6-4aea-b88d-de131065b3fe": {"__data__": {"id_": "29f282be-aba6-4aea-b88d-de131065b3fe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb1f7104-21f5-4153-9b05-f797b1000df4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3ce2b0871894c0ff9a33bd26f489074c1be9f48cea9b76b188d60bb68cdc18c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5ae2a27-a317-44ce-9892-cd04634849eb", "node_type": "1", "metadata": {}, "hash": "b569a025981620dd214d1659acf88c49506ec77371a794fae506465b577a3f60", "class_name": "RelatedNodeInfo"}}, "text": "def load(\n        self,\n        memories: Union[str, dict, list],\n        overwrite: bool = False,\n    ) -> None:\n        if isinstance(memories, str):\n            if os.path.isfile(memories):\n                with open(memories, \"r\", encoding=\"utf-8\") as f:\n                    self.add(json.load(f))\n            else:\n                try:\n                    load_memories = json.loads(memories)\n                    if not isinstance(load_memories, dict) and not isinstance(\n                        load_memories,\n                        list,\n                    ):\n                        logger.warning(\n                            \"The memory loaded by json.loads is \"\n                            \"neither a dict nor a list, which may \"\n                            \"cause unpredictable errors.\",\n                        )\n                except json.JSONDecodeError as e:\n                    raise json.JSONDecodeError(\n                        f\"Cannot load [{memories}] via \" f\"json.loads.\",\n                        e.doc,\n                        e.pos,\n                    )\n        else:\n            load_memories = memories\n\n        # overwrite the original memories after loading the new ones\n        if overwrite:\n            self.clear()\n\n        self.add(load_memories)\n\n    def clear(self) -> None:\n        \"\"\"Clean memory, depending on how the memory are stored\"\"\"\n        self._content = []", "start_char_idx": 3631, "end_char_idx": 5037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5ae2a27-a317-44ce-9892-cd04634849eb": {"__data__": {"id_": "c5ae2a27-a317-44ce-9892-cd04634849eb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29f282be-aba6-4aea-b88d-de131065b3fe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b51f8b0f5ede4482e3dc892f92070eac94132d60ea29f1050b545ebf86feb765", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c321a865-c95f-4836-a3a5-1336e0f1a9a1", "node_type": "1", "metadata": {}, "hash": "baae4f3e18677a8893907ed5c7151e6d065175ae853a604d801bbb117efa0937", "class_name": "RelatedNodeInfo"}}, "text": "def size(self) -> int:\n        \"\"\"Returns the number of memory segments in memory.\"\"\"\n        return len(self._content)", "start_char_idx": 5043, "end_char_idx": 5162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c321a865-c95f-4836-a3a5-1336e0f1a9a1": {"__data__": {"id_": "c321a865-c95f-4836-a3a5-1336e0f1a9a1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5ae2a27-a317-44ce-9892-cd04634849eb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a2c88f12600dd94b105c56feffb5e6bf423fdcb17fb5008c96e0473ae8430642", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234", "node_type": "1", "metadata": {}, "hash": "744be546d79e11754120a0e1c2ad8d8aa12a9cbc30d98ee4aa2570db115f9e45", "class_name": "RelatedNodeInfo"}}, "text": "def retrieve_by_embedding(\n        self,\n        query: Union[str, Embedding],\n        metric: Callable[[Embedding, Embedding], float],\n        top_k: int = 1,\n        preserve_order: bool = True,\n        embedding_model: Callable[[Union[str, dict]], Embedding] = None,\n    ) -> list[dict]:", "start_char_idx": 5168, "end_char_idx": 5458, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234": {"__data__": {"id_": "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c321a865-c95f-4836-a3a5-1336e0f1a9a1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0553155916369974e5081d8b8507caca72f379f2edcbecbcf2e1460e6773ae7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bd02d82-7567-4d00-ab80-d5bc58001917", "node_type": "1", "metadata": {}, "hash": "8c63780b270c58f71ac99d95a7643049e8d5399ad0757f4ae15f4ae148904b9a", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Retrieve memory by their embeddings.\n\n        Args:\n            query (`Union[str, Embedding]`):\n                Query string or embedding.\n            metric (`Callable[[Embedding, Embedding], float]`):\n                A metric to compute the relevance between embeddings of query\n                and memory. In default, higher relevance means better match,\n                and you can set `reverse` to `True` to reverse the order.\n            top_k (`int`, defaults to `1`):\n                The number of memory units to retrieve.\n            preserve_order (`bool`, defaults to `True`):\n                Whether to preserve the original order of the retrieved memory\n                units.\n            embedding_model (`Callable[[Union[str, dict]], Embedding]`, \\\n                defaults to `None`):\n                A callable object to embed the memory unit. If not provided, it\n                will use the default embedding model.\n\n        Returns:\n            `list[dict]`: a list of retrieved memory units in\n            specific order.\n        \"\"\"\n\n        retrieved_items = retrieve_from_list(\n            query,\n            self.get_embeddings(embedding_model or self.embedding_model),\n            metric,\n            top_k,\n            self.embedding_model,\n            preserve_order,\n        ).content\n\n        # obtain the corresponding memory item\n        response = []", "start_char_idx": 5467, "end_char_idx": 6855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bd02d82-7567-4d00-ab80-d5bc58001917": {"__data__": {"id_": "9bd02d82-7567-4d00-ab80-d5bc58001917", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ef3793cc285acdfdbf023827c2ce39f84ac00b0cc0996add45fcb4f84d75b4a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9eae1e0c-9a44-49d1-9da9-8f516a6689bf", "node_type": "1", "metadata": {}, "hash": "07edc5ed55443e7a48bb68a5ede9d8c448686725108dc1d85c6fdf8cd206c0af", "class_name": "RelatedNodeInfo"}}, "text": "for score, index, _ in retrieved_items:\n            response.append(\n                {\n                    \"score\": score,\n                    \"index\": index,\n                    \"memory\": self._content[index],\n                },\n            )\n\n        return response", "start_char_idx": 6864, "end_char_idx": 7132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eae1e0c-9a44-49d1-9da9-8f516a6689bf": {"__data__": {"id_": "9eae1e0c-9a44-49d1-9da9-8f516a6689bf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9bd02d82-7567-4d00-ab80-d5bc58001917", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5b08641b781370861bd8edf344338b054dcdec489744fca2fc77cb80e5e4981c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "85fbcd43-e2d5-4dd3-8e16-430d1132f11f", "node_type": "1", "metadata": {}, "hash": "b9cc3711fe4ee52c698b71af066ea624a7303fb5b02976c77276d2ad24771b91", "class_name": "RelatedNodeInfo"}}, "text": "def get_embeddings(\n        self,\n        embedding_model: Callable[[Union[str, dict]], Embedding] = None,\n    ) -> list:\n        \"\"\"Get embeddings of all memory units. If `embedding_model` is\n        provided, the memory units that doesn't have `embedding` attribute\n        will be embedded. Otherwise, its embedding will be `None`.\n\n        Args:\n            embedding_model\n                (`Callable[[Union[str, dict]], Embedding]`, defaults to\n                `None`):\n                Embedding model or embedding vector.\n\n        Returns:\n            `list[Union[Embedding, None]]`: List of embeddings or None.\n        \"\"\"\n        embeddings = []\n        for memory_unit in self._content:\n            if memory_unit.embedding is None and embedding_model is not None:\n                # embedding\n                # TODO: embed only content or its string representation\n                memory_unit.embedding = embedding_model(memory_unit)\n            embeddings.append(memory_unit.embedding)\n        return embeddings", "start_char_idx": 7138, "end_char_idx": 8159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85fbcd43-e2d5-4dd3-8e16-430d1132f11f": {"__data__": {"id_": "85fbcd43-e2d5-4dd3-8e16-430d1132f11f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6ad258e-a29d-4317-a848-283df0b98d49", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4233e8e14c0c2524edd0df14dd425faaad7ffae8122f85988fbbaa1260019b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9eae1e0c-9a44-49d1-9da9-8f516a6689bf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "371aae2898770ee21355b1f540c90720ce8f19977b51898596f534ef0c31e3ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64078886-cae2-48c8-8226-0559eae7271f", "node_type": "1", "metadata": {}, "hash": "be7ae80b7c042acfdf6e46fbf1238c1a837c026e03eb346ee3c5061a6e77171f", "class_name": "RelatedNodeInfo"}}, "text": "def get_memory(\n        self,\n        recent_n: Optional[int] = None,\n        filter_func: Optional[Callable[[int, dict], bool]] = None,\n    ) -> list:\n        \"\"\"Retrieve memory.\n\n        Args:\n            recent_n (`Optional[int]`, default `None`):\n                The last number of memories to return.\n            filter_func\n                (`Callable[[int, dict], bool]`, default to `None`):\n                The function to filter memories, which take the index and\n                memory unit as input, and return a boolean value.\n        \"\"\"\n        # extract the recent `recent_n` entries in memories\n        if recent_n is None:\n            memories = self._content\n        else:\n            if recent_n > self.size():\n                logger.warning(\n                    \"The retrieved number of memories {} is \"\n                    \"greater than the total number of memories {\"\n                    \"}\",\n                    recent_n,\n                    self.size(),\n                )\n            memories = self._content[-recent_n:]\n\n        # filter the memories\n        if filter_func is not None:\n            memories = [_ for i, _ in enumerate(memories) if filter_func(i, _)]\n\n        return memories", "start_char_idx": 8165, "end_char_idx": 9380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64078886-cae2-48c8-8226-0559eae7271f": {"__data__": {"id_": "64078886-cae2-48c8-8226-0559eae7271f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "85fbcd43-e2d5-4dd3-8e16-430d1132f11f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "eee98ad99f85d0d4b141874f568f8694936ce65749db286512f924fbf03ad88c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e44b5d8f-fac9-49c1-b825-cedb539aae07", "node_type": "1", "metadata": {}, "hash": "7b0f88f45cd2470554e454d47ce16dd9c32c62a44f9f4c2a3f4274c14028c0e5", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"The base class for message unit\"\"\"\n\nfrom typing import Any, Optional, Union, Sequence, Literal\nfrom uuid import uuid4\nimport json\n\nfrom loguru import logger\n\nfrom .rpc import RpcAgentClient, ResponseStub, call_in_thread\nfrom .utils.tools import _get_timestamp", "start_char_idx": 0, "end_char_idx": 286, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e44b5d8f-fac9-49c1-b825-cedb539aae07": {"__data__": {"id_": "e44b5d8f-fac9-49c1-b825-cedb539aae07", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64078886-cae2-48c8-8226-0559eae7271f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5c6b5a3d260672ec69f25b0e733c59fc124dce4444e5226cdc50a1cb3f516e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "10f92351-a74a-4d22-8fda-c1a29a27aca9", "node_type": "1", "metadata": {}, "hash": "7810684deabe2461b40795bf2caf1a330d607bf2538e7c5b41cea9d46e8ffeac", "class_name": "RelatedNodeInfo"}}, "text": "class MessageBase(dict):", "start_char_idx": 289, "end_char_idx": 313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10f92351-a74a-4d22-8fda-c1a29a27aca9": {"__data__": {"id_": "10f92351-a74a-4d22-8fda-c1a29a27aca9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e44b5d8f-fac9-49c1-b825-cedb539aae07", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6a366013185780a0274e1590aa99e571145f1190abff2e3b2011df9a9024a923", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81c917a0-e0fd-402d-ad50-83c968959ad2", "node_type": "1", "metadata": {}, "hash": "6722673baffc920c36a2b16b89fa4b0ae9e29a0203662c93de7f2b5510001b97", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Base Message class, which is used to maintain information for dialog,\n    memory and used to construct prompt.\n    \"\"\"", "start_char_idx": 318, "end_char_idx": 439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81c917a0-e0fd-402d-ad50-83c968959ad2": {"__data__": {"id_": "81c917a0-e0fd-402d-ad50-83c968959ad2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10f92351-a74a-4d22-8fda-c1a29a27aca9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "66dd216b872c16e60ef45be083f2ddeceb7865dc17bf0eb0888672588813862b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4af09518-3a46-4610-bcc9-2d4f24ce0884", "node_type": "1", "metadata": {}, "hash": "ce650dda7bbd6e2c552cfa81af86c3ca567492a8bba990c39a19d0bd58157fe5", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        content: Any,\n        role: Literal[\"user\", \"system\", \"assistant\"] = \"assistant\",\n        url: Optional[Union[Sequence[str], str]] = None,\n        timestamp: Optional[str] = None,\n        **kwargs: Any,\n    ) -> None:", "start_char_idx": 445, "end_char_idx": 717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4af09518-3a46-4610-bcc9-2d4f24ce0884": {"__data__": {"id_": "4af09518-3a46-4610-bcc9-2d4f24ce0884", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81c917a0-e0fd-402d-ad50-83c968959ad2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ea47b3eea4af6182cc1bacc96308e1503defa27f27cbd1cb0b52af72a804a856", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f853927-f7f9-4f37-97ef-d1e707ffce7f", "node_type": "1", "metadata": {}, "hash": "926dab112bb05d4740317502eca3401e94e9478f8fcfc35b49b38da3e222e406", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Initialize the message object\n\n        Args:\n            name (`str`):\n                The name of who send the message. It's often used in\n                role-playing scenario to tell the name of the sender.\n            content (`Any`):\n                The content of the message.\n            role (`Literal[\"system\", \"user\", \"assistant\"]`,\n            defaults to \"assistant\"):\n                The role of who send the message. It can be one of the\n                `\"system\"`, `\"user\"`, or `\"assistant\"`. Default to\n                `\"assistant\"`.\n            url (`Optional[Union[list[str], str]]`, defaults to None):\n                A url to file, image, video, audio or website.\n            timestamp (`Optional[str]`, defaults to None):\n                The timestamp of the message, if None, it will be set to\n                current time.\n            **kwargs (`Any`):\n                Other attributes of the message.\n\n        \"\"\"\n        # id and timestamp will be added to the object as its attributes\n        # rather than items in dict\n        self.id = uuid4().hex\n        if timestamp is None:\n            self.timestamp = _get_timestamp()\n        else:\n            self.timestamp = timestamp\n\n        self.name = name\n        self.content = content\n        self.role = role\n\n        if url:\n            self.url = url\n        else:\n            self.url = None\n\n        self.update(kwargs)", "start_char_idx": 726, "end_char_idx": 2131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f853927-f7f9-4f37-97ef-d1e707ffce7f": {"__data__": {"id_": "8f853927-f7f9-4f37-97ef-d1e707ffce7f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4af09518-3a46-4610-bcc9-2d4f24ce0884", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "dbfbaedfa2376c06a90aaf1f070959622448e93ab4753f3c9a1ad96f4c09042d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a856d40f-4dff-406f-932b-b877b6e10767", "node_type": "1", "metadata": {}, "hash": "e33662be13a460407fd3b18db0cb2fdcc91afa59a6b894a63af3512a29c07616", "class_name": "RelatedNodeInfo"}}, "text": "def __getattr__(self, key: Any) -> Any:\n        try:\n            return self[key]\n        except KeyError as e:\n            raise AttributeError(f\"no attribute '{key}'\") from e\n\n    def __setattr__(self, key: Any, value: Any) -> None:\n        self[key] = value\n\n    def __delattr__(self, key: Any) -> None:\n        try:\n            del self[key]\n        except KeyError as e:\n            raise AttributeError(f\"no attribute '{key}'\") from e\n\n    def to_str(self) -> str:\n        \"\"\"Return the string representation of the message\"\"\"\n        raise NotImplementedError\n\n    def serialize(self) -> str:\n        \"\"\"Return the serialized message.\"\"\"\n        raise NotImplementedError", "start_char_idx": 2137, "end_char_idx": 2815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a856d40f-4dff-406f-932b-b877b6e10767": {"__data__": {"id_": "a856d40f-4dff-406f-932b-b877b6e10767", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f853927-f7f9-4f37-97ef-d1e707ffce7f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "03572a4107bcdea9e0fa49a7451a69b917f6d6fc547c6993e65f2edab85e1540", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e34c5af6-2181-4a55-ab42-7780770de831", "node_type": "1", "metadata": {}, "hash": "ca0fff49bcb7dff9511d41944a56983f3136e77d1a9da303702de66cd619f007", "class_name": "RelatedNodeInfo"}}, "text": "class Msg(MessageBase):", "start_char_idx": 2818, "end_char_idx": 2841, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e34c5af6-2181-4a55-ab42-7780770de831": {"__data__": {"id_": "e34c5af6-2181-4a55-ab42-7780770de831", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a856d40f-4dff-406f-932b-b877b6e10767", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b94ffda6cdff74194ca80c5d77527affde4888bebe49014b6989758e005c3170", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "782a40e4-b6be-4631-81a7-2353a7b80aed", "node_type": "1", "metadata": {}, "hash": "00dfbafb8bcb2fc959c20ed46a09e49000fc0dc02f91eb189cdbd0dee5152cc2", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The Message class.\"\"\"", "start_char_idx": 2846, "end_char_idx": 2870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "782a40e4-b6be-4631-81a7-2353a7b80aed": {"__data__": {"id_": "782a40e4-b6be-4631-81a7-2353a7b80aed", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e34c5af6-2181-4a55-ab42-7780770de831", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e169b551080282d11151d059fb8d3bfaae38d5d3f8334d42625694b7dae77ad7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ad143af-894f-4f61-95ee-c6455cda4561", "node_type": "1", "metadata": {}, "hash": "9e4c8169735e8bf336e40d4a10c39f2cf415b5efc5956a9ddfc3096bb3b30b43", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        content: Any,\n        role: Literal[\"system\", \"user\", \"assistant\"] = None,\n        url: Optional[Union[Sequence[str], str]] = None,\n        timestamp: Optional[str] = None,\n        echo: bool = False,\n        **kwargs: Any,\n    ) -> None:", "start_char_idx": 2876, "end_char_idx": 3169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ad143af-894f-4f61-95ee-c6455cda4561": {"__data__": {"id_": "7ad143af-894f-4f61-95ee-c6455cda4561", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "782a40e4-b6be-4631-81a7-2353a7b80aed", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f2e309ebc51e1dbda90779ad7510cb53f84ff4c503c3c1e888669b189d89cf56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92176222-3315-4d5b-80e7-00d4d48323a3", "node_type": "1", "metadata": {}, "hash": "6b714cc5ad8ad37d1df80192c6a7cd2fd805f70cab400765332b956b191a6a16", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Initialize the message object\n\n        Args:\n            name (`str`):\n                The name of who send the message.\n            content (`Any`):\n                The content of the message.\n            role (`Literal[\"system\", \"user\", \"assistant\"]`):\n                Used to identify the source of the message, e.g. the system\n                information, the user input, or the model response. This\n                argument is used to accommodate most Chat API formats.\n            url (`Optional[Union[list[str], str]]`, defaults to None):\n                A url to file, image, video, audio or website.\n            timestamp (`Optional[str]`, defaults to None):\n                The timestamp of the message, if None, it will be set to\n                current time.\n            **kwargs (`Any`):\n                Other attributes of the message.\n\n        \"\"\"\n\n        if role is None:\n            logger.warning(\n                \"A new field `role` is newly added to the message. \"\n                \"Please specify the role of the message. Currently we use \"\n                'a default \"assistant\" value.',\n            )\n\n        super().__init__(\n            name=name,\n            content=content,\n            role=role or \"assistant\",\n            url=url,\n            timestamp=timestamp,\n            **kwargs,\n        )\n        if echo:\n            logger.chat(self)", "start_char_idx": 3178, "end_char_idx": 4554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92176222-3315-4d5b-80e7-00d4d48323a3": {"__data__": {"id_": "92176222-3315-4d5b-80e7-00d4d48323a3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ad143af-894f-4f61-95ee-c6455cda4561", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "108185fff1979aa6f3aaeae9da12934fa1b2ae4de1e09a54a252750a050626a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5fe94cc-b118-41a6-b1e9-586f531ff4d0", "node_type": "1", "metadata": {}, "hash": "e753c9ff9e026fc99a73f152779777fe0edf20f8cef7cbaea614511b7932faa5", "class_name": "RelatedNodeInfo"}}, "text": "def to_str(self) -> str:\n        \"\"\"Return the string representation of the message\"\"\"\n        return f\"{self.name}: {self.content}\"\n\n    def serialize(self) -> str:\n        return json.dumps({\"__type\": \"Msg\", **self})", "start_char_idx": 4560, "end_char_idx": 4778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5fe94cc-b118-41a6-b1e9-586f531ff4d0": {"__data__": {"id_": "f5fe94cc-b118-41a6-b1e9-586f531ff4d0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92176222-3315-4d5b-80e7-00d4d48323a3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6c460a7aa9e4a9a0a830d35497559cf6fd17fb4d2d681ef10f1b87eb9afba633", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74856c6c-4576-4b82-9669-6e4d7f105936", "node_type": "1", "metadata": {}, "hash": "e19fd54f61a8f323ba46992648b17599131853f19f445c4e8b0f86cccd6bb0b3", "class_name": "RelatedNodeInfo"}}, "text": "class Tht(MessageBase):", "start_char_idx": 4781, "end_char_idx": 4804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74856c6c-4576-4b82-9669-6e4d7f105936": {"__data__": {"id_": "74856c6c-4576-4b82-9669-6e4d7f105936", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5fe94cc-b118-41a6-b1e9-586f531ff4d0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3237b22161f61d3a3c9523ae145b811a62bd48fb7b4c307f7c5e31ff1b68c690", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c3f0619-7004-4e4f-a844-f33fa57c0820", "node_type": "1", "metadata": {}, "hash": "60da1b06b088891537af213cac54430cc809a03e9ed28080008ae95b2250a0a9", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The Thought message is used to record the thought of the agent to\n    help them make decisions and responses. Generally, it shouldn't be\n    passed to or seen by the other agents.\n\n    In our framework, we formulate the thought in prompt as follows:\n    - For OpenAI API calling:\n\n    .. code-block:: python\n\n        [\n            ...\n            {\n                \"role\": \"assistant\",\n                \"name\": \"thought\",\n                \"content\": \"I should ...\"\n            },\n            ...\n        ]\n\n    - For open-source models that accepts string as input:\n\n    .. code-block:: python\n\n        ...\n        {self.name} thought: I should ...\n        ...\n\n    We admit that there maybe better ways to formulate the thought. Users\n    are encouraged to create their own thought formulation methods by\n    inheriting `MessageBase` class and rewrite the `__init__` and `to_str`\n    function.\n\n    .. code-block:: python\n\n        class MyThought(MessageBase):\n            def to_str(self) -> str:\n                # implement your own thought formulation method\n                pass\n    \"\"\"\n\n    def __init__(\n        self,\n        content: Any,\n        timestamp: Optional[str] = None,\n    ) -> None:\n        super().__init__(\n            name=\"thought\",\n            content=content,\n            role=\"assistant\",\n            timestamp=timestamp,\n        )", "start_char_idx": 4809, "end_char_idx": 6168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c3f0619-7004-4e4f-a844-f33fa57c0820": {"__data__": {"id_": "7c3f0619-7004-4e4f-a844-f33fa57c0820", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74856c6c-4576-4b82-9669-6e4d7f105936", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9f18fdf6f89054ea57c3cc2a4a732a4ab0fea838b6f4f941d6fd94a9ce1b6b04", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b4d4fada-abd1-4240-aab2-7a6a03a32e7b", "node_type": "1", "metadata": {}, "hash": "c81db9b774fdae98f8ccd1288fecdbbca9168cf0575d8b6f7a24dc055b442a12", "class_name": "RelatedNodeInfo"}}, "text": "def to_str(self) -> str:\n        \"\"\"Return the string representation of the message\"\"\"\n        return f\"{self.name} thought: {self.content}\"\n\n    def serialize(self) -> str:\n        return json.dumps({\"__type\": \"Tht\", **self})", "start_char_idx": 6174, "end_char_idx": 6400, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4d4fada-abd1-4240-aab2-7a6a03a32e7b": {"__data__": {"id_": "b4d4fada-abd1-4240-aab2-7a6a03a32e7b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c3f0619-7004-4e4f-a844-f33fa57c0820", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a2ab7cd228dcd52f37fe01d6bc2dbbb73cc6adf547e09eae258973429dfb72ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3", "node_type": "1", "metadata": {}, "hash": "2f790730aa0b4292c334157445fddb806d4300cdbc030015ee60c4fc7a60285a", "class_name": "RelatedNodeInfo"}}, "text": "class PlaceholderMessage(MessageBase):", "start_char_idx": 6403, "end_char_idx": 6441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3": {"__data__": {"id_": "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b4d4fada-abd1-4240-aab2-7a6a03a32e7b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a8523863c95b81d20594a4d121cac6496fda59e8baccdfd49cedacde554ffaaf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1", "node_type": "1", "metadata": {}, "hash": "b93870b151be97c79bf3d52a7af3c32dd760121fcbd829a398342469b5a98933", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A placeholder for the return message of RpcAgent.\"\"\"\n\n    PLACEHOLDER_ATTRS = {\n        \"_host\",\n        \"_port\",\n        \"_client\",\n        \"_task_id\",\n        \"_stub\",\n        \"_is_placeholder\",\n    }\n\n    LOCAL_ATTRS = {\n        \"name\",\n        \"timestamp\",\n        *PLACEHOLDER_ATTRS,\n    }", "start_char_idx": 6446, "end_char_idx": 6743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1": {"__data__": {"id_": "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fdaf02b7487b8e31962e36df1c1d34daff393734ec4c9f03a13096e56c891cda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        name: str,\n        content: Any,\n        url: Optional[Union[Sequence[str], str]] = None,\n        timestamp: Optional[str] = None,\n        host: str = None,\n        port: int = None,\n        task_id: int = None,\n        client: Optional[RpcAgentClient] = None,\n        x: dict = None,\n        **kwargs: Any,\n    ) -> None:", "start_char_idx": 6749, "end_char_idx": 7107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459": {"__data__": {"id_": "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "578428e999e6f451d20ba51d2fe08b2a91560f57b250df6dd4786d24e3bb1139", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7798f01-f1ec-4ef9-add3-75fff329204d", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7798f01-f1ec-4ef9-add3-75fff329204d": {"__data__": {"id_": "e7798f01-f1ec-4ef9-add3-75fff329204d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "de03e1b46758d00bfb83a9dff17937380327566e2a5f6eab3f2cd088269d6e4e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51c4d48b-ab16-4242-9ca6-bbc0b0469534", "node_type": "1", "metadata": {}, "hash": "724a992a3452122f8ac1a33ebf59c6746fb491c48f172db6b191d038aa893ea5", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51c4d48b-ab16-4242-9ca6-bbc0b0469534": {"__data__": {"id_": "51c4d48b-ab16-4242-9ca6-bbc0b0469534", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7798f01-f1ec-4ef9-add3-75fff329204d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "de03e1b46758d00bfb83a9dff17937380327566e2a5f6eab3f2cd088269d6e4e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e172ccbb-b03a-4ab6-b18c-f905f22b9f65", "node_type": "1", "metadata": {}, "hash": "3b9ad1dde57b11361bfd020ce9b2100541d15f640a1fee54da055eb999d5a2ef", "class_name": "RelatedNodeInfo"}}, "text": "super().__init__(\n            name=name,\n            content=content,\n            url=url,\n            timestamp=timestamp,\n            **kwargs,\n        )\n        # placeholder indicates whether the real message is still in rpc server\n        self._is_placeholder = True\n        if client is None:\n            self._stub: ResponseStub = None\n            self._host: str = host\n            self._port: int = port\n            self._task_id: int = task_id\n        else:\n            self._stub = call_in_thread(client, x, \"_reply\")\n            self._host = client.host\n            self._port = client.port\n            self._task_id = None", "start_char_idx": 8862, "end_char_idx": 9497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e172ccbb-b03a-4ab6-b18c-f905f22b9f65": {"__data__": {"id_": "e172ccbb-b03a-4ab6-b18c-f905f22b9f65", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51c4d48b-ab16-4242-9ca6-bbc0b0469534", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2905f9a347d69cdb173e192dc25c4c3b0f33f628fc28a6e3c3277f8a6a16874a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40b1711f-7093-46a0-aa0d-618080e3bbcb", "node_type": "1", "metadata": {}, "hash": "e9fa1068dd05d1c70f0fd303b5c2c79e359ef6ec34f6bf8e09f4205df704bbda", "class_name": "RelatedNodeInfo"}}, "text": "def __is_local(self, key: Any) -> bool:\n        return (\n            key in PlaceholderMessage.LOCAL_ATTRS or not self._is_placeholder\n        )\n\n    def __getattr__(self, __name: str) -> Any:\n        \"\"\"Get attribute value from PlaceholderMessage. Get value from rpc\n        agent server if necessary.\n\n        Args:\n            __name (`str`):\n                Attribute name.\n        \"\"\"\n        if not self.__is_local(__name):\n            self.update_value()\n        return MessageBase.__getattr__(self, __name)\n\n    def __getitem__(self, __key: Any) -> Any:\n        \"\"\"Get item value from PlaceholderMessage. Get value from rpc\n        agent server if necessary.\n\n        Args:\n            __key (`Any`):\n                Item name.\n        \"\"\"\n        if not self.__is_local(__key):\n            self.update_value()\n        return MessageBase.__getitem__(self, __key)\n\n    def to_str(self) -> str:\n        return f\"{self.name}: {self.content}\"", "start_char_idx": 9503, "end_char_idx": 10449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40b1711f-7093-46a0-aa0d-618080e3bbcb": {"__data__": {"id_": "40b1711f-7093-46a0-aa0d-618080e3bbcb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e172ccbb-b03a-4ab6-b18c-f905f22b9f65", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fdae2ca22b3a212fe6b72e7c678d10e86e4a2a932c8efc080413cc5694e6b9ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eae9122b-b233-427d-8a6e-39c79ea74bc6", "node_type": "1", "metadata": {}, "hash": "b782b259a64a6e5b5f4de383505a8039f168c360734b86d292b446417d1f2ccd", "class_name": "RelatedNodeInfo"}}, "text": "def update_value(self) -> MessageBase:\n        \"\"\"Get attribute values from rpc agent server immediately\"\"\"\n        if self._is_placeholder:\n            # retrieve real message from rpc agent server\n            self.__update_task_id()\n            client = RpcAgentClient(self._host, self._port)\n            result = client.call_func(\n                func_name=\"_get\",\n                value=json.dumps({\"task_id\": self._task_id}),\n            )\n            msg = deserialize(result)\n            status = msg.pop(\"__status\", \"OK\")\n            if status == \"ERROR\":\n                raise RuntimeError(msg.content)\n            self.update(msg)\n            # the actual value has been updated, not a placeholder any more\n            self._is_placeholder = False\n        return self\n\n    def __update_task_id(self) -> None:\n        if self._stub is not None:\n            resp = deserialize(self._stub.get_response())\n            self._task_id = resp[\"task_id\"]  # type: ignore[call-overload]\n            self._stub = None", "start_char_idx": 10455, "end_char_idx": 11470, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eae9122b-b233-427d-8a6e-39c79ea74bc6": {"__data__": {"id_": "eae9122b-b233-427d-8a6e-39c79ea74bc6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40b1711f-7093-46a0-aa0d-618080e3bbcb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5f38d924c2f19f78add3c6ed2007edf9fd59e7dc4852741cd9412c0403f8f3c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31e68403-f414-4471-8f9d-b80d2f82f53f", "node_type": "1", "metadata": {}, "hash": "a5499659b92d2fc5bd8049b8afd693c61d99c5b57417fdfa323edd1225c7ff50", "class_name": "RelatedNodeInfo"}}, "text": "def serialize(self) -> str:\n        if self._is_placeholder:\n            self.__update_task_id()\n            return json.dumps(\n                {\n                    \"__type\": \"PlaceholderMessage\",\n                    \"name\": self.name,\n                    \"content\": None,\n                    \"timestamp\": self.timestamp,\n                    \"host\": self._host,\n                    \"port\": self._port,\n                    \"task_id\": self._task_id,\n                },\n            )\n        else:\n            states = {\n                k: v\n                for k, v in self.items()\n                if k not in PlaceholderMessage.PLACEHOLDER_ATTRS\n            }\n            states[\"__type\"] = \"Msg\"\n            return json.dumps(states)", "start_char_idx": 11476, "end_char_idx": 12210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31e68403-f414-4471-8f9d-b80d2f82f53f": {"__data__": {"id_": "31e68403-f414-4471-8f9d-b80d2f82f53f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fd9fa0ac4c4da9dcb148389cdb28e01159247599146d2d830bf338d8dc59fa2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eae9122b-b233-427d-8a6e-39c79ea74bc6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27a155deb346d1a1eeb43097b60059af596bc2ecc59d9559d8e205c983633f7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2673662a-7537-4e18-b116-1e66ab62e20d", "node_type": "1", "metadata": {}, "hash": "b62e33e2a15bf3265283f29dbd267b566e0095ba433bc37e46730439d8e476fe", "class_name": "RelatedNodeInfo"}}, "text": "_MSGS = {\n    \"Msg\": Msg,\n    \"Tht\": Tht,\n    \"PlaceholderMessage\": PlaceholderMessage,\n}\n\n\ndef deserialize(s: str) -> Union[MessageBase, Sequence]:\n    \"\"\"Deserialize json string into MessageBase\"\"\"\n    js_msg = json.loads(s)\n    msg_type = js_msg.pop(\"__type\")\n    if msg_type == \"List\":\n        return [deserialize(s) for s in js_msg[\"__value\"]]\n    elif msg_type not in _MSGS:\n        raise NotImplementedError(\n            \"Deserialization of {msg_type} is not supported.\",\n        )\n    return _MSGS[msg_type](**js_msg)\n\n\ndef serialize(messages: Union[Sequence[MessageBase], MessageBase]) -> str:\n    \"\"\"Serialize multiple MessageBase instance\"\"\"\n    if isinstance(messages, MessageBase):\n        return messages.serialize()\n    seq = [msg.serialize() for msg in messages]\n    return json.dumps({\"__type\": \"List\", \"__value\": seq})", "start_char_idx": 12213, "end_char_idx": 13049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2673662a-7537-4e18-b116-1e66ab62e20d": {"__data__": {"id_": "2673662a-7537-4e18-b116-1e66ab62e20d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f66433a6a6a52c8330d5b95d9c81694f96c7d49aba51ceb1f7bf2fe430c3c4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31e68403-f414-4471-8f9d-b80d2f82f53f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d9d71dad08951aedcbed6a08738a3b14ff19e6afa6df709a3404e901a4853eb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a564584e-5a60-4280-9d7f-eadf9df9c4ba", "node_type": "1", "metadata": {}, "hash": "82f4a91074682587862365369c0963c5d61d7c673363a522fe7790b9bfeeb3b3", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import modules in models package.\"\"\"\nimport json\nfrom typing import Union, Type\n\nfrom loguru import logger\n\nfrom .config import _ModelConfig\nfrom .model import ModelWrapperBase\nfrom .response import (\n    ModelResponse,\n    ResponseParsingError,\n    ResponseParser,\n)\nfrom .post_model import (\n    PostAPIModelWrapperBase,\n    PostAPIChatWrapper,\n)\nfrom .openai_model import (\n    OpenAIWrapperBase,\n    OpenAIChatWrapper,\n    OpenAIDALLEWrapper,\n    OpenAIEmbeddingWrapper,\n)\nfrom .dashscope_model import (\n    DashScopeChatWrapper,\n    DashScopeImageSynthesisWrapper,\n    DashScopeTextEmbeddingWrapper,\n    DashScopeMultiModalWrapper,\n)\nfrom .ollama_model import (\n    OllamaChatWrapper,\n    OllamaEmbeddingWrapper,\n    OllamaGenerationWrapper,\n)\nfrom .gemini_model import (\n    GeminiChatWrapper,\n    GeminiEmbeddingWrapper,\n)\n\n\n__all__ = [\n    \"ModelWrapperBase\",\n    \"ModelResponse\",\n    \"ResponseParser\",\n    \"ResponseParsingError\",\n    \"PostAPIModelWrapperBase\",\n    \"PostAPIChatWrapper\",\n    \"OpenAIWrapperBase\",\n    \"OpenAIChatWrapper\",\n    \"OpenAIDALLEWrapper\",\n    \"OpenAIEmbeddingWrapper\",\n    \"load_model_by_config_name\",\n    \"read_model_configs\",\n    \"clear_model_configs\",\n    \"DashScopeChatWrapper\",\n    \"DashScopeImageSynthesisWrapper\",\n    \"DashScopeTextEmbeddingWrapper\",\n    \"DashScopeMultiModalWrapper\",\n    \"OllamaChatWrapper\",\n    \"OllamaEmbeddingWrapper\",\n    \"OllamaGenerationWrapper\",\n    \"GeminiChatWrapper\",\n    \"GeminiEmbeddingWrapper\",\n]", "start_char_idx": 0, "end_char_idx": 1495, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a564584e-5a60-4280-9d7f-eadf9df9c4ba": {"__data__": {"id_": "a564584e-5a60-4280-9d7f-eadf9df9c4ba", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f66433a6a6a52c8330d5b95d9c81694f96c7d49aba51ceb1f7bf2fe430c3c4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2673662a-7537-4e18-b116-1e66ab62e20d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6b4764d1c4ce3709d550d0f231fa10d8cbc39199908f5123ca11d17270fef722", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c", "node_type": "1", "metadata": {}, "hash": "d0fd0dd0c4f0cb0b74a88d9d3aa96d8c60cf6faee69c0ffbd74f7c5701bec4c0", "class_name": "RelatedNodeInfo"}}, "text": "_MODEL_CONFIGS: dict[str, dict] = {}\n\n\ndef _get_model_wrapper(model_type: str) -> Type[ModelWrapperBase]:\n    \"\"\"Get the specific type of model wrapper\n\n    Args:\n        model_type (`str`): The model type name.\n\n    Returns:\n        `Type[ModelWrapperBase]`: The corresponding model wrapper class.\n    \"\"\"\n    if model_type in ModelWrapperBase.type_registry:\n        return ModelWrapperBase.type_registry[  # type: ignore[return-value]\n            model_type\n        ]\n    elif model_type in ModelWrapperBase.registry:\n        return ModelWrapperBase.registry[  # type: ignore[return-value]\n            model_type\n        ]\n    elif model_type in ModelWrapperBase.deprecated_type_registry:\n        cls = ModelWrapperBase.deprecated_type_registry[model_type]\n        logger.warning(\n            f\"Model type [{model_type}] will be deprecated in future releases,\"\n            f\" please use [{cls.model_type}] instead.\",\n        )\n        return cls  # type: ignore[return-value]\n    else:\n        logger.warning(\n            f\"Unsupported model_type [{model_type}],\"\n            \"use PostApiModelWrapper instead.\",\n        )\n        return PostAPIModelWrapperBase", "start_char_idx": 1497, "end_char_idx": 2659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c": {"__data__": {"id_": "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f66433a6a6a52c8330d5b95d9c81694f96c7d49aba51ceb1f7bf2fe430c3c4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a564584e-5a60-4280-9d7f-eadf9df9c4ba", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "39cb75000d2e9ac2c03cc9dc3916410c05b784ed58aaec316f04fb60fa178cf8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72369850-83c2-4efb-aba8-797721a36f0d", "node_type": "1", "metadata": {}, "hash": "97288ef3df0511eee9455deccd6d163eb42e72f3fcb2a288aaceef5674e6517c", "class_name": "RelatedNodeInfo"}}, "text": "def load_model_by_config_name(config_name: str) -> ModelWrapperBase:\n    \"\"\"Load the model by config name.\"\"\"\n    if len(_MODEL_CONFIGS) == 0:\n        raise ValueError(\n            \"No model configs loaded, please call \"\n            \"`read_model_configs` first.\",\n        )\n\n    # Find model config by name\n    if config_name not in _MODEL_CONFIGS:\n        raise ValueError(\n            f\"Cannot find [{config_name}] in loaded configurations.\",\n        )\n    config = _MODEL_CONFIGS[config_name]\n\n    if config is None:\n        raise ValueError(\n            f\"Cannot find [{config_name}] in loaded configurations.\",\n        )\n\n    model_type = config.model_type\n\n    kwargs = {k: v for k, v in config.items() if k != \"model_type\"}\n\n    return _get_model_wrapper(model_type=model_type)(**kwargs)\n\n\ndef clear_model_configs() -> None:\n    \"\"\"Clear the loaded model configs.\"\"\"\n    _MODEL_CONFIGS.clear()", "start_char_idx": 2662, "end_char_idx": 3562, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72369850-83c2-4efb-aba8-797721a36f0d": {"__data__": {"id_": "72369850-83c2-4efb-aba8-797721a36f0d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f66433a6a6a52c8330d5b95d9c81694f96c7d49aba51ceb1f7bf2fe430c3c4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "17131fa614d67a62ef208a2575bbc9a6619427e9c5ba969fc19f641c4d4646f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1", "node_type": "1", "metadata": {}, "hash": "879a55f3f2f106c75c34b6ffecf0cdfabcc2157620281f0cc41ab459a838b34a", "class_name": "RelatedNodeInfo"}}, "text": "def read_model_configs(\n    configs: Union[dict, str, list],\n    clear_existing: bool = False,\n) -> None:\n    \"\"\"read model configs from a path or a list of dicts.\n\n    Args:\n        configs (`Union[str, list, dict]`):\n            The path of the model configs | a config dict | a list of model\n            configs.\n        clear_existing (`bool`, defaults to `False`):\n            Whether to clear the loaded model configs before reading.\n\n    Returns:\n        `dict`:\n            The model configs.\n    \"\"\"\n    if clear_existing:\n        clear_model_configs()\n\n    if isinstance(configs, str):\n        with open(configs, \"r\", encoding=\"utf-8\") as f:\n            cfgs = json.load(f)\n\n    if isinstance(configs, dict):\n        cfgs = [configs]\n\n    if isinstance(configs, list):\n        if not all(isinstance(_, dict) for _ in configs):\n            raise ValueError(\n                \"The model config unit should be a dict.\",\n            )\n        cfgs = configs\n\n    format_configs = _ModelConfig.format_configs(configs=cfgs)\n\n    # check if name is unique\n    for cfg in format_configs:\n        if cfg.config_name in _MODEL_CONFIGS:\n            logger.warning(\n                f\"config_name [{cfg.config_name}] already exists.\",\n            )\n            continue\n        _MODEL_CONFIGS[cfg.config_name] = cfg\n\n    # print the loaded model configs\n    logger.info(\n        \"Load configs for model wrapper: {}\",\n        \", \".join(_MODEL_CONFIGS.keys()),\n    )", "start_char_idx": 3565, "end_char_idx": 5025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1": {"__data__": {"id_": "e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "def349d5c5c6364938bf6ebe5705e7ceb49c0a6220fa8e9dc5a6ee840b270c32", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72369850-83c2-4efb-aba8-797721a36f0d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "01c52c98ce5ad7129c48d7dd31946f8744004834cd698f1bdadd8a70f51ba8dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72d9674e-ffec-4802-a3b6-564d141edb8a", "node_type": "1", "metadata": {}, "hash": "df636444d4b1375c1d871dde0ef92976605fd0346d0190596ea0f43ae816604b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"The model config.\"\"\"\nfrom typing import Union, Sequence, Any\n\nfrom loguru import logger", "start_char_idx": 0, "end_char_idx": 114, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72d9674e-ffec-4802-a3b6-564d141edb8a": {"__data__": {"id_": "72d9674e-ffec-4802-a3b6-564d141edb8a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "def349d5c5c6364938bf6ebe5705e7ceb49c0a6220fa8e9dc5a6ee840b270c32", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "36b0f5639be17c87c4dea02f200e44b22197c25e394a8fa38f76eb1e889231cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e534ba0c-7149-4ccd-ba37-4384b1ec035d", "node_type": "1", "metadata": {}, "hash": "1c7780ea527a0ea3cced2a0de41b7e62cb713eaa77b0d3d529dffa643c1ba30f", "class_name": "RelatedNodeInfo"}}, "text": "class _ModelConfig(dict):", "start_char_idx": 117, "end_char_idx": 142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e534ba0c-7149-4ccd-ba37-4384b1ec035d": {"__data__": {"id_": "e534ba0c-7149-4ccd-ba37-4384b1ec035d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "def349d5c5c6364938bf6ebe5705e7ceb49c0a6220fa8e9dc5a6ee840b270c32", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72d9674e-ffec-4802-a3b6-564d141edb8a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9feb07fc37163fc7b05bbcc286fd6249e0c410661d1c0277694e3a3283d55830", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f17d0d5-a7db-49d2-b67b-33023253e5a2", "node_type": "1", "metadata": {}, "hash": "bd020ac5bf545d3ecbafa7a103e2ac98eac24a92115b616adb181012b67afd77", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Base class for model config.\"\"\"\n\n    __getattr__ = dict.__getitem__\n    __setattr__ = dict.__setitem__\n\n    def __init__(\n        self,\n        config_name: str,\n        model_type: str = None,\n        **kwargs: Any,\n    ):\n        \"\"\"Initialize the config with the given arguments, and checking the\n        type of the arguments.\n\n        Args:\n            config_name (`str`): A unique name of the model config.\n            model_type (`str`, optional): The class name (or its model type) of\n                the generated model wrapper. Defaults to None.\n\n        Raises:\n            `ValueError`: If `config_name` is not provided.\n        \"\"\"\n        if config_name is None:\n            raise ValueError(\"The `config_name` field is required for Cfg\")\n        if model_type is None:\n            logger.warning(\n                f\"`model_type` is not provided in config [{config_name}],\"\n                \" use `PostAPIModelWrapperBase` by default.\",\n            )\n        super().__init__(\n            config_name=config_name,\n            model_type=model_type,\n            **kwargs,\n        )", "start_char_idx": 147, "end_char_idx": 1243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f17d0d5-a7db-49d2-b67b-33023253e5a2": {"__data__": {"id_": "8f17d0d5-a7db-49d2-b67b-33023253e5a2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "def349d5c5c6364938bf6ebe5705e7ceb49c0a6220fa8e9dc5a6ee840b270c32", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e534ba0c-7149-4ccd-ba37-4384b1ec035d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e146348290d65abb0c5a9c78d012a43a9576f9ed3d995eca240ad28e9470ccf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75e5157c-84fb-4fed-9054-056d5d63fbc5", "node_type": "1", "metadata": {}, "hash": "d3d3a80c14389d38784e89957a9b0c3c7109605e1d5c3ba8d186fb923629ad5b", "class_name": "RelatedNodeInfo"}}, "text": "@classmethod\n    def format_configs(\n        cls,\n        configs: Union[Sequence[dict], dict],\n    ) -> Sequence:\n        \"\"\"Covert config dicts into a list of _ModelConfig.\n\n        Args:\n            configs (Union[Sequence[dict], dict]): configs in dict format.\n\n        Returns:\n            Sequence[_ModelConfig]: converted ModelConfig list.\n        \"\"\"\n        if isinstance(configs, dict):\n            return [_ModelConfig(**configs)]\n        return [_ModelConfig(**cfg) for cfg in configs]", "start_char_idx": 1249, "end_char_idx": 1746, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75e5157c-84fb-4fed-9054-056d5d63fbc5": {"__data__": {"id_": "75e5157c-84fb-4fed-9054-056d5d63fbc5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f17d0d5-a7db-49d2-b67b-33023253e5a2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78e171ad401d8f771a8b8d679a595b8262d202701b2c81a5c40f2808817a5d02", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca73f10f-83fd-4607-8c5e-3412ef3bf05e", "node_type": "1", "metadata": {}, "hash": "73d01bb1e7efae8129fe562fe0697bb74b7e2747fd7f44d2a61f0feef5973e3f", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Model wrapper for DashScope models\"\"\"\nimport os\nfrom abc import ABC\nfrom http import HTTPStatus\nfrom typing import Any, Union, List, Sequence\nfrom loguru import logger\n\nfrom ..message import MessageBase\nfrom ..utils.tools import _convert_to_str, _guess_type_by_extension\n\ntry:\n    import dashscope\nexcept ModuleNotFoundError:\n    dashscope = None\n\nfrom .model import ModelWrapperBase, ModelResponse\n\nfrom ..file_manager import file_manager", "start_char_idx": 0, "end_char_idx": 466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca73f10f-83fd-4607-8c5e-3412ef3bf05e": {"__data__": {"id_": "ca73f10f-83fd-4607-8c5e-3412ef3bf05e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75e5157c-84fb-4fed-9054-056d5d63fbc5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f3bfe492f63cd539faa0662d8fd7067294cb45a9b1ed73f8c5ead5649201187e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c3ba30a-f500-49e3-a240-0c779ff13268", "node_type": "1", "metadata": {}, "hash": "d95fab81d5ba164adda2129ada9ca2c24553c31639cf456468b25dcbf9f31e38", "class_name": "RelatedNodeInfo"}}, "text": "class DashScopeWrapperBase(ModelWrapperBase, ABC):", "start_char_idx": 469, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c3ba30a-f500-49e3-a240-0c779ff13268": {"__data__": {"id_": "9c3ba30a-f500-49e3-a240-0c779ff13268", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca73f10f-83fd-4607-8c5e-3412ef3bf05e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "415bb7a9a23d8296bdc13277acb7cceeb683480992b79f792cc8d6b754cc9578", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b941f72-5ea6-4132-b957-e1b306d02ca5", "node_type": "1", "metadata": {}, "hash": "ea88364d3d8dca11dcb8f771f90fd87a846afa95c8bb866803214330fae22dd2", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for DashScope API.\"\"\"\n\n    def __init__(\n        self,\n        config_name: str,\n        model_name: str = None,\n        api_key: str = None,\n        generate_args: dict = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize the DashScope wrapper.\n\n        Args:\n            config_name (`str`):\n                The name of the model config.\n            model_name (`str`, default `None`):\n                The name of the model to use in DashScope API.\n            api_key (`str`, default `None`):\n                The API key for DashScope API.\n            generate_args (`dict`, default `None`):\n                The extra keyword arguments used in DashScope api generation,\n                e.g. `temperature`, `seed`.\n        \"\"\"\n        if model_name is None:\n            model_name = config_name\n            logger.warning(\"model_name is not set, use config_name instead.\")\n\n        super().__init__(config_name=config_name)\n\n        if dashscope is None:\n            raise ImportError(\n                \"Cannot find dashscope package in current python environment.\",\n            )\n\n        self.model_name = model_name\n        self.generate_args = generate_args or {}\n\n        self.api_key = api_key\n        dashscope.api_key = self.api_key\n        self.max_length = None\n\n        # Set monitor accordingly\n        self._register_default_metrics()", "start_char_idx": 524, "end_char_idx": 1908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b941f72-5ea6-4132-b957-e1b306d02ca5": {"__data__": {"id_": "2b941f72-5ea6-4132-b957-e1b306d02ca5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c3ba30a-f500-49e3-a240-0c779ff13268", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "39ae4c9d5999d924538c123e8731a351f69ace520730a3da0149b2fcddfce2be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdf055b7-b5a6-441f-8ee9-3d8278da6606", "node_type": "1", "metadata": {}, "hash": "0182fe238456fa9ed6d18af1c01d5cfe2005ff03e10b4573dd39b915273fb091", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict], str]:\n        raise RuntimeError(\n            f\"Model Wrapper [{type(self).__name__}] doesn't \"\n            f\"need to format the input. Please try to use the \"\n            f\"model wrapper directly.\",\n        )", "start_char_idx": 1914, "end_char_idx": 2234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdf055b7-b5a6-441f-8ee9-3d8278da6606": {"__data__": {"id_": "fdf055b7-b5a6-441f-8ee9-3d8278da6606", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b941f72-5ea6-4132-b957-e1b306d02ca5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b6b6a4d8c43975a5b508ee041d562d25c75205f7dc746d061293115d8729e77a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545", "node_type": "1", "metadata": {}, "hash": "b88a5d9d6f5ee61ee2fd4a6426370882cca0a7a2129547079b3c316423b3108a", "class_name": "RelatedNodeInfo"}}, "text": "class DashScopeChatWrapper(DashScopeWrapperBase):", "start_char_idx": 2237, "end_char_idx": 2286, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545": {"__data__": {"id_": "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdf055b7-b5a6-441f-8ee9-3d8278da6606", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "87ad79b651a0b1ad1dc4feabc3aefced3280f7224559d56c90b0a4decd3c8c9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c74c6c7-6039-446f-80a1-4ec966242f84", "node_type": "1", "metadata": {}, "hash": "f82c065aaafe7e0d720c17f1c518f41499e7d4975f45d5c236bb55b350e5b038", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for DashScope's chat API, refer to\n    https://help.aliyun.com/zh/dashscope/developer-reference/api-details\n    \"\"\"\n\n    model_type: str = \"dashscope_chat\"\n\n    deprecated_model_type: str = \"tongyi_chat\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 2291, "end_char_idx": 3120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c74c6c7-6039-446f-80a1-4ec966242f84": {"__data__": {"id_": "1c74c6c7-6039-446f-80a1-4ec966242f84", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "01043b96ebd1b7fa067050a4fb910417c09e3303b7855da6796e5b63adba98ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        messages: list,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 3126, "end_char_idx": 3224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269": {"__data__": {"id_": "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c74c6c7-6039-446f-80a1-4ec966242f84", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6479e570851fb6b294951f5214adc37076c2e824a17939ec3e7ed2373928364e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72592a52-436f-4188-812d-d6caff7ffadc", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72592a52-436f-4188-812d-d6caff7ffadc": {"__data__": {"id_": "72592a52-436f-4188-812d-d6caff7ffadc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af7ceb01-f97b-44ca-802b-2d27598a7fb4", "node_type": "1", "metadata": {}, "hash": "3e7f552194162ea40a91fe31dc9061d7797b201c46dcf5a116f5db8a0d15e97b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af7ceb01-f97b-44ca-802b-2d27598a7fb4": {"__data__": {"id_": "af7ceb01-f97b-44ca-802b-2d27598a7fb4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72592a52-436f-4188-812d-d6caff7ffadc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc314749-c61c-4a5e-afe5-9389a5d19646", "node_type": "1", "metadata": {}, "hash": "e88b2a2136ccf57f770f538f151842d1da72c6cbff725a919800df6f559c5fe9", "class_name": "RelatedNodeInfo"}}, "text": "# step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: checking messages\n        if not isinstance(messages, list):\n            raise ValueError(\n                \"Dashscope `messages` field expected type `list`, \"\n                f\"got `{type(messages)}` instead.\",\n            )\n        if not all(\"role\" in msg and \"content\" in msg for msg in messages):\n            raise ValueError(\n                \"Each message in the 'messages' list must contain a 'role' \"\n                \"and 'content' key for DashScope API.\",\n            )\n\n        # step3: forward to generate response\n        response = dashscope.Generation.call(\n            model=self.model_name,\n            messages=messages,\n            result_format=\"message\",  # set the result to be \"message\" format.\n            **kwargs,\n        )\n\n        if response.status_code != HTTPStatus.OK:\n            error_msg = (\n                f\" Request id: {response.request_id},\"\n                f\" Status code: {response.status_code},\"\n                f\" error code: {response.code},\"\n                f\" error message: {response.message}.\"\n            )\n\n            raise RuntimeError(error_msg)\n\n        # step4: record the api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"messages\": messages,\n                **kwargs,\n            },\n            response=response,\n        )", "start_char_idx": 5373, "end_char_idx": 6850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc314749-c61c-4a5e-afe5-9389a5d19646": {"__data__": {"id_": "bc314749-c61c-4a5e-afe5-9389a5d19646", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af7ceb01-f97b-44ca-802b-2d27598a7fb4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bc5d669c08c42487c8798977587f20f283932283cad059d21b6c0f514f03fb91", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d3adaac-fa90-4307-a8ae-b746f2f1079d", "node_type": "1", "metadata": {}, "hash": "2069c9086a6cd4a5d8a37782636053b641064f725ccf6c564da5eb7687f91e88", "class_name": "RelatedNodeInfo"}}, "text": "# step5: update monitor accordingly\n        # The metric names are unified for comparison\n        self.update_monitor(\n            call_counter=1,\n            prompt_tokens=response.usage.get(\"input_tokens\", 0),\n            completion_tokens=response.usage.get(\"output_tokens\", 0),\n            total_tokens=response.usage.get(\"input_tokens\", 0)\n            + response.usage.get(\"output_tokens\", 0),\n        )\n\n        # step6: return response\n        return ModelResponse(\n            text=response.output[\"choices\"][0][\"message\"][\"content\"],\n            raw=response,\n        )", "start_char_idx": 6860, "end_char_idx": 7438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d3adaac-fa90-4307-a8ae-b746f2f1079d": {"__data__": {"id_": "0d3adaac-fa90-4307-a8ae-b746f2f1079d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc314749-c61c-4a5e-afe5-9389a5d19646", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d6faaaa38cd6c2ca763d3a05ae4a3a6a54069dec4953e84ba96f6802a052e059", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e534091f-6efb-4397-a1e5-3eeb2cf40fe8", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> List:", "start_char_idx": 7444, "end_char_idx": 7542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e534091f-6efb-4397-a1e5-3eeb2cf40fe8": {"__data__": {"id_": "e534091f-6efb-4397-a1e5-3eeb2cf40fe8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d3adaac-fa90-4307-a8ae-b746f2f1079d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f86efd47fd2079a73350646be69fbe3e9e0f48dd87bffa8b687bd9a30d035f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a740350-92a6-43fa-a721-b4494363716d", "node_type": "1", "metadata": {}, "hash": "c7ef694c04a1659d2f49e2c1568b7869e3246e66191c7fd8a93a4bf0e628cd45", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a740350-92a6-43fa-a721-b4494363716d": {"__data__": {"id_": "2a740350-92a6-43fa-a721-b4494363716d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e534091f-6efb-4397-a1e5-3eeb2cf40fe8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "Format the messages for DashScope Chat API.\n\n        In this format function, the input messages are formatted into a\n        single system messages with format \"{name}: {content}\" for each\n        message. Note this strategy maybe not suitable for all scenarios,\n        and developers are encouraged to implement their own prompt\n        engineering strategies.\n\n        The following is an example:\n\n        .. code-block:: python\n\n            prompt = model.format(\n                Msg(\"system\", \"You're a helpful assistant\", role=\"system\"),\n                Msg(\"Bob\", \"Hi, how can I help you?\", role=\"assistant\"),\n                Msg(\"user\", \"What's the date today?\", role=\"user\")\n            )\n\n        The prompt will be as follows:\n\n        .. code-block:: python\n\n            [\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You're a helpful assistant\",\n                }\n                {\n                    \"role\": \"user\",\n                    \"content\": (\n                        \"## Dialogue History\\n\"\n                        \"Bob: Hi, how can I help you?\\n", "start_char_idx": 7554, "end_char_idx": 8666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe": {"__data__": {"id_": "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a740350-92a6-43fa-a721-b4494363716d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2332f169ed38499e56c924ecd2095aa9f132954a043caa2ac027b7b7172f73ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d256475d-b303-4f68-bd2e-79aa496494a8", "node_type": "1", "metadata": {}, "hash": "95346a29b221c4b970060cc47287e00c953c81ef34e775157fe7028a56fbdf81", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d256475d-b303-4f68-bd2e-79aa496494a8": {"__data__": {"id_": "d256475d-b303-4f68-bd2e-79aa496494a8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b651d5ad-b46a-444d-b5fa-542baa9f4386", "node_type": "1", "metadata": {}, "hash": "bca5ae9ba0d837b7ac1955d54a2f147f9760c5efba3df4d11acec8679ac5862d", "class_name": "RelatedNodeInfo"}}, "text": "# Parse all information into a list of messages\n        input_msgs = []\n        for _ in args:\n            if isinstance(_, MessageBase):\n                input_msgs.append(_)\n            elif isinstance(_, list) and all(\n                isinstance(__, MessageBase) for __ in _\n            ):\n                input_msgs.extend(_)\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(_)}.\",\n                )\n\n        messages = []\n\n        # record dialog history as a list of strings\n        dialogue = []\n        for i, unit in enumerate(input_msgs):\n            if i == 0 and unit.role == \"system\":\n                # system prompt\n                messages.append(\n                    {\n                        \"role\": unit.role,\n                        \"content\": _convert_to_str(unit.content),\n                    },\n                )\n            else:\n                # Merge all messages into a dialogue history prompt\n                dialogue.append(\n                    f\"{unit.name}: {_convert_to_str(unit.content)}\",\n                )\n\n        dialogue_history = \"\\n\".join(dialogue)\n\n        user_content_template = \"## Dialogue History\\n{dialogue_history}\"", "start_char_idx": 9167, "end_char_idx": 10446, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b651d5ad-b46a-444d-b5fa-542baa9f4386": {"__data__": {"id_": "b651d5ad-b46a-444d-b5fa-542baa9f4386", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d256475d-b303-4f68-bd2e-79aa496494a8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f706d932ebd7ee1a3aff7a1b2d2b6669b61e5392133f2fec4896501b10450456", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67835fc8-734b-4a1a-b82a-710c50a0a884", "node_type": "1", "metadata": {}, "hash": "9bdc5047850982f3ce3fab2f3a172a349f6e30e51fe271dfaa0de477df677945", "class_name": "RelatedNodeInfo"}}, "text": "messages.append(\n            {\n                \"role\": \"user\",\n                \"content\": user_content_template.format(\n                    dialogue_history=dialogue_history,\n                ),\n            },\n        )\n\n        return messages", "start_char_idx": 10456, "end_char_idx": 10699, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67835fc8-734b-4a1a-b82a-710c50a0a884": {"__data__": {"id_": "67835fc8-734b-4a1a-b82a-710c50a0a884", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b651d5ad-b46a-444d-b5fa-542baa9f4386", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "355268a238a6076960785764e4ba10e86fab3be9f57a6b0527cc6be64618a050", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "091f75bf-258b-4f3e-8c34-bab384df81a5", "node_type": "1", "metadata": {}, "hash": "71bbc01123dd44226be1f3dd19f848929d4775a508edfb7fd889e301599c9b91", "class_name": "RelatedNodeInfo"}}, "text": "class DashScopeImageSynthesisWrapper(DashScopeWrapperBase):", "start_char_idx": 10702, "end_char_idx": 10761, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "091f75bf-258b-4f3e-8c34-bab384df81a5": {"__data__": {"id_": "091f75bf-258b-4f3e-8c34-bab384df81a5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67835fc8-734b-4a1a-b82a-710c50a0a884", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e6a46da14a93493b0c8a2f14b2426709437893064b6ad253d355dc536df6226b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9", "node_type": "1", "metadata": {}, "hash": "6868de586077fdefdd210fe3eb4a8251aa381f733b77cfe4b06a5ff51b54c223", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for DashScope Image Synthesis API, refer to\n    https://help.aliyun.com/zh/dashscope/developer-reference/quick-start-1\n    \"\"\"\n\n    model_type: str = \"dashscope_image_synthesis\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"image_count\"),\n            metric_unit=\"image\",\n        )", "start_char_idx": 10766, "end_char_idx": 11330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9": {"__data__": {"id_": "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "091f75bf-258b-4f3e-8c34-bab384df81a5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a182af812acc6828f4a25f8651ff92d96313f6b03503d662f6bab004c3983655", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19060afa-ce6d-45ad-bd6d-e50d9bd315e3", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        prompt: str,\n        save_local: bool = False,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 11336, "end_char_idx": 11465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19060afa-ce6d-45ad-bd6d-e50d9bd315e3": {"__data__": {"id_": "19060afa-ce6d-45ad-bd6d-e50d9bd315e3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1cec98f3f9e349192c8ed0196cc4be38fff487d76d835081717c7efcc3f1baa1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd841260-f94e-4c83-a69c-375116d287e8", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd841260-f94e-4c83-a69c-375116d287e8": {"__data__": {"id_": "cd841260-f94e-4c83-a69c-375116d287e8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19060afa-ce6d-45ad-bd6d-e50d9bd315e3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c", "node_type": "1", "metadata": {}, "hash": "53f5b186cb93e30899b6d24995ecf33398358affad406084adf3478f701af914", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c": {"__data__": {"id_": "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd841260-f94e-4c83-a69c-375116d287e8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e674e15-0e42-48e3-a4f2-c124484de031", "node_type": "1", "metadata": {}, "hash": "7efaffe5992df4e0558c9e67846a15c3b768d0d4108f42e4c3f0c4a995d91d8f", "class_name": "RelatedNodeInfo"}}, "text": "# step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: forward to generate response\n        response = dashscope.ImageSynthesis.call(\n            model=self.model_name,\n            prompt=prompt,\n            n=1,\n            **kwargs,\n        )\n        if response.status_code != HTTPStatus.OK:\n            error_msg = (\n                f\" Request id: {response.request_id},\"\n                f\" Status code: {response.status_code},\"\n                f\" error code: {response.code},\"\n                f\" error message: {response.message}.\"\n            )\n            raise RuntimeError(error_msg)\n\n        # step3: record the model api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"prompt\": prompt,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step4: update monitor accordingly\n        self.update_monitor(\n            call_counter=1,\n            **response.usage,\n        )\n\n        # step5: return response\n        images = response.output[\"results\"]\n        # Get image urls as a list\n        urls = [_[\"url\"] for _ in images]\n\n        if save_local:\n            # Return local url if save_local is True\n            urls = [file_manager.save_image(_) for _ in urls]\n        return ModelResponse(image_urls=urls, raw=response)", "start_char_idx": 12990, "end_char_idx": 14405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e674e15-0e42-48e3-a4f2-c124484de031": {"__data__": {"id_": "2e674e15-0e42-48e3-a4f2-c124484de031", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ccbd7742c0f54b2a9ea21bce00ea77ee80aaf0467622e5381f8fb8f90d71c55a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258", "node_type": "1", "metadata": {}, "hash": "36b983ef6b6b19134dcbb7f9a41f2e737c52e9a65655c9c27b28fa30042a4a55", "class_name": "RelatedNodeInfo"}}, "text": "class DashScopeTextEmbeddingWrapper(DashScopeWrapperBase):", "start_char_idx": 14408, "end_char_idx": 14466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258": {"__data__": {"id_": "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e674e15-0e42-48e3-a4f2-c124484de031", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9373fca0c372ff8581281d80c8980c5250bf6a40051ecc32d94a29ca5bdf13f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06", "node_type": "1", "metadata": {}, "hash": "e1c33025e2c04447f8b666cb410026e15ca9501672e354c55e76677a3a35136f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for DashScope Text Embedding API.\"\"\"\n\n    model_type: str = \"dashscope_text_embedding\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 14471, "end_char_idx": 14945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06": {"__data__": {"id_": "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7e329b0927eb245d2a1b194537a579e970dba5748eacc71e090803889a259ddd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c6707b3-f882-4cf1-bdc6-9209f0a6a562", "node_type": "1", "metadata": {}, "hash": "5be09ae6dee010cca44078f6c6df63f0f853d30e715129cdd3999e9ca81dc826", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        texts: Union[list[str], str],\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 14951, "end_char_idx": 15063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c6707b3-f882-4cf1-bdc6-9209f0a6a562": {"__data__": {"id_": "2c6707b3-f882-4cf1-bdc6-9209f0a6a562", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f0d30e0a7e72bdbcbf9a5af7b87ef3a27625804d418c6e866006af0af0cd1bc5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1be20fd3-0a46-47ab-ad57-58535db5324b", "node_type": "1", "metadata": {}, "hash": "5a52922597bcad752fd21e0b2b838aaff24c00267e3b6953a5621f1b4cd5002d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Embed the messages with DashScope Text Embedding API.\n\n        Args:\n            texts (`list[str]` or `str`):\n                The messages used to embed.\n            **kwargs (`Any`):\n                The keyword arguments to DashScope Text Embedding API,\n                e.g. `text_type`. Please refer to\n                https://help.aliyun.com/zh/dashscope/developer-reference/api-details-15\n                for more detailed arguments.\n\n        Returns:\n            `ModelResponse`:\n                A list of embeddings in embedding field and the raw\n                response in raw field.\n\n        Note:\n            `parse_func`, `fault_handler` and `max_retries` are reserved\n            for `_response_parse_decorator` to parse and check the response\n            generated by model wrapper. Their usages are listed as follows:\n                - `parse_func` is a callable function used to parse and\n                check the response generated by the model, which takes the\n                response as input.\n                - `max_retries` is the maximum number of retries when the\n                `parse_func` raise an exception.\n                - `fault_handler` is a callable function which is called\n                when the response generated by the model is invalid after\n                `max_retries` retries.\n        \"\"\"\n        # step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: forward to generate response", "start_char_idx": 15072, "end_char_idx": 16550, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1be20fd3-0a46-47ab-ad57-58535db5324b": {"__data__": {"id_": "1be20fd3-0a46-47ab-ad57-58535db5324b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c6707b3-f882-4cf1-bdc6-9209f0a6a562", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1bd8680f7c4226464ac5703979496a2f5d965ee9509ca4b312721a7129d043a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3229ae5-2418-419d-aebe-b156fea0e547", "node_type": "1", "metadata": {}, "hash": "57b1f733c3030cbc409635f275c770e18a2a6e0fc398840315f8d69050042993", "class_name": "RelatedNodeInfo"}}, "text": "response = dashscope.TextEmbedding.call(\n            input=texts,\n            model=self.model_name,\n            **kwargs,\n        )\n\n        if response.status_code != HTTPStatus.OK:\n            error_msg = (\n                f\" Request id: {response.request_id},\"\n                f\" Status code: {response.status_code},\"\n                f\" error code: {response.code},\"\n                f\" error message: {response.message}.\"\n            )\n            raise RuntimeError(error_msg)\n\n        # step3: record the model api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"input\": texts,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step4: update monitor accordingly\n        self.update_monitor(\n            call_counter=1,\n            **response.usage,\n        )\n\n        # step5: return response\n        if len(response.output[\"embeddings\"]) == 0:\n            return ModelResponse(\n                embedding=response.output[\"embedding\"][0],\n                raw=response,\n            )\n        else:\n            return ModelResponse(\n                embedding=[\n                    _[\"embedding\"] for _ in response.output[\"embeddings\"]\n                ],\n                raw=response,\n            )", "start_char_idx": 16559, "end_char_idx": 17895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3229ae5-2418-419d-aebe-b156fea0e547": {"__data__": {"id_": "c3229ae5-2418-419d-aebe-b156fea0e547", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1be20fd3-0a46-47ab-ad57-58535db5324b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "673f23d022bb5dbfb28f3282312f12731f19e3afd957ed6c9bcd3006f4fa1015", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4550218c-42d5-43b6-8042-ad70f9e8b527", "node_type": "1", "metadata": {}, "hash": "7af6435d37ee94d9b9dcee2959aa58c99dde6650081df09f925d9c5169653746", "class_name": "RelatedNodeInfo"}}, "text": "class DashScopeMultiModalWrapper(DashScopeWrapperBase):", "start_char_idx": 17898, "end_char_idx": 17953, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4550218c-42d5-43b6-8042-ad70f9e8b527": {"__data__": {"id_": "4550218c-42d5-43b6-8042-ad70f9e8b527", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3229ae5-2418-419d-aebe-b156fea0e547", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d6d34848355d939ec8461862f5d8d9d100c4359a6d08628283a8712885e212f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e06f7637-a766-48e1-9583-95970b8ac487", "node_type": "1", "metadata": {}, "hash": "f82c065aaafe7e0d720c17f1c518f41499e7d4975f45d5c236bb55b350e5b038", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for DashScope Multimodal API, refer to\n    https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-vl-api\n    \"\"\"\n\n    model_type: str = \"dashscope_multimodal\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 17958, "end_char_idx": 18759, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e06f7637-a766-48e1-9583-95970b8ac487": {"__data__": {"id_": "e06f7637-a766-48e1-9583-95970b8ac487", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4550218c-42d5-43b6-8042-ad70f9e8b527", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a8dc2e4cf38308441d69263e8a1e863607bfbd8a1fb7d3b186025d2bf84f1b58", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "783e84ed-57d3-4579-bb0a-f54699e15af6", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        messages: list,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 3126, "end_char_idx": 3224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "783e84ed-57d3-4579-bb0a-f54699e15af6": {"__data__": {"id_": "783e84ed-57d3-4579-bb0a-f54699e15af6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e06f7637-a766-48e1-9583-95970b8ac487", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6479e570851fb6b294951f5214adc37076c2e824a17939ec3e7ed2373928364e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ef315d5-d8ab-42e6-8450-12b1d68354ad", "node_type": "1", "metadata": {}, "hash": "5dd81d4309de99c9f8e70822e760f0eece8c33370ff5fb5da3af75bab0cbaab8", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ef315d5-d8ab-42e6-8450-12b1d68354ad": {"__data__": {"id_": "0ef315d5-d8ab-42e6-8450-12b1d68354ad", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "783e84ed-57d3-4579-bb0a-f54699e15af6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c47d8b5-e46c-4423-9a33-cc6791c588da", "node_type": "1", "metadata": {}, "hash": "f6a54bae4831680a933ff15b46f84ec46f04013b09c7a5f0ffb6e8e5aefccffe", "class_name": "RelatedNodeInfo"}}, "text": "\"", "start_char_idx": 24, "end_char_idx": 25, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c47d8b5-e46c-4423-9a33-cc6791c588da": {"__data__": {"id_": "6c47d8b5-e46c-4423-9a33-cc6791c588da", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ef315d5-d8ab-42e6-8450-12b1d68354ad", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0ae5a2694cece28fab68752f85716751f9478af2cc0bb5609070edff64d86a76", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e", "node_type": "1", "metadata": {}, "hash": "343e4ee9ae0f7d1c1001463ceeb770a89cdaf4379405b90d9c80aad2035dd253", "class_name": "RelatedNodeInfo"}}, "text": "# step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: forward to generate response\n        response = dashscope.MultiModalConversation.call(\n            model=self.model_name,\n            messages=messages,\n            **kwargs,\n        )\n\n        if response.status_code != HTTPStatus.OK:\n            error_msg = (\n                f\" Request id: {response.request_id},\"\n                f\" Status code: {response.status_code},\"\n                f\" error code: {response.code},\"\n                f\" error message: {response.message}.\"\n            )\n            raise RuntimeError(error_msg)\n\n        # step3: record the model api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"messages\": messages,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step4: update monitor accordingly\n        input_tokens = response.usage.get(\"input_tokens\", 0)\n        image_tokens = response.usage.get(\"image_tokens\", 0)\n        audio_tokens = response.usage.get(\"audio_tokens\", 0)\n        output_tokens = response.usage.get(\"output_tokens\", 0)\n        self.update_monitor(\n            call_counter=1,\n            prompt_tokens=input_tokens,\n            completion_tokens=output_tokens,\n            total_tokens=input_tokens\n            + output_tokens\n            + image_tokens\n            + audio_tokens,\n        )", "start_char_idx": 21043, "end_char_idx": 22526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e": {"__data__": {"id_": "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c47d8b5-e46c-4423-9a33-cc6791c588da", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "731940e32f0c0ca4dc02a3c31b4e6ef145ca07b7f69654b6efdcc6f1d62b3723", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e7e95d2-973d-4a5e-883e-a44891706d92", "node_type": "1", "metadata": {}, "hash": "2069c9086a6cd4a5d8a37782636053b641064f725ccf6c564da5eb7687f91e88", "class_name": "RelatedNodeInfo"}}, "text": "# step5: return response\n        return ModelResponse(\n            text=response.output[\"choices\"][0][\"message\"][\"content\"][0][\n                \"text\"\n            ],\n            raw=response,\n        )", "start_char_idx": 22536, "end_char_idx": 22737, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e7e95d2-973d-4a5e-883e-a44891706d92": {"__data__": {"id_": "3e7e95d2-973d-4a5e-883e-a44891706d92", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78a8324b0a0ebb54f73fbd131a584ee0632b2a6804044a97c3d7b41d6838fbf5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49a4c69f-5fee-4c17-9d72-4c39b4dce24e", "node_type": "1", "metadata": {}, "hash": "137773519aa6a68dbd15ddb47c475cf15c8603de40b0388fe2ab3b481443b8fa", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> List:", "start_char_idx": 7444, "end_char_idx": 7542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49a4c69f-5fee-4c17-9d72-4c39b4dce24e": {"__data__": {"id_": "49a4c69f-5fee-4c17-9d72-4c39b4dce24e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e7e95d2-973d-4a5e-883e-a44891706d92", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f86efd47fd2079a73350646be69fbe3e9e0f48dd87bffa8b687bd9a30d035f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0237c132-d746-46bb-870d-46354b5795dc", "node_type": "1", "metadata": {}, "hash": "49fa0c9f58d95a073d29bfc38bad6894f4c2f088d9f7f5a2d068ac783482fba7", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Fo", "start_char_idx": 7551, "end_char_idx": 7556, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0237c132-d746-46bb-870d-46354b5795dc": {"__data__": {"id_": "0237c132-d746-46bb-870d-46354b5795dc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49a4c69f-5fee-4c17-9d72-4c39b4dce24e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfa2d2daa3a8d71cc84cf62ca2e4f1d72efd46b74872be41173290a6f4b9c35d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b78c7020-c8bb-4c7e-816c-9f11886ad474", "node_type": "1", "metadata": {}, "hash": "2c206297cef10cf1b383192d70c18a89e48158c12b528c8481cc2fc3828a1a4f", "class_name": "RelatedNodeInfo"}}, "text": "rmat the messages for DashScope Multimodal API.\n\n        The multimodal API has the following requirements:\n        - The roles of messages must alternate between \"user\" and\n        \"assistant\".\n        - The message with the role \"system\" should be the first message\n        in the list.\n            - If the system message exists, then the second message must\n            have the role \"user\".\n        - The last message in the list should have the role \"user\".\n        - In each message, more than one figure is allowed.\n\n        With the above requirements, we format the messages as follows:\n        - If the first message is a system message, then we will keep it as\n        system prompt.\n        - We merge all messages into a dialogue history prompt in a single\n        message with the role \"user\".\n        - When there are multiple figures in the given messages, we will\n        attach it to the user message by order. Note if there are multiple\n        figures, this strategy may cause misunderstanding for the model. For\n        advanced solutions, developers are encouraged to implement their own\n        prompt engineering strategies.\n\n        The following is an example:\n\n        .. code-block:: python\n\n            prompt = model.format(\n                Msg(\n                    \"system\",\n                    \"You're a helpful assistant\",\n                    role=\"system\", url=\"figure1\"\n                ),\n                Msg(\n                    \"Bob\",\n                    \"How about this picture?\",\n                    role=\"assistant\", url=\"figure2\"\n                ),\n                Msg(\n                    \"user\",\n                    \"It's wonderful! How about mine?\",\n                    role=\"user\", image=\"figure3\"\n                )\n            )\n\n        The prompt will be as follows:\n\n        .. code-block:: python\n\n            [\n                {\n                    \"role\": \"system\",\n                    \"content\": [\n                        {\"text\": \"You are a helpful assistant\"},\n                        {\"image\": \"figure1\"}\n                    ]\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\"image\": \"figure2\"},\n                        {\"image\": \"figure3\"},\n                        {\n                            \"text\": (\n                                \"## Dialogue History\\n\"", "start_char_idx": 22855, "end_char_idx": 25256, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b78c7020-c8bb-4c7e-816c-9f11886ad474": {"__data__": {"id_": "b78c7020-c8bb-4c7e-816c-9f11886ad474", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0237c132-d746-46bb-870d-46354b5795dc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "997a4e998959273342576ee1284c316c69e3d999cf11ca19918bfe86b396a27a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2380615-08da-46cc-ab66-7a4f33c80b91", "node_type": "1", "metadata": {}, "hash": "5dd81d4309de99c9f8e70822e760f0eece8c33370ff5fb5da3af75bab0cbaab8", "class_name": "RelatedNodeInfo"}}, "text": "\"Bob: How about this picture?\\n\"", "start_char_idx": 25289, "end_char_idx": 25321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2380615-08da-46cc-ab66-7a4f33c80b91": {"__data__": {"id_": "c2380615-08da-46cc-ab66-7a4f33c80b91", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b78c7020-c8bb-4c7e-816c-9f11886ad474", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "02983ca44c24de7dea473f919149db1f3cbd84e56c1897f60cf96784b6eb174b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd", "node_type": "1", "metadata": {}, "hash": "fdbe16893310e608d1c8e557c5ffffa1a9e59df95747dc924781e789857780a5", "class_name": "RelatedNodeInfo"}}, "text": "\"", "start_char_idx": 24, "end_char_idx": 25, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd": {"__data__": {"id_": "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2380615-08da-46cc-ab66-7a4f33c80b91", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0ae5a2694cece28fab68752f85716751f9478af2cc0bb5609070edff64d86a76", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6e6765e-7840-4715-8a42-cf33b9862e3e", "node_type": "1", "metadata": {}, "hash": "8ae060d5af37ab10b9f1cea03362030558c74c50446dcb11ed872e11f657de79", "class_name": "RelatedNodeInfo"}}, "text": "# Parse all information into a list of messages\n        input_msgs = []\n        for _ in args:\n            if isinstance(_, MessageBase):\n                input_msgs.append(_)\n            elif isinstance(_, list) and all(\n                isinstance(__, MessageBase) for __ in _\n            ):\n                input_msgs.extend(_)\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(_)}.\",\n                )\n\n        messages = []\n\n        # record dialog history as a list of strings\n        dialogue = []\n        image_or_audio_dicts = []\n        for i, unit in enumerate(input_msgs):\n            if i == 0 and unit.role == \"system\":\n                # system prompt\n                content = self._convert_url(unit.url)\n                content.append({\"text\": _convert_to_str(unit.content)})\n\n                messages.append(\n                    {\n                        \"role\": unit.role,\n                        \"content\": content,\n                    },\n                )\n            else:\n                # text message\n                dialogue.append(\n                    f\"{unit.name}: {_convert_to_str(unit.content)}\",\n                )\n                # image and audio\n                image_or_audio_dicts.extend(self._convert_url(unit.url))\n\n        dialogue_history = \"\\n\".join(dialogue)\n\n        user_content_template = \"## Dialogue History\\n{dialogue_history}\"", "start_char_idx": 26058, "end_char_idx": 27546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6e6765e-7840-4715-8a42-cf33b9862e3e": {"__data__": {"id_": "d6e6765e-7840-4715-8a42-cf33b9862e3e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c8fae4c7c9ae57f28b7e2e74ff30ab266493dd26180b4bb86bd7dfa20fde2dbd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a11e9824-2869-46ed-a838-676984557a37", "node_type": "1", "metadata": {}, "hash": "e22f73038b4eed8984c496b7e9a1c0beb31e11fad644c3cfc62052bc890f799d", "class_name": "RelatedNodeInfo"}}, "text": "messages.append(\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    # Place the image or audio before the dialogue history\n                    *image_or_audio_dicts,\n                    {\n                        \"text\": user_content_template.format(\n                            dialogue_history=dialogue_history,\n                        ),\n                    },\n                ],\n            },\n        )\n\n        return messages", "start_char_idx": 27556, "end_char_idx": 28031, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a11e9824-2869-46ed-a838-676984557a37": {"__data__": {"id_": "a11e9824-2869-46ed-a838-676984557a37", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "78f5431df1fae80792ac746e97c17f390ba1f35b27b535a10de16a3105b6fc34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6e6765e-7840-4715-8a42-cf33b9862e3e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "40242aeb184da90756565580212c2f734ea555442aaf174e9a757481744905ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0495bfe-1a0c-4cd1-ae66-40883828c2b4", "node_type": "1", "metadata": {}, "hash": "2b36d52794acef8dd669f83a57b6c2483c86fb250ee805631723f06182d1df1b", "class_name": "RelatedNodeInfo"}}, "text": "def _convert_url(self, url: Union[str, Sequence[str], None]) -> List[dict]:\n        \"\"\"Convert the url to the format of DashScope API. Note for local\n        files, a prefix \"file://\" will be added.\n\n        Args:\n            url (`Union[str, Sequence[str], None]`):\n                A string of url of a list of urls to be converted.\n\n        Returns:\n            `List[dict]`:\n                A list of dictionaries with key as the type of the url\n                and value as the url. Only \"image\" and \"audio\" are supported.\n        \"\"\"\n        if url is None:\n            return []\n\n        if isinstance(url, str):\n            url_type = _guess_type_by_extension(url)\n            if url_type in [\"audio\", \"image\"]:\n                # Add prefix for local files\n                if os.path.exists(url):\n                    url = \"file://\" + url\n                return [{url_type: url}]\n            else:\n                # skip unsupported url\n                logger.warning(\n                    f\"Skip unsupported url ({url_type}), \"\n                    f\"expect image or audio.\",\n                )\n                return []\n        elif isinstance(url, list):\n            dicts = []\n            for _ in url:\n                dicts.extend(self._convert_url(_))\n            return dicts\n        else:\n            raise TypeError(\n                f\"Unsupported url type {type(url)}, \" f\"str or list expected.\",\n            )", "start_char_idx": 28037, "end_char_idx": 29460, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0495bfe-1a0c-4cd1-ae66-40883828c2b4": {"__data__": {"id_": "c0495bfe-1a0c-4cd1-ae66-40883828c2b4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a11e9824-2869-46ed-a838-676984557a37", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fe7a3521076997e4ab75b04ca7dab5832b52a68f4af4d78b51444716a400059c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6472245-626a-4296-a004-310f3b976681", "node_type": "1", "metadata": {}, "hash": "010733e8f6f57019cf74941ccd67a3b21f9ff18a4361bb970cb5f1c479e24ee4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Google Gemini model wrapper.\"\"\"\nimport os\nfrom abc import ABC\nfrom collections.abc import Iterable\nfrom typing import Sequence, Union, Any, List\n\nfrom loguru import logger\n\nfrom agentscope.message import Msg, MessageBase\nfrom agentscope.models import ModelWrapperBase, ModelResponse\nfrom agentscope.utils.tools import _convert_to_str\n\ntry:\n    import google.generativeai as genai\nexcept ImportError:\n    genai = None", "start_char_idx": 0, "end_char_idx": 443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6472245-626a-4296-a004-310f3b976681": {"__data__": {"id_": "f6472245-626a-4296-a004-310f3b976681", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0495bfe-1a0c-4cd1-ae66-40883828c2b4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8d574267561099d4d2123f086977b9df5d1a891c2eb530b9ed8c0f691f16256f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffc324c5-0231-4ae5-899f-8e772facf936", "node_type": "1", "metadata": {}, "hash": "844401b806a4d90d0fbd64d86673e5a1adc4bba4ef04e1fb9677609e6da93b69", "class_name": "RelatedNodeInfo"}}, "text": "class GeminiWrapperBase(ModelWrapperBase, ABC):", "start_char_idx": 446, "end_char_idx": 493, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffc324c5-0231-4ae5-899f-8e772facf936": {"__data__": {"id_": "ffc324c5-0231-4ae5-899f-8e772facf936", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6472245-626a-4296-a004-310f3b976681", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "983ce0e56adc0b5635e48e7ffdcf03502c9321eb36ee2fdffe38d1f27ce0fce0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca4b256e-37d1-4dc1-960f-82377c42dd29", "node_type": "1", "metadata": {}, "hash": "1c698a756db34d5855c66d9a1ca6098db299a2a41afc3ef27616a0359e2b0f9f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The base class for Google Gemini model wrapper.\"\"\"\n\n    _generation_method = None\n    \"\"\"The generation method used in `__call__` function, which is used to\n    filter models in `list_models` function.\"\"\"\n\n    def __init__(\n        self,\n        config_name: str,\n        model_name: str,\n        api_key: str = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize the wrapper for Google Gemini model.\n\n        Args:\n            model_name (`str`):\n                The name of the model.\n            api_key (`str`, defaults to `None`):\n                The api_key for the model. If it is not provided, it will be\n                loaded from environment variable.\n        \"\"\"\n        super().__init__(config_name=config_name)\n\n        # Load the api_key from argument or environment variable\n        api_key = api_key or os.environ.get(\"GOOGLE_API_KEY\")\n\n        if api_key is None:\n            raise ValueError(\n                \"Google api_key must be provided or set as an \"\n                \"environment variable.\",\n            )\n\n        genai.configure(api_key=api_key)\n\n        self.model_name = model_name\n\n        self._register_default_metrics()\n\n    def _register_default_metrics(self) -> None:\n        \"\"\"Register the default metrics for the model.\"\"\"\n        raise NotImplementedError(\n            \"The method `_register_default_metrics` must be implemented.\",\n        )", "start_char_idx": 498, "end_char_idx": 1895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca4b256e-37d1-4dc1-960f-82377c42dd29": {"__data__": {"id_": "ca4b256e-37d1-4dc1-960f-82377c42dd29", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffc324c5-0231-4ae5-899f-8e772facf936", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4ca084448cf3a5ffd045fda48158d35b86f542cd2d8392ce66e6ae949dee535c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56a49ea1-71ba-4c9b-b038-89cbb7fbe844", "node_type": "1", "metadata": {}, "hash": "04b5f1de8187461ee03f6d248e2dadc7db9cc5623592ebe4e90ab35a66b841a5", "class_name": "RelatedNodeInfo"}}, "text": "def list_models(self) -> Sequence:\n        \"\"\"List all available models for this API calling.\"\"\"\n        support_models = list(genai.list_models())\n\n        if self.generation_method is None:\n            return support_models\n        else:\n            return [\n                _\n                for _ in support_models\n                if self._generation_method in _.supported_generation_methods\n            ]\n\n    def __call__(self, *args: Any, **kwargs: Any) -> ModelResponse:\n        \"\"\"Processing input with the model.\"\"\"\n        raise NotImplementedError(\n            f\"Model Wrapper [{type(self).__name__}]\"\n            f\" is missing the  the required `__call__`\"\n            f\" method.\",\n        )", "start_char_idx": 1901, "end_char_idx": 2605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56a49ea1-71ba-4c9b-b038-89cbb7fbe844": {"__data__": {"id_": "56a49ea1-71ba-4c9b-b038-89cbb7fbe844", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca4b256e-37d1-4dc1-960f-82377c42dd29", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8c35764f37c39abbe398649a69ce6684e5ab802c7dafb7ca96d5b5ba535a4f7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6c4ae82-eb15-4135-a8d5-6064710c408f", "node_type": "1", "metadata": {}, "hash": "8da4f699d334de4bf7d0f8ff30bb5936bd6bbf1572d781610216c01ce2f4d4bb", "class_name": "RelatedNodeInfo"}}, "text": "class GeminiChatWrapper(GeminiWrapperBase):", "start_char_idx": 2608, "end_char_idx": 2651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6c4ae82-eb15-4135-a8d5-6064710c408f": {"__data__": {"id_": "f6c4ae82-eb15-4135-a8d5-6064710c408f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56a49ea1-71ba-4c9b-b038-89cbb7fbe844", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8074974d8f6c7e801da3665c92fd787b0f742d4cb6c07141c14b341ced489f3a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15831b4a-4062-4ff2-a66c-2c2c528cb106", "node_type": "1", "metadata": {}, "hash": "5e272e88855e7700030541fa0f11cf08876ea988fba01a3a84e5daf33b2f89ae", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The wrapper for Google Gemini chat model, e.g. gemini-pro\"\"\"\n\n    model_type: str = \"gemini_chat\"\n    \"\"\"The type of the model, which is used in model configuration.\"\"\"\n\n    generation_method = \"generateContent\"\n    \"\"\"The generation method used in `__call__` function.\"\"\"\n\n    def __init__(\n        self,\n        config_name: str,\n        model_name: str,\n        api_key: str = None,\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(\n            config_name=config_name,\n            model_name=model_name,\n            api_key=api_key,\n            **kwargs,\n        )\n\n        # Create the generative model\n        self.model = genai.GenerativeModel(model_name, **kwargs)", "start_char_idx": 2656, "end_char_idx": 3345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15831b4a-4062-4ff2-a66c-2c2c528cb106": {"__data__": {"id_": "15831b4a-4062-4ff2-a66c-2c2c528cb106", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6c4ae82-eb15-4135-a8d5-6064710c408f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a0741684c3ee448a026f5b1b9f8452ae22228984323408a45eadaffff9215a61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58e69df0-da02-4822-885e-3a0275d7f722", "node_type": "1", "metadata": {}, "hash": "f61f5daf1ca18346287760be78b4ff52f0ab3c0b7100962cbae11b20902dd60b", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        contents: Union[Sequence, str],\n        stream: bool = False,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 3351, "end_char_idx": 3495, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58e69df0-da02-4822-885e-3a0275d7f722": {"__data__": {"id_": "58e69df0-da02-4822-885e-3a0275d7f722", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15831b4a-4062-4ff2-a66c-2c2c528cb106", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a73204916bf7631c5eb3df7d57ef2d12309587e6e5fd8b75be01b0219fb758ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60f2dd2a-4b3b-4e12-af83-8691571b1eea", "node_type": "1", "metadata": {}, "hash": "cedeb96e35639ee90aca54532cede004dffaa61eebaedf6d911822e39bf3874d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Generate response for the given contents.\n\n        Args:\n            contents (`Union[Sequence, str]`):\n                The content to generate response.\n            stream (`bool`, defaults to `False`):\n                Whether to use stream mode.\n            **kwargs:\n                The additional arguments for generating response.\n\n        Returns:\n            `ModelResponse`:\n                The response text in text field, and the raw response in raw\n                field.\n        \"\"\"\n        # step1: checking messages\n        if isinstance(contents, Iterable):\n            pass\n        elif not isinstance(contents, str):\n            logger.warning(\n                \"The input content is not a string or a list of \"\n                \"messages, which may cause unexpected behavior.\",\n            )\n\n        # step2: forward to generate response\n        # TODO: support response in stream mode\n        response = self.model.generate_content(\n            contents,\n            stream=stream,\n            **kwargs,\n        )\n\n        # step3: record the api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"contents\": contents,\n                \"stream\": stream,\n                **kwargs,\n            },\n            response=str(response),\n        )\n\n        # step5: update monitor accordingly\n        # TODO: Up to 2024/03/11, the response from Gemini doesn't contain\n        #  the detailed information about cost. Here we simply count", "start_char_idx": 3504, "end_char_idx": 5001, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60f2dd2a-4b3b-4e12-af83-8691571b1eea": {"__data__": {"id_": "60f2dd2a-4b3b-4e12-af83-8691571b1eea", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58e69df0-da02-4822-885e-3a0275d7f722", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5736bb50d272589322348772db7bdb3df49e17f6d5e9c3fae56f4937f0406e43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c5c0e5a-3157-4202-b233-8499fee1b519", "node_type": "1", "metadata": {}, "hash": "43f767fdc98011cc0d05bfb49d34316de37d247ddb49238f34758ab0f275fbe8", "class_name": "RelatedNodeInfo"}}, "text": "#  the tokens manually.\n        token_prompt = self.model.count_tokens(contents).total_tokens\n        token_response = self.model.count_tokens(response.text).total_tokens\n        self.update_monitor(\n            call_counter=1,\n            completion_tokens=token_response,\n            prompt_tokens=token_prompt,\n            total_tokens=token_prompt + token_response,\n        )\n\n        # step6: return response\n        return ModelResponse(\n            text=response.text,\n            raw=response,\n        )", "start_char_idx": 5010, "end_char_idx": 5521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c5c0e5a-3157-4202-b233-8499fee1b519": {"__data__": {"id_": "3c5c0e5a-3157-4202-b233-8499fee1b519", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60f2dd2a-4b3b-4e12-af83-8691571b1eea", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "268339a9d9ffdbca7f5a754507e8aaa830afcf76325b9c1b745aa7503a9825f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe6a9804-a6d0-4200-8f9d-409370ed1203", "node_type": "1", "metadata": {}, "hash": "1a80d86c5d92d0abf316355a78ba1cb82418fb23c968292db5611c6feb561822", "class_name": "RelatedNodeInfo"}}, "text": "def _register_default_metrics(self) -> None:\n        \"\"\"Register the default metrics for the model.\"\"\"\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 5527, "end_char_idx": 6099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe6a9804-a6d0-4200-8f9d-409370ed1203": {"__data__": {"id_": "fe6a9804-a6d0-4200-8f9d-409370ed1203", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c5c0e5a-3157-4202-b233-8499fee1b519", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3e3efe7effb63cdf03b70e8dd1fe2be17275a681ed2ef161471cc75da265d435", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c8d8bbf-bdd5-49d2-88d9-da658ae23448", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> List[dict]:", "start_char_idx": 6105, "end_char_idx": 6209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c8d8bbf-bdd5-49d2-88d9-da658ae23448": {"__data__": {"id_": "7c8d8bbf-bdd5-49d2-88d9-da658ae23448", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe6a9804-a6d0-4200-8f9d-409370ed1203", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9043b49eaa510b619df00ff225adbd7852940ce836e11be3a038b943b0c95664", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84fcef88-f6ae-4255-b556-ce142aafc677", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84fcef88-f6ae-4255-b556-ce142aafc677": {"__data__": {"id_": "84fcef88-f6ae-4255-b556-ce142aafc677", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c8d8bbf-bdd5-49d2-88d9-da658ae23448", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2463efc6bad0f426a0bc30f57b9c7cae1d8ae37d5b75470ff4f5a3613bd38e90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc8d88fd-923a-4207-bba6-28daabdf974f", "node_type": "1", "metadata": {}, "hash": "cb7a2bcc6769d9ee8228ff48f3d7c3163bbe7adca3dd352cd608a6946eab7164", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc8d88fd-923a-4207-bba6-28daabdf974f": {"__data__": {"id_": "cc8d88fd-923a-4207-bba6-28daabdf974f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84fcef88-f6ae-4255-b556-ce142aafc677", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2463efc6bad0f426a0bc30f57b9c7cae1d8ae37d5b75470ff4f5a3613bd38e90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20615756-a358-40c0-b84c-fd8c37bcccde", "node_type": "1", "metadata": {}, "hash": "5e72a78b02be2aa4b6e4e834e62c70a3e16052ce5d77908b545a8a4c6bbffbef", "class_name": "RelatedNodeInfo"}}, "text": "input_msgs = []\n        for _ in args:\n            if isinstance(_, MessageBase):\n                input_msgs.append(_)\n            elif isinstance(_, list) and all(\n                isinstance(__, MessageBase) for __ in _\n            ):\n                input_msgs.extend(_)\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(_)}.\",\n                )\n\n        # record dialog history as a list of strings\n        sys_prompt = None\n        dialogue = []\n        for i, unit in enumerate(input_msgs):\n            if i == 0 and unit.role == \"system\":\n                # system prompt\n                sys_prompt = _convert_to_str(unit.content)\n            else:\n                # Merge all messages into a dialogue history prompt\n                dialogue.append(\n                    f\"{unit.name}: {_convert_to_str(unit.content)}\",\n                )\n\n        dialogue_history = \"\\n\".join(dialogue)\n\n        if sys_prompt is None:\n            user_content_template = \"## Dialogue History\\n{dialogue_history}\"\n        else:\n            user_content_template = (\n                \"{sys_prompt}\\n\"\n                \"\\n\"\n                \"## Dialogue History\\n\"\n                \"{dialogue_history}\"\n            )", "start_char_idx": 7888, "end_char_idx": 9200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20615756-a358-40c0-b84c-fd8c37bcccde": {"__data__": {"id_": "20615756-a358-40c0-b84c-fd8c37bcccde", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc8d88fd-923a-4207-bba6-28daabdf974f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27b0556de00b0d3ba0a100236b81a1586c4c5b8b5f7beaeb89fe029ebe1405dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99724ed3-14f3-47b7-96e4-b779d5421e96", "node_type": "1", "metadata": {}, "hash": "ad6ba3b9a879156a12a5cce5d27e47fde6b011a49ae3fabd562f78e30b34f7ee", "class_name": "RelatedNodeInfo"}}, "text": "messages = [\n            {\n                \"role\": \"user\",\n                \"parts\": [\n                    user_content_template.format(\n                        sys_prompt=sys_prompt,\n                        dialogue_history=dialogue_history,\n                    ),\n                ],\n            },\n        ]\n\n        return messages", "start_char_idx": 9210, "end_char_idx": 9543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99724ed3-14f3-47b7-96e4-b779d5421e96": {"__data__": {"id_": "99724ed3-14f3-47b7-96e4-b779d5421e96", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20615756-a358-40c0-b84c-fd8c37bcccde", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1fc42c0a519dfd9d556f59caa6e9e11aa507e2530ad74de477c67cbf77ea701b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58c1e7d9-d347-45b9-932e-42f00876b4d6", "node_type": "1", "metadata": {}, "hash": "c68b70188c1c662baaed316721ec4fbac521be0b7aa365e135ddb1b6aa75e9c7", "class_name": "RelatedNodeInfo"}}, "text": "class GeminiEmbeddingWrapper(GeminiWrapperBase):", "start_char_idx": 9546, "end_char_idx": 9594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58c1e7d9-d347-45b9-932e-42f00876b4d6": {"__data__": {"id_": "58c1e7d9-d347-45b9-932e-42f00876b4d6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "99724ed3-14f3-47b7-96e4-b779d5421e96", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e03b0b2cb2f584962364f024164903d5cc2588bab0706eb595587be3dd84a60d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dfcecdf-6e09-4a9b-a688-15a28025a576", "node_type": "1", "metadata": {}, "hash": "19cdba9508a049ec88efe54de065ef03136e56c32c56997597d6bb1ee6dec5e6", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The wrapper for Google Gemini embedding model,\n    e.g. models/embedding-001\"\"\"\n\n    model_type: str = \"gemini_embedding\"\n    \"\"\"The type of the model, which is used in model configuration.\"\"\"\n\n    _generation_method = \"embedContent\"\n    \"\"\"The generation method used in `__call__` function.\"\"\"", "start_char_idx": 9599, "end_char_idx": 9896, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dfcecdf-6e09-4a9b-a688-15a28025a576": {"__data__": {"id_": "7dfcecdf-6e09-4a9b-a688-15a28025a576", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58c1e7d9-d347-45b9-932e-42f00876b4d6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ef16d6a1b7c15f344ad6b557dc49ed1690916c74f3087c0965a4a5b7291c36b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29e80fb3-98da-4733-b9ea-b2f26bda6889", "node_type": "1", "metadata": {}, "hash": "59eb1da6b70fb75078ea1ada41664cdece6721ae9a1b28de1f7521e7525f5019", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        content: Union[Sequence[Msg], str],\n        task_type: str = None,\n        title: str = None,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 9902, "end_char_idx": 10078, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29e80fb3-98da-4733-b9ea-b2f26bda6889": {"__data__": {"id_": "29e80fb3-98da-4733-b9ea-b2f26bda6889", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dfcecdf-6e09-4a9b-a688-15a28025a576", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "db924a34035055607bc7720c451ce70f3ce069d5aa703f98826bc9e16a139b8d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "494dc451-1827-4e9f-9740-5376a0c9d99a", "node_type": "1", "metadata": {}, "hash": "698de7ac40e2202637c4ebc1608ec0c01a342cecf54672ec7f0e31361b7ceae8", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Generate embedding for the given content. More detailed information\n        please refer to\n        https://ai.google.dev/tutorials/python_quickstart#use_embeddings\n\n        Args:\n            content (`Union[Sequence[Msg], str]`):\n                The content to generate embedding.\n            task_type (`str`, defaults to `None`):\n                The type of the task.\n            title (`str`, defaults to `None`):\n                The title of the content.\n            **kwargs:\n                The additional arguments for generating embedding.\n\n        Returns:\n            `ModelResponse`:\n                The response embedding in embedding field, and the raw response\n                in raw field.\n        \"\"\"\n\n        # step1: forward to generate response\n        response = genai.embed_content(\n            model=self.model_name,\n            content=content,\n            task_type=task_type,\n            title=title,\n            **kwargs,\n        )\n\n        # step2: record the api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"content\": content,\n                \"task_type\": task_type,\n                \"title\": title,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # TODO: Up to 2023/03/11, the embedding model doesn't support to\n        #  count tokens.\n        # step3: update monitor accordingly\n        self.update_monitor(call_counter=1)", "start_char_idx": 10087, "end_char_idx": 11540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "494dc451-1827-4e9f-9740-5376a0c9d99a": {"__data__": {"id_": "494dc451-1827-4e9f-9740-5376a0c9d99a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29e80fb3-98da-4733-b9ea-b2f26bda6889", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9c28245168077f7b60b5085b60e1c459f20fed1bd550e49c54dbb765cd280e9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7cb4da1e-58f7-4f77-8334-a65b4ceceb16", "node_type": "1", "metadata": {}, "hash": "4be3c3db5025524e65e31beddb6320d724ba8d3e5c3a2aba2c38e718d64213a1", "class_name": "RelatedNodeInfo"}}, "text": "return ModelResponse(\n            raw=response,\n            embedding=response[\"embedding\"],\n        )", "start_char_idx": 11550, "end_char_idx": 11652, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cb4da1e-58f7-4f77-8334-a65b4ceceb16": {"__data__": {"id_": "7cb4da1e-58f7-4f77-8334-a65b4ceceb16", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "74afee058fd1207becaaf638ef0e1f741541fe95bfa0ea67a69afe546d1afb81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "494dc451-1827-4e9f-9740-5376a0c9d99a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "976ee5b0f0623a8548aee59fb5aa34a8886f25e8ab219b499a84bf6a22fd1c15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "621294b8-d384-4b45-93ad-d4b76e24bdbe", "node_type": "1", "metadata": {}, "hash": "64d93484a00bbb64f1192cf9bba18f8befaf5eb47fd68c3ef21e9c7c0455aa82", "class_name": "RelatedNodeInfo"}}, "text": "def _register_default_metrics(self) -> None:\n        \"\"\"Register the default metrics for the model.\"\"\"\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )", "start_char_idx": 5527, "end_char_idx": 5745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "621294b8-d384-4b45-93ad-d4b76e24bdbe": {"__data__": {"id_": "621294b8-d384-4b45-93ad-d4b76e24bdbe", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cb4da1e-58f7-4f77-8334-a65b4ceceb16", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2b0d141fe4dbbc32dbe77086ad0d5653f0b10ca4ed6fcef8264c28fbdad59deb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1eae6bca-106b-4515-a4aa-04108bb80f97", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-", "start_char_idx": 0, "end_char_idx": 23, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1eae6bca-106b-4515-a4aa-04108bb80f97": {"__data__": {"id_": "1eae6bca-106b-4515-a4aa-04108bb80f97", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "621294b8-d384-4b45-93ad-d4b76e24bdbe", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "75207f53d30ec4258735f69e2610813614433e79d9d27a8f54586a7a8d9980ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4": {"__data__": {"id_": "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1eae6bca-106b-4515-a4aa-04108bb80f97", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27ed4f495a5081d8c1e5ae9b9f0b8db9f22ed32b791b7803b114460ac74ce495", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "474e22d0-e39d-47b3-99c0-12bf087ed464", "node_type": "1", "metadata": {}, "hash": "3778b818e8a195a11bb2d6fe257332bb4af45cb781ef02ab2cf72c15a0421dc1", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "474e22d0-e39d-47b3-99c0-12bf087ed464": {"__data__": {"id_": "474e22d0-e39d-47b3-99c0-12bf087ed464", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27ed4f495a5081d8c1e5ae9b9f0b8db9f22ed32b791b7803b114460ac74ce495", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f333c670-231d-4de2-b32a-d725dac6aa2d", "node_type": "1", "metadata": {}, "hash": "0ae07b6b52a60faa4092ce565b2b837691a14e3db5221db5fd7975cdca4db8e3", "class_name": "RelatedNodeInfo"}}, "text": "import inspect\nimport time\nfrom abc import ABCMeta\nfrom functools import wraps\nfrom typing import Sequence, Any, Callable, Union, List\n\nfrom loguru import logger\n\nfrom agentscope.utils import QuotaExceededError\nfrom .response import ResponseParsingError, ModelResponse\n\nfrom ..file_manager import file_manager\nfrom ..message import MessageBase\nfrom ..utils import MonitorFactory\nfrom ..utils.monitor import get_full_name\nfrom ..utils.tools import _get_timestamp\nfrom ..constants import _DEFAULT_MAX_RETRIES\nfrom ..constants import _DEFAULT_RETRY_INTERVAL", "start_char_idx": 1560, "end_char_idx": 2114, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f333c670-231d-4de2-b32a-d725dac6aa2d": {"__data__": {"id_": "f333c670-231d-4de2-b32a-d725dac6aa2d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "474e22d0-e39d-47b3-99c0-12bf087ed464", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4efd4b456e7ec3eb70d63459aa7dff4e432a5568ec3081606531fc9be04ffd1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6fb7b0ef-28f0-4114-892d-07fc2c8479a3", "node_type": "1", "metadata": {}, "hash": "b70403ba11b10860e86cd67d57d2717576a21012e2cced48f00916b817bcca40", "class_name": "RelatedNodeInfo"}}, "text": "def _response_parse_decorator(\n    model_call: Callable,\n) -> Callable:", "start_char_idx": 2117, "end_char_idx": 2188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fb7b0ef-28f0-4114-892d-07fc2c8479a3": {"__data__": {"id_": "6fb7b0ef-28f0-4114-892d-07fc2c8479a3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f333c670-231d-4de2-b32a-d725dac6aa2d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6f86e5d2104ef9defd2e7592e18520d2f46b62b5c7623f5e28ee2eeb00c5b3b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cba04589-577a-43d9-9369-04a1ac5eca49", "node_type": "1", "metadata": {}, "hash": "1e4ff706779b92c96b20e0561bba10573875d14a2eace9a037f59dd135b77aa7", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A decorator for parsing the response of model call. It will take\n    `parse_func`, `fault_handler` and `max_retries` as arguments. The\n    detailed process is as follows:\n\n        1. If `parse_func` is provided, then the response will be parsed first.\n\n        2. If the parsing fails (throws an exception), then response generation\n        will be repeated for `max_retries` times and parsed again.\n\n        3. After `max_retries` times, if the parsing still fails, then if\n        `fault_handler` is provided, the response will be processed by\n        `fault_handler`.\n    \"\"\"\n\n    # check if the decorated `model_call` function uses the default\n    # arguments of this decorator.\n    parameters = inspect.signature(model_call).parameters\n\n    for name in parameters.keys():\n        if name in [\"parse_func\", \"max_retries\"]:\n            logger.warning(\n                f\"The argument {name} is used by the decorator, \"\n                f\"which will not be passed to the model call \"\n                f\"function.\",\n            )", "start_char_idx": 2193, "end_char_idx": 3223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cba04589-577a-43d9-9369-04a1ac5eca49": {"__data__": {"id_": "cba04589-577a-43d9-9369-04a1ac5eca49", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6fb7b0ef-28f0-4114-892d-07fc2c8479a3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e14314c1c9ac6904ca8dab15d04206203eda8a615ae58000f5c46d0654bd211", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ad8a426-6ebc-49e2-bf63-f197e31bf861", "node_type": "1", "metadata": {}, "hash": "7db7c2d7c2c5cefa14a736f421a19accaf8774c274e5a32ea8c25ffb6b323a2b", "class_name": "RelatedNodeInfo"}}, "text": "@wraps(model_call)", "start_char_idx": 3229, "end_char_idx": 3247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ad8a426-6ebc-49e2-bf63-f197e31bf861": {"__data__": {"id_": "5ad8a426-6ebc-49e2-bf63-f197e31bf861", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cba04589-577a-43d9-9369-04a1ac5eca49", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6e035afee4ae3b30f6998f45553904de01787bc4da8234e55054af35251ec69a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27691286-5e9d-4e3d-966a-d2a7fe3bb21b", "node_type": "1", "metadata": {}, "hash": "efb30bf711b806659f3c03c34356a7305b89706183f5b05ca9a89fa4274d56fc", "class_name": "RelatedNodeInfo"}}, "text": "def checking_wrapper(self: Any, *args: Any, **kwargs: Any) -> dict:\n        # Step1: Extract parse_func and fault_handler", "start_char_idx": 3252, "end_char_idx": 3373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27691286-5e9d-4e3d-966a-d2a7fe3bb21b": {"__data__": {"id_": "27691286-5e9d-4e3d-966a-d2a7fe3bb21b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ad8a426-6ebc-49e2-bf63-f197e31bf861", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "48170d6b95b8c7316602b2e80815c4209cda2144a19c1d93d404eb69d9a27804", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b90b0442-2079-4355-a317-d489d27b1197", "node_type": "1", "metadata": {}, "hash": "7320a8fc7941b1ea61411bd894712de9cdfe690bdad2e62edcca771879796126", "class_name": "RelatedNodeInfo"}}, "text": "parse_func = kwargs.pop(\"parse_func\", None)\n        fault_handler = kwargs.pop(\"fault_handler\", None)\n        max_retries = kwargs.pop(\"max_retries\", None) or _DEFAULT_MAX_RETRIES\n\n        # Step2: Call the model and parse the response\n        # Return the response directly if parse_func is not provided\n        if parse_func is None:\n            return model_call(self, *args, **kwargs)\n\n        # Otherwise, try to parse the response", "start_char_idx": 3382, "end_char_idx": 3818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b90b0442-2079-4355-a317-d489d27b1197": {"__data__": {"id_": "b90b0442-2079-4355-a317-d489d27b1197", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27691286-5e9d-4e3d-966a-d2a7fe3bb21b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a1b1eec557edbfa41b3b13c10ada3c1dc3b99012faaa8163e25ad670cdc0ac98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8326f76-fef2-44dd-b25d-0f4f307aa49e", "node_type": "1", "metadata": {}, "hash": "4cc8c193b726a7e83f2c5684a97449995d72440f558894dd93a6bbba7b727f97", "class_name": "RelatedNodeInfo"}}, "text": "for itr in range(1, max_retries + 1):\n            # Call the model\n            response = model_call(self, *args, **kwargs)\n\n            # Parse the response if needed\n            try:\n                return parse_func(response)\n            except Exception as e:\n                if itr < max_retries:\n                    logger.warning(\n                        f\"Fail to parse response ({itr}/{max_retries}):\\n\"\n                        f\"{response}.\\n\"\n                        f\"{e.__class__.__name__}: {e}\",\n                    )\n                    time.sleep(_DEFAULT_RETRY_INTERVAL * itr)\n                else:\n                    if fault_handler is not None and callable(fault_handler):\n                        return fault_handler(response)\n                    else:\n                        error_info = f\"{e.__class__.__name__}: {e}\"\n                        raise ResponseParsingError(\n                            parse_func=parse_func,\n                            error_info=error_info,\n                            response=response,\n                        ) from None\n        return {}", "start_char_idx": 3827, "end_char_idx": 4924, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8326f76-fef2-44dd-b25d-0f4f307aa49e": {"__data__": {"id_": "c8326f76-fef2-44dd-b25d-0f4f307aa49e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b90b0442-2079-4355-a317-d489d27b1197", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a14a0d4312115d48fbee4ba7d9f05fb25486857056a4b436185e455c813e9b0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1b59c84-a426-48be-838a-4fcbf62cf02a", "node_type": "1", "metadata": {}, "hash": "8e4e01b06be9db107813d9e88f82113ee5abde47a96afe112ab02b1006d8bb75", "class_name": "RelatedNodeInfo"}}, "text": "return checking_wrapper", "start_char_idx": 4930, "end_char_idx": 4953, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1b59c84-a426-48be-838a-4fcbf62cf02a": {"__data__": {"id_": "e1b59c84-a426-48be-838a-4fcbf62cf02a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8326f76-fef2-44dd-b25d-0f4f307aa49e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bef1520ac0de7602eb69ee4bb9b9f122d09fc00e9db5bbfe65a132e2e2f5851a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0372a16c-157d-4d05-928a-9ddd0fab26c8", "node_type": "1", "metadata": {}, "hash": "8d2a86107ea333895ffdfdb51b9a4d4ccc9534e191b04b83166e3b742101cbdf", "class_name": "RelatedNodeInfo"}}, "text": "class _ModelWrapperMeta(ABCMeta):\n    \"\"\"A meta call to replace the model wrapper's __call__ function with\n    wrapper about error handling.\"\"\"\n\n    def __new__(mcs, name: Any, bases: Any, attrs: Any) -> Any:\n        if \"__call__\" in attrs:\n            attrs[\"__call__\"] = _response_parse_decorator(attrs[\"__call__\"])\n        return super().__new__(mcs, name, bases, attrs)\n\n    def __init__(cls, name: Any, bases: Any, attrs: Any) -> None:\n        if not hasattr(cls, \"registry\"):\n            cls.registry = {}\n            cls.type_registry = {}\n            cls.deprecated_type_registry = {}\n        else:\n            cls.registry[name] = cls\n            if hasattr(cls, \"model_type\"):\n                cls.type_registry[cls.model_type] = cls\n                if hasattr(cls, \"deprecated_model_type\"):\n                    cls.deprecated_type_registry[\n                        cls.deprecated_model_type\n                    ] = cls\n        super().__init__(name, bases, attrs)", "start_char_idx": 4956, "end_char_idx": 5929, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0372a16c-157d-4d05-928a-9ddd0fab26c8": {"__data__": {"id_": "0372a16c-157d-4d05-928a-9ddd0fab26c8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1b59c84-a426-48be-838a-4fcbf62cf02a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c38f94f9688b9d728f01139c700c48206c9bd1f7688dbecdabee78a841a330b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "077746a1-b726-4e07-9aac-fe97aa786d28", "node_type": "1", "metadata": {}, "hash": "2ca456ebb1009c6e88895570adbfafe61be4ab92a6facc513d6f4f6db1cc2e1a", "class_name": "RelatedNodeInfo"}}, "text": "class ModelWrapperBase(metaclass=_ModelWrapperMeta):", "start_char_idx": 5932, "end_char_idx": 5984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "077746a1-b726-4e07-9aac-fe97aa786d28": {"__data__": {"id_": "077746a1-b726-4e07-9aac-fe97aa786d28", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0372a16c-157d-4d05-928a-9ddd0fab26c8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "19a39f67f88643cec7aeb071af0e0742de2936b8d3f6d91649f4d4da58576958", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb", "node_type": "1", "metadata": {}, "hash": "064d14eb05afb2d5e86cb96c1a554b707ce3ddef2df8f3224ea6d8757301ea11", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The base class for model wrapper.\"\"\"\n\n    model_type: str\n    \"\"\"The type of the model wrapper, which is to identify the model wrapper\n    class in model configuration.\"\"\"\n\n    config_name: str\n    \"\"\"The name of the model configuration.\"\"\"\n\n    model_name: str\n    \"\"\"The name of the model, which is used in model api calling.\"\"\"\n\n    def __init__(\n        self,  # pylint: disable=W0613\n        config_name: str,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Base class for model wrapper.\n\n        All model wrappers should inherit this class and implement the\n        `__call__` function.\n\n        Args:\n            config_name (`str`):\n                The id of the model, which is used to extract configuration\n                from the config file.\n        \"\"\"\n        self.monitor = MonitorFactory.get_monitor()\n\n        self.config_name = config_name\n        logger.info(f\"Initialize model [{config_name}]\")\n\n    def __call__(self, *args: Any, **kwargs: Any) -> ModelResponse:\n        \"\"\"Processing input with the model.\"\"\"\n        raise NotImplementedError(\n            f\"Model Wrapper [{type(self).__name__}]\"\n            f\" is missing the required `__call__`\"\n            f\" method.\",\n        )", "start_char_idx": 5989, "end_char_idx": 7199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb": {"__data__": {"id_": "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "077746a1-b726-4e07-9aac-fe97aa786d28", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a3a4c5ad75bbbb0da9a105c6cf3ef5191d07925696bcb39a53742392163ba502", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c6c4d69-530a-478a-84e7-c0690aaf5c6e", "node_type": "1", "metadata": {}, "hash": "d9c50bdb16d4cd0329a0d776eacb594abd7bf17799d9b0b9fdec13cbf1407d06", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict], str]:\n        \"\"\"Format the input string or dict into the format that the model\n        API required.\"\"\"\n        raise NotImplementedError(\n            f\"Model Wrapper [{type(self).__name__}]\"\n            f\" is missing the required `format` method\",\n        )\n\n    def _save_model_invocation(\n        self,\n        arguments: dict,\n        response: Any,\n    ) -> None:\n        \"\"\"Save model invocation.\"\"\"\n        model_class = self.__class__.__name__\n        timestamp = _get_timestamp(\"%Y%m%d-%H%M%S\")\n\n        invocation_record = {\n            \"model_class\": model_class,\n            \"timestamp\": timestamp,\n            \"arguments\": arguments,\n            \"response\": response,\n        }\n\n        file_manager.save_api_invocation(\n            f\"model_{model_class}_{timestamp}\",\n            invocation_record,\n        )\n\n    def _register_budget(self, model_name: str, budget: float) -> None:\n        \"\"\"Register the budget of the model by model_name.\"\"\"\n        self.monitor.register_budget(\n            model_name=model_name,\n            value=budget,\n            prefix=model_name,\n        )\n\n    def _register_default_metrics(self) -> None:\n        \"\"\"Register metrics to the monitor.\"\"\"", "start_char_idx": 7205, "end_char_idx": 8511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c6c4d69-530a-478a-84e7-c0690aaf5c6e": {"__data__": {"id_": "6c6c4d69-530a-478a-84e7-c0690aaf5c6e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "61b109821743c2218cab7bb02605001077108c113735581dd58f2a6f7cc6a649", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bf87569e9c5b1702341d2b57bb9d4225f3f16043214ee6b2dda97b8e19f56455", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6aea8329-abe6-45e6-b1ed-8a7f219fd08a", "node_type": "1", "metadata": {}, "hash": "a3dcfc6d498db5178039ff06e5e81e7818a7b6c9bf916ec0965995f4f033b31c", "class_name": "RelatedNodeInfo"}}, "text": "def _metric(self, metric_name: str) -> str:\n        \"\"\"Add the class name and model name as prefix to the metric name.\n\n        Args:\n            metric_name (`str`):\n                The metric name.\n\n        Returns:\n            `str`: Metric name of this wrapper.\n        \"\"\"\n\n        if hasattr(self, \"model_name\"):\n            return get_full_name(name=metric_name, prefix=self.model_name)\n        else:\n            return get_full_name(name=metric_name)\n\n    def update_monitor(self, **kwargs: Any) -> None:\n        \"\"\"Update the monitor with the given values.\n\n        Args:\n            kwargs (`dict`):\n                The values to be updated to the monitor.\n        \"\"\"\n        if hasattr(self, \"model_name\"):\n            prefix = self.model_name\n        else:\n            prefix = None\n\n        try:\n            self.monitor.update(\n                kwargs,\n                prefix=prefix,\n            )\n        except QuotaExceededError as e:\n            logger.error(e.message)", "start_char_idx": 8517, "end_char_idx": 9504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6aea8329-abe6-45e6-b1ed-8a7f219fd08a": {"__data__": {"id_": "6aea8329-abe6-45e6-b1ed-8a7f219fd08a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c6c4d69-530a-478a-84e7-c0690aaf5c6e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "59bd7d2552ac2f0480bd3e6ee981ec53518dbfc1d145cd2649d73363453dafde", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "669a73c2-0f04-41f6-a627-027fd7919349", "node_type": "1", "metadata": {}, "hash": "6101ea1a8e3d757a51955ebf842f320bdfff7452ef4c141a65f17939e891cc38", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Model wrapper for Ollama models.\"\"\"\nfrom abc import ABC\nfrom typing import Sequence, Any, Optional, List, Union\n\nfrom loguru import logger\n\nfrom agentscope.message import MessageBase\nfrom agentscope.models import ModelWrapperBase, ModelResponse\nfrom agentscope.utils.tools import _convert_to_str\n\ntry:\n    import ollama\nexcept ImportError:\n    ollama = None", "start_char_idx": 0, "end_char_idx": 384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "669a73c2-0f04-41f6-a627-027fd7919349": {"__data__": {"id_": "669a73c2-0f04-41f6-a627-027fd7919349", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6aea8329-abe6-45e6-b1ed-8a7f219fd08a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "44b15b6e7fec8b89cf2172495dc0f9cc2e76c50719e317029bc7c7dcb702b77d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cae0e65c-834c-44a3-8085-120f1fbe8b89", "node_type": "1", "metadata": {}, "hash": "dd318a20d8596d2a17c9cf9780c2e9e3754647df87a516862332474bc64411bd", "class_name": "RelatedNodeInfo"}}, "text": "class OllamaWrapperBase(ModelWrapperBase, ABC):", "start_char_idx": 387, "end_char_idx": 434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cae0e65c-834c-44a3-8085-120f1fbe8b89": {"__data__": {"id_": "cae0e65c-834c-44a3-8085-120f1fbe8b89", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "669a73c2-0f04-41f6-a627-027fd7919349", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e29ea8fe57ba81b13f00af1d9bf50f455ae78ab08d34e23bbc2dd0df90828922", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47", "node_type": "1", "metadata": {}, "hash": "ff93a042600b6573a1a225d10634d62bd9131bb53ce273dc3a23ca7e5156d7af", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The base class for Ollama model wrappers.\n\n    To use Ollama API, please\n    1. First install ollama server from https://ollama.com/download and\n    start the server\n    2. Pull the model by `ollama pull {model_name}` in terminal\n    After that, you can use the ollama API.\n    \"\"\"\n\n    model_type: str\n    \"\"\"The type of the model wrapper, which is to identify the model wrapper\n    class in model configuration.\"\"\"\n\n    model_name: str\n    \"\"\"The model name used in ollama API.\"\"\"\n\n    options: dict\n    \"\"\"A dict contains the options for ollama generation API,\n    e.g. {\"temperature\": 0, \"seed\": 123}\"\"\"\n\n    keep_alive: str\n    \"\"\"Controls how long the model will stay loaded into memory following\n    the request.\"\"\"", "start_char_idx": 439, "end_char_idx": 1164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47": {"__data__": {"id_": "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cae0e65c-834c-44a3-8085-120f1fbe8b89", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "11dacc499d483f380c678c4bb56a8bc966c94e881424de3bda5d88239261cb67", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92d71684-287b-470d-b31b-bad374f9b4c7", "node_type": "1", "metadata": {}, "hash": "2ef4cdbfa66ded69bf061f1a4c43564654078d7302b250992728b6e2cc0e6851", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        config_name: str,\n        model_name: str,\n        options: dict = None,\n        keep_alive: str = \"5m\",\n    ) -> None:\n        \"\"\"Initialize the model wrapper for Ollama API.\n\n        Args:\n            model_name (`str`):\n                The model name used in ollama API.\n            options (`dict`, default `None`):\n                The extra keyword arguments used in Ollama api generation,\n                e.g. `{\"temperature\": 0., \"seed\": 123}`.\n            keep_alive (`str`, default `5m`):\n                Controls how long the model will stay loaded into memory\n                following the request.\n        \"\"\"\n\n        super().__init__(config_name=config_name)\n\n        self.model_name = model_name\n        self.options = options\n        self.keep_alive = keep_alive\n\n        self._register_default_metrics()", "start_char_idx": 1170, "end_char_idx": 2026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92d71684-287b-470d-b31b-bad374f9b4c7": {"__data__": {"id_": "92d71684-287b-470d-b31b-bad374f9b4c7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "858eadbf2b3dec79b4cdf406172bfea1d97d1889fb68ea5c9d2d1edec68345ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64499495-e3fd-4865-939c-72951e2a105b", "node_type": "1", "metadata": {}, "hash": "0cb652e81bdb4485d3a5354856fcd59fe53f503cc488a21115f017cebee785cf", "class_name": "RelatedNodeInfo"}}, "text": "class OllamaChatWrapper(OllamaWrapperBase):", "start_char_idx": 2029, "end_char_idx": 2072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64499495-e3fd-4865-939c-72951e2a105b": {"__data__": {"id_": "64499495-e3fd-4865-939c-72951e2a105b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92d71684-287b-470d-b31b-bad374f9b4c7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "22d7d4c1c5af31ea7b7784fcc4cb73bfd09e754212e11c4bc5760242639ee06a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38a17c2a-b704-4d55-8b20-df4b53e1cbc2", "node_type": "1", "metadata": {}, "hash": "2ccdc8e89a1e1ebb967eba83fc119738c493214c71c345bf329469db2ca7c9fd", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for Ollama chat API.\"\"\"\n\n    model_type: str = \"ollama_chat\"", "start_char_idx": 2077, "end_char_idx": 2158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38a17c2a-b704-4d55-8b20-df4b53e1cbc2": {"__data__": {"id_": "38a17c2a-b704-4d55-8b20-df4b53e1cbc2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64499495-e3fd-4865-939c-72951e2a105b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b4626b3a7cbcd84d3a0e42f3b2e483faf4dbc8fa88210e77a2099b7f962fe7b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8", "node_type": "1", "metadata": {}, "hash": "c16e70d306fa0c08d26ee7c2b1b4401c665e8687a595c5f980f51a29adccb971", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        messages: Sequence[dict],\n        options: Optional[dict] = None,\n        keep_alive: Optional[str] = None,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 2164, "end_char_idx": 2354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8": {"__data__": {"id_": "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38a17c2a-b704-4d55-8b20-df4b53e1cbc2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d9d4d8f79d19b0a34a97e3f5b8967755f8f0aafd74e42bd74dac9fe7233c111b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb69485b-f5f8-4e20-9681-82765d701073", "node_type": "1", "metadata": {}, "hash": "44444b40b9eeab64ba1fbd7edbcf3ec767c0de513d3b923766ccc1191347a3a9", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Generate response from the given messages.\n\n        Args:\n            messages (`Sequence[dict]`):\n                A list of messages, each message is a dict contains the `role`\n                and `content` of the message.\n            options (`dict`, default `None`):\n                The extra arguments used in ollama chat API, which takes\n                effect only on this call, and will be merged with the\n                `options` input in the constructor,\n                e.g. `{\"temperature\": 0., \"seed\": 123}`.\n            keep_alive (`str`, default `None`):\n                How long the model will stay loaded into memory following\n                the request, which takes effect only on this call, and will\n                override the `keep_alive` input in the constructor.\n\n        Returns:\n            `ModelResponse`:\n                The response text in `text` field, and the raw response in\n                `raw` field.\n        \"\"\"\n        # step1: prepare parameters accordingly\n        if options is None:\n            options = self.options\n        else:\n            options = {**self.options, **options}\n\n        keep_alive = keep_alive or self.keep_alive\n\n        # step2: forward to generate response\n        response = ollama.chat(\n            model=self.model_name,\n            messages=messages,\n            options=options,\n            keep_alive=keep_alive,\n            **kwargs,\n        )\n\n        # step2: record the api invocation if needed", "start_char_idx": 2363, "end_char_idx": 3838, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb69485b-f5f8-4e20-9681-82765d701073": {"__data__": {"id_": "bb69485b-f5f8-4e20-9681-82765d701073", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b60281914d641ba197f7825102900eab4096b0c4c22197d71fded45423fdcea5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "71072708-968f-4ca2-a48c-3196c6f2d700", "node_type": "1", "metadata": {}, "hash": "ec4328afe037bbe56e3fe2c5456a565c0ce00e41e018d22740f4471ca03546c7", "class_name": "RelatedNodeInfo"}}, "text": "self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"messages\": messages,\n                \"options\": options,\n                \"keep_alive\": keep_alive,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step3: monitor the response\n        self.update_monitor(\n            call_counter=1,\n            prompt_tokens=response.get(\"prompt_eval_count\", 0),\n            completion_tokens=response.get(\"eval_count\", 0),\n            total_tokens=response.get(\"prompt_eval_count\", 0)\n            + response.get(\"eval_count\", 0),\n        )\n\n        # step4: return response\n        return ModelResponse(\n            text=response[\"message\"][\"content\"],\n            raw=response,\n        )", "start_char_idx": 3847, "end_char_idx": 4626, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71072708-968f-4ca2-a48c-3196c6f2d700": {"__data__": {"id_": "71072708-968f-4ca2-a48c-3196c6f2d700", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb69485b-f5f8-4e20-9681-82765d701073", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "26938be1cf01fb96d8eac1584277e867769929c9c28073aa145bf37bcbd66a92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba7580dd-eca9-455b-9feb-3bc0964334ae", "node_type": "1", "metadata": {}, "hash": "1a80d86c5d92d0abf316355a78ba1cb82418fb23c968292db5611c6feb561822", "class_name": "RelatedNodeInfo"}}, "text": "def _register_default_metrics(self) -> None:\n        \"\"\"Register metrics to the monitor.\"\"\"\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"tokens\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 4632, "end_char_idx": 5194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba7580dd-eca9-455b-9feb-3bc0964334ae": {"__data__": {"id_": "ba7580dd-eca9-455b-9feb-3bc0964334ae", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "71072708-968f-4ca2-a48c-3196c6f2d700", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8c460cc0af6c180cbeb52d9f6022de3e61b7638007d809c3d8374b72a24e9958", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3dea731c-c911-492b-885e-d0a17a6fdde7", "node_type": "1", "metadata": {}, "hash": "62e78519bb066efe314775c574b726152b3f9761869a35dd422201b45145568d", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> List[dict]:", "start_char_idx": 5200, "end_char_idx": 5304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dea731c-c911-492b-885e-d0a17a6fdde7": {"__data__": {"id_": "3dea731c-c911-492b-885e-d0a17a6fdde7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba7580dd-eca9-455b-9feb-3bc0964334ae", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5938024824df5e560ad09ef289fc3a3ddc2901218297d462e95e0b85add1bcfe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e2009a4-86e1-4e73-8b2c-2e55417d7874", "node_type": "1", "metadata": {}, "hash": "17983aa1bc571805ab92373f274a5ffd0d71cff729ebdc4fe5cab58c410621c5", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A basic strategy to format the input into the required format of\n        Ollama Chat API.\n\n        Note for ollama chat api, the content field shouldn't be empty string.\n\n        Args:\n            args (`Union[MessageBase, Sequence[MessageBase]]`):\n                The input arguments to be formatted, where each argument\n                should be a `Msg` object, or a list of `Msg` objects.\n                In distribution, placeholder is also allowed.\n\n        Returns:\n            `List[dict]`:\n                The formatted messages.\n        \"\"\"\n        ollama_msgs = []", "start_char_idx": 5313, "end_char_idx": 5890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e2009a4-86e1-4e73-8b2c-2e55417d7874": {"__data__": {"id_": "9e2009a4-86e1-4e73-8b2c-2e55417d7874", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3dea731c-c911-492b-885e-d0a17a6fdde7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e7f7a2c237c612ce758dbfd6288d7b791497d87ba1f4c09ed945b58ecb4511d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9449e91-89d3-4e60-90da-c13068c4e650", "node_type": "1", "metadata": {}, "hash": "292cc5cd168188422292f6aadd291184aefb7d08061dc7a0530ef37915e4b91a", "class_name": "RelatedNodeInfo"}}, "text": "for msg in args:\n            if msg is None:\n                continue\n            if isinstance(msg, MessageBase):\n                # content shouldn't be empty string\n                if msg.content == \"\":\n                    logger.warning(\n                        \"In ollama chat API, the content field cannot be \"\n                        \"empty string. To avoid error, the empty string is \"\n                        \"replaced by a blank space automatically, but the \"\n                        \"model may not work as expected.\",\n                    )\n                    msg.content = \" \"\n\n                ollama_msg = {\n                    \"role\": msg.role,\n                    \"content\": _convert_to_str(msg.content),\n                }\n\n                # image url\n                if msg.url is not None:\n                    ollama_msg[\"images\"] = [msg.url]\n\n                ollama_msgs.append(ollama_msg)\n            elif isinstance(msg, list):\n                ollama_msgs.extend(self.format(*msg))\n            else:\n                raise TypeError(\n                    f\"Invalid message type: {type(msg)}, `Msg` is expected.\",\n                )\n\n        return ollama_msgs", "start_char_idx": 5899, "end_char_idx": 7074, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9449e91-89d3-4e60-90da-c13068c4e650": {"__data__": {"id_": "c9449e91-89d3-4e60-90da-c13068c4e650", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e2009a4-86e1-4e73-8b2c-2e55417d7874", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "180bc2c47c73c48093044951ee17fb826463423e9cfc8737907d753eb8797355", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d47ab095-261e-491e-a36d-9eabb8d0120b", "node_type": "1", "metadata": {}, "hash": "eb0571e856151946d996b620b586931e7b53f61241b8fcd38964ef9b0f72fca1", "class_name": "RelatedNodeInfo"}}, "text": "class OllamaEmbeddingWrapper(OllamaWrapperBase):", "start_char_idx": 7077, "end_char_idx": 7125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d47ab095-261e-491e-a36d-9eabb8d0120b": {"__data__": {"id_": "d47ab095-261e-491e-a36d-9eabb8d0120b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9449e91-89d3-4e60-90da-c13068c4e650", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ade7d63b9a513fbf0072aaebf119d346a1b4ed908d60b37624f3ad5b40226401", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f218b3a4-6d5c-41cf-8146-e7647fa73084", "node_type": "1", "metadata": {}, "hash": "71f6c81f746394a40e252feada9919e5332e195f9f47a4f19a33330bdd641f2c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for Ollama embedding API.\"\"\"\n\n    model_type: str = \"ollama_embedding\"", "start_char_idx": 7130, "end_char_idx": 7221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f218b3a4-6d5c-41cf-8146-e7647fa73084": {"__data__": {"id_": "f218b3a4-6d5c-41cf-8146-e7647fa73084", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d47ab095-261e-491e-a36d-9eabb8d0120b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3738ae41cde4a6e6db60882be6e4295ea5b4fbf9d83bc11fca895a0b37f3a126", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b918bb43-bcab-4b05-9fc0-5b4ecb07622c", "node_type": "1", "metadata": {}, "hash": "0840ca352d26e729f4345e5675136473fd9cd9e5936f54096c1529bb061b6c61", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        prompt: str,\n        options: Optional[dict] = None,\n        keep_alive: Optional[str] = None,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 7227, "end_char_idx": 7404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b918bb43-bcab-4b05-9fc0-5b4ecb07622c": {"__data__": {"id_": "b918bb43-bcab-4b05-9fc0-5b4ecb07622c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f218b3a4-6d5c-41cf-8146-e7647fa73084", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c4d316c53e43463c7761139502dcf433d387b289fc87bdf0781047de5521dbc4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6179ee5c-acc3-4635-bce4-08675d7d154b", "node_type": "1", "metadata": {}, "hash": "9fda9732483538db84e79314e5f396d0bd75c56fde8a61034bc96779db38ba4a", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Generate embedding from the given prompt.\n\n        Args:\n            prompt (`str`):\n                The prompt to generate response.\n            options (`dict`, default `None`):\n                The extra arguments used in ollama embedding API, which takes\n                effect only on this call, and will be merged with the\n                `options` input in the constructor,\n                e.g. `{\"temperature\": 0., \"seed\": 123}`.\n            keep_alive (`str`, default `None`):\n                How long the model will stay loaded into memory following\n                the request, which takes effect only on this call, and will\n                override the `keep_alive` input in the constructor.\n\n        Returns:\n            `ModelResponse`:\n                The response embedding in `embedding` field, and the raw\n                response in `raw` field.\n        \"\"\"\n        # step1: prepare parameters accordingly\n        if options is None:\n            options = self.options\n        else:\n            options = {**self.options, **options}\n\n        keep_alive = keep_alive or self.keep_alive\n\n        # step2: forward to generate response\n        response = ollama.embeddings(\n            model=self.model_name,\n            prompt=prompt,\n            options=options,\n            keep_alive=keep_alive,\n            **kwargs,\n        )\n\n        # step3: record the api invocation if needed", "start_char_idx": 7413, "end_char_idx": 8815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6179ee5c-acc3-4635-bce4-08675d7d154b": {"__data__": {"id_": "6179ee5c-acc3-4635-bce4-08675d7d154b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b918bb43-bcab-4b05-9fc0-5b4ecb07622c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54416b8b9e6fd99017bd46e2476f59d4c555300bc83cbbca04ae8163f72fd1ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a491107-c0cd-4774-b209-594558987214", "node_type": "1", "metadata": {}, "hash": "1ec00ce7e932a085aa31176bbf4e42c764b57e485f367a9e7c3c097c5189d3c5", "class_name": "RelatedNodeInfo"}}, "text": "self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"prompt\": prompt,\n                \"options\": options,\n                \"keep_alive\": keep_alive,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step4: monitor the response\n        self.update_monitor(call_counter=1)\n\n        # step5: return response\n        return ModelResponse(\n            embedding=response[\"embedding\"],\n            raw=response,\n        )", "start_char_idx": 8824, "end_char_idx": 9340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a491107-c0cd-4774-b209-594558987214": {"__data__": {"id_": "0a491107-c0cd-4774-b209-594558987214", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6179ee5c-acc3-4635-bce4-08675d7d154b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c08788d199f4cad520830023d8b2b78ec119e6731928130324c9caaaa3501870", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "baf7a626-b347-4cf5-a0e3-1d13a6b786b1", "node_type": "1", "metadata": {}, "hash": "e40c593b72be85ece76a8b79895da1cdd97b7cb44e4e7bcf8897ec138f6a97b0", "class_name": "RelatedNodeInfo"}}, "text": "def _register_default_metrics(self) -> None:\n        \"\"\"Register metrics to the monitor.\"\"\"\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n\n    def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict], str]:\n        raise RuntimeError(\n            f\"Model Wrapper [{type(self).__name__}] doesn't \"\n            f\"need to format the input. Please try to use the \"\n            f\"model wrapper directly.\",\n        )", "start_char_idx": 9346, "end_char_idx": 9879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baf7a626-b347-4cf5-a0e3-1d13a6b786b1": {"__data__": {"id_": "baf7a626-b347-4cf5-a0e3-1d13a6b786b1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a491107-c0cd-4774-b209-594558987214", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e900f5c2c9bbc2dbdbd113945bde82661ce742cfc106f4678f43c54141941fd5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "200542ab-f75e-411b-906d-84b03888815b", "node_type": "1", "metadata": {}, "hash": "dd9a2a664cc5abe8d2b1d306050ae91c4f0cac431c8a6515c365fe158e405202", "class_name": "RelatedNodeInfo"}}, "text": "class OllamaGenerationWrapper(OllamaWrapperBase):", "start_char_idx": 9882, "end_char_idx": 9931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "200542ab-f75e-411b-906d-84b03888815b": {"__data__": {"id_": "200542ab-f75e-411b-906d-84b03888815b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "baf7a626-b347-4cf5-a0e3-1d13a6b786b1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad07c7eda54e87c83f217a340c00875a2e7028ade45904076d4bf91305506d7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29596411-09b5-4900-8d3e-e121d8b2dfe0", "node_type": "1", "metadata": {}, "hash": "71f6c81f746394a40e252feada9919e5332e195f9f47a4f19a33330bdd641f2c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for Ollama generation API.\"\"\"\n\n    model_type: str = \"ollama_generate\"", "start_char_idx": 9936, "end_char_idx": 10027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29596411-09b5-4900-8d3e-e121d8b2dfe0": {"__data__": {"id_": "29596411-09b5-4900-8d3e-e121d8b2dfe0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "200542ab-f75e-411b-906d-84b03888815b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "be9200cf895f451bb8f90085db1182581fc2cc96f737ab9a37df3dc0f8ae9d59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d", "node_type": "1", "metadata": {}, "hash": "321ae0d59b5fa9c8b53aeb3abb0076959e650ac4abc116ecac7ab900ca1b653f", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        prompt: str,\n        options: Optional[dict] = None,\n        keep_alive: Optional[str] = None,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 7227, "end_char_idx": 7404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d": {"__data__": {"id_": "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29596411-09b5-4900-8d3e-e121d8b2dfe0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c4d316c53e43463c7761139502dcf433d387b289fc87bdf0781047de5521dbc4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2b5f652-84e9-4bf9-8e52-ff40866eb696", "node_type": "1", "metadata": {}, "hash": "711937c8e4418dd736ea3c1649c0dd8972c285b92bbd7bae8907463fe576fc2c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Generate response from the given prompt.\n\n        Args:\n            prompt (`str`):\n                The prompt to generate response.\n            options (`dict`, default `None`):\n                The extra arguments used in ollama generation API, which takes\n                effect only on this call, and will be merged with the\n                `options` input in the constructor,\n                e.g. `{\"temperature\": 0., \"seed\": 123}`.\n            keep_alive (`str`, default `None`):\n                How long the model will stay loaded into memory following\n                the request, which takes effect only on this call, and will\n                override the `keep_alive` input in the constructor.\n\n        Returns:\n            `ModelResponse`:\n                The response text in `text` field, and the raw response in\n                `raw` field.\n\n        \"\"\"\n        # step1: prepare parameters accordingly\n        if options is None:\n            options = self.options\n        else:\n            options = {**self.options, **options}\n\n        keep_alive = keep_alive or self.keep_alive\n\n        # step2: forward to generate response\n        response = ollama.generate(\n            model=self.model_name,\n            prompt=prompt,\n            options=options,\n            keep_alive=keep_alive,\n        )\n\n        # step3: record the api invocation if needed", "start_char_idx": 10219, "end_char_idx": 11588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2b5f652-84e9-4bf9-8e52-ff40866eb696": {"__data__": {"id_": "c2b5f652-84e9-4bf9-8e52-ff40866eb696", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8671fd75983b41ed9f2d893cc7a54baf07f47c712f0f9b25cbbdaf15af6f6b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7", "node_type": "1", "metadata": {}, "hash": "ec4328afe037bbe56e3fe2c5456a565c0ce00e41e018d22740f4471ca03546c7", "class_name": "RelatedNodeInfo"}}, "text": "self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"prompt\": prompt,\n                \"options\": options,\n                \"keep_alive\": keep_alive,\n                **kwargs,\n            },\n            response=response,\n        )\n\n        # step4: monitor the response\n        self.update_monitor(\n            call_counter=1,\n            prompt_tokens=response.get(\"prompt_eval_count\", 0),\n            completion_tokens=response.get(\"eval_count\", 0),\n            total_tokens=response.get(\"prompt_eval_count\", 0)\n            + response.get(\"eval_count\", 0),\n        )\n\n        # step5: return response\n        return ModelResponse(\n            text=response[\"response\"],\n            raw=response,\n        )", "start_char_idx": 11597, "end_char_idx": 12362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7": {"__data__": {"id_": "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2b5f652-84e9-4bf9-8e52-ff40866eb696", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "edf50679605512e58a8452efe3e7339849fe6aac5c96a93949ff08505b2da8e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6e34c3f-7969-44b6-a89a-788d3facd94a", "node_type": "1", "metadata": {}, "hash": "8066c492273c3123995d5c8b214c16078d9bbbfb0beda78ddc38f2f8fa83ca19", "class_name": "RelatedNodeInfo"}}, "text": "def _register_default_metrics(self) -> None:\n        \"\"\"Register metrics to the monitor.\"\"\"\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"tokens\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 4632, "end_char_idx": 5194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6e34c3f-7969-44b6-a89a-788d3facd94a": {"__data__": {"id_": "c6e34c3f-7969-44b6-a89a-788d3facd94a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8c460cc0af6c180cbeb52d9f6022de3e61b7638007d809c3d8374b72a24e9958", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2845632-cfab-467d-9920-61eb7c426485", "node_type": "1", "metadata": {}, "hash": "039d43d3ae70ba164b569570a83f73f740aef5dce02e0e19ec942d64fb305d0a", "class_name": "RelatedNodeInfo"}}, "text": "def format(self, *args: Union[MessageBase, Sequence[MessageBase]]) -> str:", "start_char_idx": 12936, "end_char_idx": 13010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2845632-cfab-467d-9920-61eb7c426485": {"__data__": {"id_": "c2845632-cfab-467d-9920-61eb7c426485", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6e34c3f-7969-44b6-a89a-788d3facd94a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1b248ab844578e7a1ca23ec6e0a8fbea4996c10ea30352c1d1446c0aba02cbed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1720d76-ff62-483b-a93f-91b2166730e9", "node_type": "1", "metadata": {}, "hash": "030c84f20d56d30303c3f1c8c26c896966122ac91705baa1388362ebf2683962", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Forward the input to the model.\n\n        Args:\n            args (`Union[MessageBase, Sequence[MessageBase]]`):\n                The input arguments to be formatted, where each argument\n                should be a `Msg` object, or a list of `Msg` objects.\n                In distribution, placeholder is also allowed.\n\n        Returns:\n            `str`:\n                The formatted string prompt.\n        \"\"\"\n        input_msgs = []\n        for _ in args:\n            if isinstance(_, MessageBase):\n                input_msgs.append(_)\n            elif isinstance(_, list) and all(\n                isinstance(__, MessageBase) for __ in _\n            ):\n                input_msgs.extend(_)\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(_)}.\",\n                )\n\n        sys_prompt = None\n        dialogue = []\n        for i, unit in enumerate(input_msgs):\n            if i == 0 and unit.role == \"system\":\n                # system prompt\n                sys_prompt = _convert_to_str(unit.content)\n            else:\n                # Merge all messages into a dialogue history prompt\n                dialogue.append(\n                    f\"{unit.name}: {_convert_to_str(unit.content)}\",\n                )\n\n        dialogue_history = \"\\n\".join(dialogue)", "start_char_idx": 13019, "end_char_idx": 14392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1720d76-ff62-483b-a93f-91b2166730e9": {"__data__": {"id_": "e1720d76-ff62-483b-a93f-91b2166730e9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "35fdc4520b9ee55f6f33acad7959592a8ccaf8753090c127edb241ec3503342d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2845632-cfab-467d-9920-61eb7c426485", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b5e54331e80a384dcf272927f9983ea63fe6a97e4d04b4bf9ad8520df49e32ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9d611d6-1ffe-4649-a99c-791abc8c11b4", "node_type": "1", "metadata": {}, "hash": "c6637fd1de4ccd53c57878aefecad9b93b295c41995160a380047621c904f5e7", "class_name": "RelatedNodeInfo"}}, "text": "if sys_prompt is None:\n            prompt_template = \"## Dialogue History\\n{dialogue_history}\"\n        else:\n            prompt_template = (\n                \"{system_prompt}\\n\"\n                \"\\n\"\n                \"## Dialogue History\\n\"\n                \"{dialogue_history}\"\n            )\n\n        return prompt_template.format(\n            system_prompt=sys_prompt,\n            dialogue_history=dialogue_history,\n        )", "start_char_idx": 14402, "end_char_idx": 14825, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9d611d6-1ffe-4649-a99c-791abc8c11b4": {"__data__": {"id_": "b9d611d6-1ffe-4649-a99c-791abc8c11b4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1720d76-ff62-483b-a93f-91b2166730e9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7516a334357a38bad2a6620d00e812aaa69f85d53d5e9d771405444a2473586c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "abd30c1c-a1f1-42dc-a6da-ff11cce0f484", "node_type": "1", "metadata": {}, "hash": "713c9df02c80c6aebc3ca829b9320201525f89d286396c1adb74119b154d384a", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Model wrapper for OpenAI models\"\"\"\nfrom abc import ABC\nfrom typing import Union, Any, List, Sequence\n\nfrom loguru import logger\n\nfrom .model import ModelWrapperBase, ModelResponse\nfrom ..file_manager import file_manager\nfrom ..message import MessageBase\nfrom ..utils.tools import _convert_to_str\n\ntry:\n    import openai\nexcept ImportError:\n    openai = None\n\nfrom ..utils.token_utils import get_openai_max_length\nfrom ..constants import _DEFAULT_API_BUDGET", "start_char_idx": 0, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "abd30c1c-a1f1-42dc-a6da-ff11cce0f484": {"__data__": {"id_": "abd30c1c-a1f1-42dc-a6da-ff11cce0f484", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9d611d6-1ffe-4649-a99c-791abc8c11b4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9a503fc91da8cb3d3e172e9d5003295eba0e0203adf3973e167fd55a47bf0a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "442beff7-96af-4069-b47b-632eb930af45", "node_type": "1", "metadata": {}, "hash": "70183e4affb7ada125ed1185b5e1244293190549def8528814a01c36abcdeb79", "class_name": "RelatedNodeInfo"}}, "text": "class OpenAIWrapperBase(ModelWrapperBase, ABC):", "start_char_idx": 486, "end_char_idx": 533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "442beff7-96af-4069-b47b-632eb930af45": {"__data__": {"id_": "442beff7-96af-4069-b47b-632eb930af45", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "abd30c1c-a1f1-42dc-a6da-ff11cce0f484", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f7afe455087e812647b253c1299ff0d15793f1d276c6a43f4b63db1dd50ef274", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b7febef-9d11-4970-add0-dbc4349ebcd6", "node_type": "1", "metadata": {}, "hash": "55b87420af40e17f0b9b590463782b1e9434baecdb87544822b8fce9d969e3de", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for OpenAI API.\"\"\"", "start_char_idx": 538, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b7febef-9d11-4970-add0-dbc4349ebcd6": {"__data__": {"id_": "4b7febef-9d11-4970-add0-dbc4349ebcd6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "442beff7-96af-4069-b47b-632eb930af45", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e249d8bf36cbc0fd9325d0bcd760d9caad48d5114b6ca84fcde2550c786fc68b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "512b3fbb-e748-43a8-a16c-5ca6f6669c3f", "node_type": "1", "metadata": {}, "hash": "9d26f8a8abd7cf8d2e12203f8b267009df25b4fe86e91db5200067ef325a291c", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        config_name: str,\n        model_name: str = None,\n        api_key: str = None,\n        organization: str = None,\n        client_args: dict = None,\n        generate_args: dict = None,\n        budget: float = _DEFAULT_API_BUDGET,\n        **kwargs: Any,\n    ) -> None:", "start_char_idx": 583, "end_char_idx": 884, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "512b3fbb-e748-43a8-a16c-5ca6f6669c3f": {"__data__": {"id_": "512b3fbb-e748-43a8-a16c-5ca6f6669c3f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b7febef-9d11-4970-add0-dbc4349ebcd6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0d038fc180c7954bbed810b2e6813de19be5d9d56119dd64c8a515bf36abd450", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621", "node_type": "1", "metadata": {}, "hash": "6ca109258d61d5bf76dd2f36ebcfcf00a01cd83a22769ab7b3cad6ea2895e9b0", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Initialize the openai client.\n\n        Args:\n            config_name (`str`):\n                The name of the model config.\n            model_name (`str`, default `None`):\n                The name of the model to use in OpenAI API.\n            api_key (`str`, default `None`):\n                The API key for OpenAI API. If not specified, it will\n                be read from the environment variable `OPENAI_API_KEY`.\n            organization (`str`, default `None`):\n                The organization ID for OpenAI API. If not specified, it will\n                be read from the environment variable `OPENAI_ORGANIZATION`.\n            client_args (`dict`, default `None`):\n                The extra keyword arguments to initialize the OpenAI client.\n            generate_args (`dict`, default `None`):\n                The extra keyword arguments used in openai api generation,\n                e.g. `temperature`, `seed`.\n            budget (`float`, default `None`):\n                The total budget using this model. Set to `None` means no\n                limit.\n        \"\"\"\n\n        if model_name is None:\n            model_name = config_name\n            logger.warning(\"model_name is not set, use config_name instead.\")\n\n        super().__init__(config_name=config_name)\n\n        if openai is None:\n            raise ImportError(\n                \"Cannot find openai package in current python environment.\",\n            )\n\n        self.model_name = model_name", "start_char_idx": 893, "end_char_idx": 2358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621": {"__data__": {"id_": "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "512b3fbb-e748-43a8-a16c-5ca6f6669c3f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27b483947820089b4b952484fc3592166467bbbc078dee4af016704765ac77a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6", "node_type": "1", "metadata": {}, "hash": "ea88364d3d8dca11dcb8f771f90fd87a846afa95c8bb866803214330fae22dd2", "class_name": "RelatedNodeInfo"}}, "text": "self.generate_args = generate_args or {}\n\n        self.client = openai.OpenAI(\n            api_key=api_key,\n            organization=organization,\n            **(client_args or {}),\n        )\n\n        # Set the max length of OpenAI model\n        try:\n            self.max_length = get_openai_max_length(self.model_name)\n        except Exception as e:\n            logger.warning(\n                f\"fail to get max_length for {self.model_name}: \" f\"{e}\",\n            )\n            self.max_length = None\n\n        # Set monitor accordingly\n        self._register_budget(model_name, budget)\n        self._register_default_metrics()", "start_char_idx": 2367, "end_char_idx": 2994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6": {"__data__": {"id_": "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "63a7a9c76a20281c41dc106624f6d18eb914e744441eaec3f59978200d13a3ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65bcaf22-ee88-46e4-aa92-57e6d6120214", "node_type": "1", "metadata": {}, "hash": "b669e9a7ccb81d561812d9309284fe6ab8bb04024d3604a7d9ad92dc8907752c", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict], str]:\n        raise RuntimeError(\n            f\"Model Wrapper [{type(self).__name__}] doesn't \"\n            f\"need to format the input. Please try to use the \"\n            f\"model wrapper directly.\",\n        )", "start_char_idx": 3000, "end_char_idx": 3320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65bcaf22-ee88-46e4-aa92-57e6d6120214": {"__data__": {"id_": "65bcaf22-ee88-46e4-aa92-57e6d6120214", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "12b2550d925bf4fcd4a6bbf36056a82673cb46fcc99eff21afe4f51a3c5743f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3856870e-3efc-4421-afe9-c114ffca2150", "node_type": "1", "metadata": {}, "hash": "25a7e317a481de9a1feac5d4225da78b20e312ec91419a7a9e6113314916be4b", "class_name": "RelatedNodeInfo"}}, "text": "class OpenAIChatWrapper(OpenAIWrapperBase):", "start_char_idx": 3323, "end_char_idx": 3366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3856870e-3efc-4421-afe9-c114ffca2150": {"__data__": {"id_": "3856870e-3efc-4421-afe9-c114ffca2150", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65bcaf22-ee88-46e4-aa92-57e6d6120214", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0678d205559ecca7667156735610c6445fb15a35423e4475e979b7b68b962e69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b4407e4-c631-411c-a43b-bb3a13c607a9", "node_type": "1", "metadata": {}, "hash": "f82c065aaafe7e0d720c17f1c518f41499e7d4975f45d5c236bb55b350e5b038", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for OpenAI's chat API.\"\"\"\n\n    model_type: str = \"openai_chat\"\n\n    deprecated_model_type: str = \"openai\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"completion_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 3371, "end_char_idx": 4102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b4407e4-c631-411c-a43b-bb3a13c607a9": {"__data__": {"id_": "0b4407e4-c631-411c-a43b-bb3a13c607a9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3856870e-3efc-4421-afe9-c114ffca2150", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9f50195ba0d32ef177a016ff498590c595e01099a4fa6ca2e7e1c198d62abbd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "625b9c55-779c-412e-827c-d18dba2b765c", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        messages: list,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 4108, "end_char_idx": 4206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "625b9c55-779c-412e-827c-d18dba2b765c": {"__data__": {"id_": "625b9c55-779c-412e-827c-d18dba2b765c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b4407e4-c631-411c-a43b-bb3a13c607a9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7c2d6d150a2d7ffe3611364b4c5684e4ba24729774ecbd7e84bbfe4d924e932f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "070fe84b-6679-4fab-8359-1622e9efee70", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "070fe84b-6679-4fab-8359-1622e9efee70": {"__data__": {"id_": "070fe84b-6679-4fab-8359-1622e9efee70", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "625b9c55-779c-412e-827c-d18dba2b765c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6a2f2c1993ea0e1f7746d11e52b815c42ca3167ea7d2260990317210b858fc39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82e34590-6d59-4f55-9e33-b00be693fcdc", "node_type": "1", "metadata": {}, "hash": "268e8fc76314e15a8fafe903c1153e6aafb30fa1793ef5e10186dd42f2ece2b8", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82e34590-6d59-4f55-9e33-b00be693fcdc": {"__data__": {"id_": "82e34590-6d59-4f55-9e33-b00be693fcdc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "070fe84b-6679-4fab-8359-1622e9efee70", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6a2f2c1993ea0e1f7746d11e52b815c42ca3167ea7d2260990317210b858fc39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50143c22-65e0-4e7f-ab78-ac8f31a1b627", "node_type": "1", "metadata": {}, "hash": "a75669c72fe75b91866732e618a561a8cc6454f4dbe2ef508ffad9b81aaf0bf8", "class_name": "RelatedNodeInfo"}}, "text": "# step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: checking messages\n        if not isinstance(messages, list):\n            raise ValueError(\n                \"OpenAI `messages` field expected type `list`, \"\n                f\"got `{type(messages)}` instead.\",\n            )\n        if not all(\"role\" in msg and \"content\" in msg for msg in messages):\n            raise ValueError(\n                \"Each message in the 'messages' list must contain a 'role' \"\n                \"and 'content' key for OpenAI API.\",\n            )\n\n        # step3: forward to generate response\n        response = self.client.chat.completions.create(\n            model=self.model_name,\n            messages=messages,\n            **kwargs,\n        )\n\n        # step4: record the api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"messages\": messages,\n                **kwargs,\n            },\n            response=response.model_dump(),\n        )\n\n        # step5: update monitor accordingly\n        self.update_monitor(call_counter=1, **response.usage.model_dump())\n\n        # step6: return response\n        return ModelResponse(\n            text=response.choices[0].message.content,\n            raw=response.model_dump(),\n        )", "start_char_idx": 6119, "end_char_idx": 7471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50143c22-65e0-4e7f-ab78-ac8f31a1b627": {"__data__": {"id_": "50143c22-65e0-4e7f-ab78-ac8f31a1b627", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82e34590-6d59-4f55-9e33-b00be693fcdc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8dc5658b66f04fdd7033091baff07706abd80c0f232912bf4a41c2c6dfc0ad55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "24e20a16-7ebd-4ebf-aba7-14697990c2f7", "node_type": "1", "metadata": {}, "hash": "fca25c8c2b7bb8c7bfc84096c65fab9f55e5e574176277b1d57684cbd7eb1fe9", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> List[dict]:\n        \"\"\"Format the input string and dictionary into the format that\n        OpenAI Chat API required.\n\n        Args:\n            args (`Union[MessageBase, Sequence[MessageBase]]`):\n                The input arguments to be formatted, where each argument\n                should be a `Msg` object, or a list of `Msg` objects.\n                In distribution, placeholder is also allowed.\n\n        Returns:\n            `List[dict]`:\n                The formatted messages in the format that OpenAI Chat API\n                required.\n        \"\"\"\n\n        messages = []\n        for arg in args:\n            if arg is None:\n                continue\n            if isinstance(arg, MessageBase):\n                messages.append(\n                    {\n                        \"role\": arg.role,\n                        \"name\": arg.name,\n                        \"content\": _convert_to_str(arg.content),\n                    },\n                )\n            elif isinstance(arg, list):\n                messages.extend(self.format(*arg))\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(arg)}.\",\n                )\n\n        return messages", "start_char_idx": 7477, "end_char_idx": 8826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24e20a16-7ebd-4ebf-aba7-14697990c2f7": {"__data__": {"id_": "24e20a16-7ebd-4ebf-aba7-14697990c2f7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50143c22-65e0-4e7f-ab78-ac8f31a1b627", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "44f7afa11de856c5127d3fc025b2f7c3c56991052eeae1daf813faec16dff088", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be8c6114-cf70-4669-b656-b01dcf443c47", "node_type": "1", "metadata": {}, "hash": "2ee43e7b551bf9cba8b49298526e827aba0292769de4953d5b83472fe9676871", "class_name": "RelatedNodeInfo"}}, "text": "class OpenAIDALLEWrapper(OpenAIWrapperBase):", "start_char_idx": 8829, "end_char_idx": 8873, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be8c6114-cf70-4669-b656-b01dcf443c47": {"__data__": {"id_": "be8c6114-cf70-4669-b656-b01dcf443c47", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "24e20a16-7ebd-4ebf-aba7-14697990c2f7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ec770dc87468f61bfb67416331e845507c368d70d9f6a6644128beab97a52472", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d955bb63-90bd-41ca-8262-615ff2fc6940", "node_type": "1", "metadata": {}, "hash": "6868de586077fdefdd210fe3eb4a8251aa381f733b77cfe4b06a5ff51b54c223", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for OpenAI's DALL\u00b7E API.\"\"\"\n\n    model_type: str = \"openai_dall_e\"\n\n    _resolutions: list = [\n        \"1792*1024\",\n        \"1024*1792\",\n        \"1024*1024\",\n        \"512*512\",\n        \"256*256\",\n    ]\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        for resolution in self._resolutions:\n            self.monitor.register(\n                self._metric(resolution),\n                metric_unit=\"image\",\n            )", "start_char_idx": 8878, "end_char_idx": 9524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d955bb63-90bd-41ca-8262-615ff2fc6940": {"__data__": {"id_": "d955bb63-90bd-41ca-8262-615ff2fc6940", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be8c6114-cf70-4669-b656-b01dcf443c47", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3c6e0f0d8c55a19cd03ca9169e85ca311d984862343ed4fcadc4f06250dee895", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65fd8c27-2e07-4a1e-8960-29776128a64e", "node_type": "1", "metadata": {}, "hash": "ed9f43cf6afa8599911803ac176981ef556a03310886a8a984d9029e70f97cec", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        prompt: str,\n        save_local: bool = False,\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 9530, "end_char_idx": 9659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65fd8c27-2e07-4a1e-8960-29776128a64e": {"__data__": {"id_": "65fd8c27-2e07-4a1e-8960-29776128a64e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d955bb63-90bd-41ca-8262-615ff2fc6940", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "830ffaa6e4ffa8024f92341b4819ef5d4c85fd884cc78ca822ccf0dcecfd94fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b5ded301-62b7-44c4-872e-301a2253e5f8", "node_type": "1", "metadata": {}, "hash": "afa10b2c72183cb61f5093b63c58ff187e27981d606344896c0a734c7c4222e7", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n        Args:\n            prompt (`str`):\n                The prompt string to generate images from.\n            save_local: (`bool`, default `False`):\n                Whether to save the generated images locally, and replace\n                the returned image url with the local path.\n            **kwargs (`Any`):\n                The keyword arguments to OpenAI image generation API, e.g.\n                `n`, `quality`, `response_format`, `size`, etc. Please refer to\n                https://platform.openai.com/docs/api-reference/images/create\n                for more detailed arguments.\n\n        Returns:\n            `ModelResponse`:\n                A list of image urls in image_urls field and the\n                raw response in raw field.\n\n        Note:\n            `parse_func`, `fault_handler` and `max_retries` are reserved for\n            `_response_parse_decorator` to parse and check the response\n            generated by model wrapper. Their usages are listed as follows:\n                - `parse_func` is a callable function used to parse and check\n                the response generated by the model, which takes the response\n                as input.\n                - `max_retries` is the maximum number of retries when the\n                `parse_func` raise an exception.\n                - `fault_handler` is a callable function which is called\n                when the response generated by the model is invalid after\n                `max_retries` retries.\n        \"\"\"", "start_char_idx": 9668, "end_char_idx": 11162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5ded301-62b7-44c4-872e-301a2253e5f8": {"__data__": {"id_": "b5ded301-62b7-44c4-872e-301a2253e5f8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65fd8c27-2e07-4a1e-8960-29776128a64e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8c456afb71c1d9dbedf133d12efc75a48081203a8d71804ec9e1abc506e3f5b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e8b0be9-2c30-48ba-927e-b2f00034e58f", "node_type": "1", "metadata": {}, "hash": "d349f94ef81e38c6c7d11de1d96730b9393dc892443167c25d902ba47bc743ce", "class_name": "RelatedNodeInfo"}}, "text": "# step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: forward to generate response\n        try:\n            response = self.client.images.generate(\n                model=self.model_name,\n                prompt=prompt,\n                **kwargs,\n            )\n        except Exception as e:\n            logger.error(\n                f\"Failed to generate images for prompt '{prompt}': {e}\",\n            )\n            raise e\n\n        # step3: record the model api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"prompt\": prompt,\n                **kwargs,\n            },\n            response=response.model_dump(),\n        )\n\n        # step4: update monitor accordingly\n        self.update_monitor(call_counter=1)\n\n        # step5: return response\n        raw_response = response.model_dump()\n        images = raw_response[\"data\"]\n        # Get image urls as a list\n        urls = [_[\"url\"] for _ in images]\n\n        if save_local:\n            # Return local url if save_local is True\n            urls = [file_manager.save_image(_) for _ in urls]\n        return ModelResponse(image_urls=urls, raw=raw_response)", "start_char_idx": 11171, "end_char_idx": 12419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e8b0be9-2c30-48ba-927e-b2f00034e58f": {"__data__": {"id_": "4e8b0be9-2c30-48ba-927e-b2f00034e58f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5ded301-62b7-44c4-872e-301a2253e5f8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "494b66bc72a50d968500b5399b31e23ddac7e742fb7ab16cd960aa3a1a8d3351", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "938b320a-16d5-4043-9a14-faabd07c3ada", "node_type": "1", "metadata": {}, "hash": "f0fecbf3749bca8992b4de77056f9a3d08eeb217e785a7d0d599cc2c2ce1ddf9", "class_name": "RelatedNodeInfo"}}, "text": "class OpenAIEmbeddingWrapper(OpenAIWrapperBase):", "start_char_idx": 12422, "end_char_idx": 12470, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "938b320a-16d5-4043-9a14-faabd07c3ada": {"__data__": {"id_": "938b320a-16d5-4043-9a14-faabd07c3ada", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e8b0be9-2c30-48ba-927e-b2f00034e58f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "af6b5fd64b2fa723e0df9a629ba94afd9701ae1810abbe1f62ccff7665a140c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74260471-fe23-4a90-b01a-7cdd950c4b6f", "node_type": "1", "metadata": {}, "hash": "e1c33025e2c04447f8b666cb410026e15ca9501672e354c55e76677a3a35136f", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The model wrapper for OpenAI embedding API.\"\"\"\n\n    model_type: str = \"openai_embedding\"\n\n    def _register_default_metrics(self) -> None:\n        # Set monitor accordingly\n        # TODO: set quota to the following metrics\n        self.monitor.register(\n            self._metric(\"call_counter\"),\n            metric_unit=\"times\",\n        )\n        self.monitor.register(\n            self._metric(\"prompt_tokens\"),\n            metric_unit=\"token\",\n        )\n        self.monitor.register(\n            self._metric(\"total_tokens\"),\n            metric_unit=\"token\",\n        )", "start_char_idx": 12475, "end_char_idx": 13050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74260471-fe23-4a90-b01a-7cdd950c4b6f": {"__data__": {"id_": "74260471-fe23-4a90-b01a-7cdd950c4b6f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "938b320a-16d5-4043-9a14-faabd07c3ada", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f3a635250e174288a65ad5457193f9e86bce8ccf3d69203eb9815210055c004d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00d84840-b2ca-4093-9d8a-2ced27744132", "node_type": "1", "metadata": {}, "hash": "6f514be9873a66402ffbdea469f7f265c912400bc0d9068b307400f0b6b43249", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(\n        self,\n        texts: Union[list[str], str],\n        **kwargs: Any,\n    ) -> ModelResponse:", "start_char_idx": 13056, "end_char_idx": 13168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00d84840-b2ca-4093-9d8a-2ced27744132": {"__data__": {"id_": "00d84840-b2ca-4093-9d8a-2ced27744132", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74260471-fe23-4a90-b01a-7cdd950c4b6f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05465d44639ed7a177b971935c09251894c7fdb27a474bf2cf074bba53daadbe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0949c5d2-b20f-4a99-8769-0a2b7508604b", "node_type": "1", "metadata": {}, "hash": "a57f75ed870c4a4af5e25397d0318aa8edbb9af4b4388a1f5db0e3274df1e8a0", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Embed the messages with OpenAI embedding API.\n\n        Args:\n            texts (`list[str]` or `str`):\n                The messages used to embed.\n            **kwargs (`Any`):\n                The keyword arguments to OpenAI embedding API,\n                e.g. `encoding_format`, `user`. Please refer to\n                https://platform.openai.com/docs/api-reference/embeddings\n                for more detailed arguments.\n\n        Returns:\n            `ModelResponse`:\n                A list of embeddings in embedding field and the\n                raw response in raw field.\n\n        Note:\n            `parse_func`, `fault_handler` and `max_retries` are reserved for\n            `_response_parse_decorator` to parse and check the response\n            generated by model wrapper. Their usages are listed as follows:\n                - `parse_func` is a callable function used to parse and check\n                the response generated by the model, which takes the response\n                as input.\n                - `max_retries` is the maximum number of retries when the\n                `parse_func` raise an exception.\n                - `fault_handler` is a callable function which is called\n                when the response generated by the model is invalid after\n                `max_retries` retries.\n        \"\"\"\n        # step1: prepare keyword arguments\n        kwargs = {**self.generate_args, **kwargs}\n\n        # step2: forward to generate response", "start_char_idx": 13177, "end_char_idx": 14639, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0949c5d2-b20f-4a99-8769-0a2b7508604b": {"__data__": {"id_": "0949c5d2-b20f-4a99-8769-0a2b7508604b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ecb1e871c12c91c7bf401806eb4fb1b9e8d7d38dda7088c080f8ea6ee366f4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00d84840-b2ca-4093-9d8a-2ced27744132", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "06e19c4b7e3ba54f23c08dfacc06597fb18b2fc1b1c3457dbcbd8e599d67df6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c", "node_type": "1", "metadata": {}, "hash": "929a482febbd42517160737199e3803af3ace70d02ea3717092c16ecee54e92b", "class_name": "RelatedNodeInfo"}}, "text": "response = self.client.embeddings.create(\n            input=texts,\n            model=self.model_name,\n            **kwargs,\n        )\n\n        # step3: record the model api invocation if needed\n        self._save_model_invocation(\n            arguments={\n                \"model\": self.model_name,\n                \"input\": texts,\n                **kwargs,\n            },\n            response=response.model_dump(),\n        )\n\n        # step4: update monitor accordingly\n        self.update_monitor(call_counter=1, **response.usage.model_dump())\n\n        # step5: return response\n        response_json = response.model_dump()\n        if len(response_json[\"data\"]) == 0:\n            return ModelResponse(\n                embedding=response_json[\"data\"][\"embedding\"][0],\n                raw=response_json,\n            )\n        else:\n            return ModelResponse(\n                embedding=[_[\"embedding\"] for _ in response_json[\"data\"]],\n                raw=response_json,\n            )", "start_char_idx": 14648, "end_char_idx": 15635, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c": {"__data__": {"id_": "1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0949c5d2-b20f-4a99-8769-0a2b7508604b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b48e2bbb5f9f65c6fbbc674fa9c191b77191bb4500e1a3ba84ac84f7b88afe8f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ff61220-56a9-4dbd-85e1-bd71d454d33d", "node_type": "1", "metadata": {}, "hash": "a53faa8c390bb0b3348403b0425226ad45d78209208a7389da02a575473ee5b0", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Model wrapper for post-based inference apis.\"\"\"\nimport json\nimport time\nfrom abc import ABC\nfrom typing import Any, Union, Sequence, List\n\nimport requests\nfrom loguru import logger\n\nfrom .model import ModelWrapperBase, ModelResponse\nfrom ..constants import _DEFAULT_MAX_RETRIES\nfrom ..constants import _DEFAULT_MESSAGES_KEY\nfrom ..constants import _DEFAULT_RETRY_INTERVAL\nfrom ..message import MessageBase\nfrom ..utils.tools import _convert_to_str", "start_char_idx": 0, "end_char_idx": 474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ff61220-56a9-4dbd-85e1-bd71d454d33d": {"__data__": {"id_": "1ff61220-56a9-4dbd-85e1-bd71d454d33d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a79a381e09aefb8790e9a5c255996668f645f2cbfffed375d8283dfa68e20943", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1879acd3-2a22-4314-b25e-fb20cb88f5cf", "node_type": "1", "metadata": {}, "hash": "1b9a9aa6a00c9a0470774e14737bad143c89126351d06796376bb78b3996b72d", "class_name": "RelatedNodeInfo"}}, "text": "class PostAPIModelWrapperBase(ModelWrapperBase, ABC):", "start_char_idx": 477, "end_char_idx": 530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1879acd3-2a22-4314-b25e-fb20cb88f5cf": {"__data__": {"id_": "1879acd3-2a22-4314-b25e-fb20cb88f5cf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ff61220-56a9-4dbd-85e1-bd71d454d33d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b1dd91401fa40f2cea859bf2d33d3a0fea16b4f4c6ee5a1c35f2b01b52d04034", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f914817a-8b72-456d-93e4-fbc96996eecf", "node_type": "1", "metadata": {}, "hash": "adaf5a6ee69a404e4d83e82cff6b752c1d0448d8fa7e6aa7032ef74d4034a8dd", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The base model wrapper for the model deployed on the POST API.\"\"\"\n\n    model_type: str = \"post_api\"", "start_char_idx": 535, "end_char_idx": 637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f914817a-8b72-456d-93e4-fbc96996eecf": {"__data__": {"id_": "f914817a-8b72-456d-93e4-fbc96996eecf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1879acd3-2a22-4314-b25e-fb20cb88f5cf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b003aed3e3528541a33738ef2fe1e2c29e335cc2a731e781fc166783bf4338fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68e690d9-24fc-452b-a84d-003c1c761c13", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        config_name: str,\n        api_url: str,\n        headers: dict = None,\n        max_length: int = 2048,\n        timeout: int = 30,\n        json_args: dict = None,\n        post_args: dict = None,\n        max_retries: int = _DEFAULT_MAX_RETRIES,\n        messages_key: str = _DEFAULT_MESSAGES_KEY,\n        retry_interval: int = _DEFAULT_RETRY_INTERVAL,\n        **kwargs: Any,\n    ) -> None:", "start_char_idx": 643, "end_char_idx": 1064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68e690d9-24fc-452b-a84d-003c1c761c13": {"__data__": {"id_": "68e690d9-24fc-452b-a84d-003c1c761c13", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f914817a-8b72-456d-93e4-fbc96996eecf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8d7bb98132d237c2a486f3138c67f5f18a3fb8ca283265022593961952c5a2b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "605531cd-0255-4282-a395-05f4ae4da847", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "605531cd-0255-4282-a395-05f4ae4da847": {"__data__": {"id_": "605531cd-0255-4282-a395-05f4ae4da847", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68e690d9-24fc-452b-a84d-003c1c761c13", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b40071c729a082c4df21cd686c06093f7b998408c10c6216715212e08857c20d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ec7a1b9-aa56-4960-a600-7e21fa277c0e", "node_type": "1", "metadata": {}, "hash": "eccf0f6a48f6a49ab3ecff965e9b8bc18174f80487e28b5c204403bf1f7d4b5e", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ec7a1b9-aa56-4960-a600-7e21fa277c0e": {"__data__": {"id_": "6ec7a1b9-aa56-4960-a600-7e21fa277c0e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "605531cd-0255-4282-a395-05f4ae4da847", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b40071c729a082c4df21cd686c06093f7b998408c10c6216715212e08857c20d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "001dbdb3-8b84-40ca-b1eb-e495d2585290", "node_type": "1", "metadata": {}, "hash": "1f1d76fbda532b28559db8d1853701f4e7da879b2cf287565748e8c0ea198906", "class_name": "RelatedNodeInfo"}}, "text": "super().__init__(config_name=config_name)\n\n        self.api_url = api_url\n        self.headers = headers\n        self.max_length = max_length\n        self.timeout = timeout\n        self.json_args = json_args or {}\n        self.post_args = post_args or {}\n        self.max_retries = max_retries\n        self.messages_key = messages_key\n        self.retry_interval = retry_interval", "start_char_idx": 2705, "end_char_idx": 3084, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "001dbdb3-8b84-40ca-b1eb-e495d2585290": {"__data__": {"id_": "001dbdb3-8b84-40ca-b1eb-e495d2585290", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ec7a1b9-aa56-4960-a600-7e21fa277c0e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a3dd72279f4c5ad22c566c953f0d78a9b19298f86e523f3b3f9d04d316593922", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9514d9d-b6eb-45a9-86df-36abf1dc0265", "node_type": "1", "metadata": {}, "hash": "f13296a400a57b1d5077a673abcd05eb7e17fd854893e8ed733ab08adcd9bbac", "class_name": "RelatedNodeInfo"}}, "text": "def _parse_response(self, response: dict) -> ModelResponse:\n        \"\"\"Parse the response json data into ModelResponse\"\"\"\n        return ModelResponse(raw=response)", "start_char_idx": 3090, "end_char_idx": 3254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9514d9d-b6eb-45a9-86df-36abf1dc0265": {"__data__": {"id_": "a9514d9d-b6eb-45a9-86df-36abf1dc0265", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "001dbdb3-8b84-40ca-b1eb-e495d2585290", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0663fc6df72a5cbbeb906cb8c32a31484549915ff8916727a7d9a9cc865fecc1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e7799d2-1623-4ffe-aa10-df6b078313a6", "node_type": "1", "metadata": {}, "hash": "8998a1dfb0a206b3a263c2b24029036d0b7f7d9cf759a5adf01455d39992a651", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(self, input_: str, **kwargs: Any) -> ModelResponse:", "start_char_idx": 3260, "end_char_idx": 3324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e7799d2-1623-4ffe-aa10-df6b078313a6": {"__data__": {"id_": "3e7799d2-1623-4ffe-aa10-df6b078313a6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9514d9d-b6eb-45a9-86df-36abf1dc0265", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ca6013acf9276b11832ec78d3b4a2fdb2cddd7f67f6ff33d54a6e4604a692da7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2801fdac-64d1-41bd-bc4b-6bb236251f1b", "node_type": "1", "metadata": {}, "hash": "aba123c2cb439145599c6ed8b16a299c5b40c5ed282375bd52d5409a552f4d2e", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Calling the model with requests.post.\n\n        Args:\n            input_ (`str`):\n                The input string to the model.\n\n        Returns:\n            `dict`: A dictionary that contains the response of the model and\n            related\n            information (e.g. cost, time, the number of tokens, etc.).\n\n        Note:\n            `parse_func`, `fault_handler` and `max_retries` are reserved for\n            `_response_parse_decorator` to parse and check the response\n            generated by model wrapper. Their usages are listed as follows:\n                - `parse_func` is a callable function used to parse and check\n                the response generated by the model, which takes the response\n                as input.\n                - `max_retries` is the maximum number of retries when the\n                `parse_func` raise an exception.\n                - `fault_handler` is a callable function which is called\n                when the response generated by the model is invalid after\n                `max_retries` retries.\n        \"\"\"\n        # step1: prepare keyword arguments\n        post_args = {**self.post_args, **kwargs}\n\n        request_kwargs = {\n            \"url\": self.api_url,\n            \"json\": {self.messages_key: input_, **self.json_args},\n            \"headers\": self.headers or {},\n            **post_args,\n        }\n\n        # step2: prepare post requests", "start_char_idx": 3333, "end_char_idx": 4730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2801fdac-64d1-41bd-bc4b-6bb236251f1b": {"__data__": {"id_": "2801fdac-64d1-41bd-bc4b-6bb236251f1b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e7799d2-1623-4ffe-aa10-df6b078313a6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "df7a438619ddcb8853b7959e345c7717d7aa7e29ee3295fe168b19f187396319", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12f3dc5a-57ec-4598-ad13-4cab5c21b956", "node_type": "1", "metadata": {}, "hash": "d97b04b9ab6f9459f36a6b00cad1d27bd78a5e855858a6e7ac4eeaf2a21ffdb7", "class_name": "RelatedNodeInfo"}}, "text": "for i in range(1, self.max_retries + 1):\n            response = requests.post(**request_kwargs)\n\n            if response.status_code == requests.codes.ok:\n                break\n\n            if i < self.max_retries:\n                logger.warning(\n                    f\"Failed to call the model with \"\n                    f\"requests.codes == {response.status_code}, retry \"\n                    f\"{i + 1}/{self.max_retries} times\",\n                )\n                time.sleep(i * self.retry_interval)\n\n        # step3: record model invocation\n        # record the model api invocation, which will be skipped if\n        # `FileManager.save_api_invocation` is `False`\n        self._save_model_invocation(\n            arguments=request_kwargs,\n            response=response.json(),\n        )\n\n        # step4: parse the response\n        if response.status_code == requests.codes.ok:\n            return self._parse_response(response.json())\n        else:\n            logger.error(json.dumps(request_kwargs, indent=4))\n            raise RuntimeError(\n                f\"Failed to call the model with {response.json()}\",\n            )", "start_char_idx": 4739, "end_char_idx": 5865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12f3dc5a-57ec-4598-ad13-4cab5c21b956": {"__data__": {"id_": "12f3dc5a-57ec-4598-ad13-4cab5c21b956", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2801fdac-64d1-41bd-bc4b-6bb236251f1b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "17056d6f83786d425f0a72d194365395a84f6498ca8a9f92fa55a3aea5dc3ed0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6494e0e8-4243-4cd9-9771-493359de84d4", "node_type": "1", "metadata": {}, "hash": "f64984fa985c1ffb536d8764ddd3a0d1b21cd0eb7a2cf254bf54624db2fb3641", "class_name": "RelatedNodeInfo"}}, "text": "class PostAPIChatWrapper(PostAPIModelWrapperBase):", "start_char_idx": 5868, "end_char_idx": 5918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6494e0e8-4243-4cd9-9771-493359de84d4": {"__data__": {"id_": "6494e0e8-4243-4cd9-9771-493359de84d4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12f3dc5a-57ec-4598-ad13-4cab5c21b956", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3b8625a0c7c12abc2b462703c6188ae02bc912082c75ab8ffc84d22b98019993", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a11f8710-89ef-4c51-8932-a29ee3311657", "node_type": "1", "metadata": {}, "hash": "909d55490ea5d724d4114c3a2f9cd9755cad000b1ef0f4142b24cac92b496e89", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A post api model wrapper compatilble with openai chat, e.g., vLLM,\n    FastChat.\"\"\"\n\n    model_type: str = \"post_api_chat\"\n\n    def _parse_response(self, response: dict) -> ModelResponse:\n        return ModelResponse(\n            text=response[\"data\"][\"response\"][\"choices\"][0][\"message\"][\n                \"content\"\n            ],\n        )", "start_char_idx": 5923, "end_char_idx": 6266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a11f8710-89ef-4c51-8932-a29ee3311657": {"__data__": {"id_": "a11f8710-89ef-4c51-8932-a29ee3311657", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6494e0e8-4243-4cd9-9771-493359de84d4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b440e995c099c7b243c39b9cd4475175b42a72711d94223160cbc4272b8c3d31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d89054a5-7344-4651-9973-6596da32699e", "node_type": "1", "metadata": {}, "hash": "5abce08b94ee72bf878956aef74aa7b1f58d09609ca9c70b09213b405f33af0c", "class_name": "RelatedNodeInfo"}}, "text": "def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict]]:\n        \"\"\"Format the input messages into a list of dict, which is\n        compatible to OpenAI Chat API.\n\n        Args:\n            args (`Union[MessageBase, Sequence[MessageBase]]`):\n                The input arguments to be formatted, where each argument\n                should be a `Msg` object, or a list of `Msg` objects.\n                In distribution, placeholder is also allowed.\n\n        Returns:\n            `Union[List[dict]]`:\n                The formatted messages.\n        \"\"\"\n        messages = []\n        for arg in args:\n            if arg is None:\n                continue\n            if isinstance(arg, MessageBase):\n                messages.append(\n                    {\n                        \"role\": arg.role,\n                        \"name\": arg.name,\n                        \"content\": _convert_to_str(arg.content),\n                    },\n                )\n            elif isinstance(arg, list):\n                messages.extend(self.format(*arg))\n            else:\n                raise TypeError(\n                    f\"The input should be a Msg object or a list \"\n                    f\"of Msg objects, got {type(arg)}.\",\n                )\n\n        return messages", "start_char_idx": 6272, "end_char_idx": 7575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d89054a5-7344-4651-9973-6596da32699e": {"__data__": {"id_": "d89054a5-7344-4651-9973-6596da32699e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5e004bdbc3b65941b2903200049c3a2d1901128055907eaae273057e52f494f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a11f8710-89ef-4c51-8932-a29ee3311657", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27cfa32b460ac8eaf33b484661cb1d754a65eb64266012ac968f0c2e6f239739", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd69364a-5aa0-4c34-98e5-78c426795885", "node_type": "1", "metadata": {}, "hash": "e393fca04fc65e93904a69e8fdd8f420f5ab4d98e2042e3f24a4d5a0da62ea9b", "class_name": "RelatedNodeInfo"}}, "text": "class PostAPIDALLEWrapper(PostAPIModelWrapperBase):\n    \"\"\"A post api model wrapper compatible with openai dalle\"\"\"\n\n    model_type: str = \"post_api_dall_e\"\n\n    deprecated_model_type: str = \"post_api_dalle\"\n\n    def _parse_response(self, response: dict) -> ModelResponse:\n        urls = [img[\"url\"] for img in response[\"data\"][\"response\"][\"data\"]]\n        return ModelResponse(image_urls=urls)\n\n    def format(\n        self,\n        *args: Union[MessageBase, Sequence[MessageBase]],\n    ) -> Union[List[dict], str]:\n        raise RuntimeError(\n            f\"Model Wrapper [{type(self).__name__}] doesn't \"\n            f\"need to format the input. Please try to use the \"\n            f\"model wrapper directly.\",\n        )", "start_char_idx": 7578, "end_char_idx": 8298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd69364a-5aa0-4c34-98e5-78c426795885": {"__data__": {"id_": "bd69364a-5aa0-4c34-98e5-78c426795885", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d89054a5-7344-4651-9973-6596da32699e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6b8fa3067fa8a22a7a9945e06d7ba33619fa9be75c187314de078ec0c75f9bfd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "867e25ec-30da-41b0-9165-f61eaf0ef9f9", "node_type": "1", "metadata": {}, "hash": "a80e7a2dcda7ef2bc0b6088ca1ee1d5f50d4ff7e5e6aeafaa9836f33dc44bc43", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Parser for model response.\"\"\"\nimport inspect\nimport json\nfrom typing import Optional, Sequence, Any, Callable\n\nfrom loguru import logger\n\nfrom agentscope.utils.tools import _is_json_serializable", "start_char_idx": 0, "end_char_idx": 221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "867e25ec-30da-41b0-9165-f61eaf0ef9f9": {"__data__": {"id_": "867e25ec-30da-41b0-9165-f61eaf0ef9f9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd69364a-5aa0-4c34-98e5-78c426795885", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a492c0591d235bab519f1c94dca0bd51d2e71552c2d4591da56486340c279d38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96eb79a0-d3e7-4f67-9320-e9b64b35d04b", "node_type": "1", "metadata": {}, "hash": "5ef0c2dc50c30b81f93b4db7bb51e038b07c31dbf51f68caf0dd2f302220857f", "class_name": "RelatedNodeInfo"}}, "text": "class ModelResponse:", "start_char_idx": 224, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96eb79a0-d3e7-4f67-9320-e9b64b35d04b": {"__data__": {"id_": "96eb79a0-d3e7-4f67-9320-e9b64b35d04b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "867e25ec-30da-41b0-9165-f61eaf0ef9f9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4e9daa0dbbbbab7a5721f93e410e2af4bb34bc36a506324c13a95e7fb76d10af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e", "node_type": "1", "metadata": {}, "hash": "365d93e7cbea8c83d81e2d12ef7b32a814f16ecdfb63ed10126650d50b3798f6", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Encapsulation of data returned by the model.\n\n    The main purpose of this class is to align the return formats of different\n    models and act as a bridge between models and agents.\n    \"\"\"\n\n    text: Optional[str] = None\n    embedding: Optional[Sequence] = None\n    raw: Optional[Any] = None\n    image_urls: Optional[Sequence[str]] = None\n    json: Optional[Any] = None\n\n    def __init__(\n        self,\n        text: str = None,\n        embedding: Sequence = None,\n        image_urls: Sequence[str] = None,\n        raw: Any = None,\n    ) -> None:\n        \"\"\"Initialize the model response.\n\n        Args:\n            text (`str`, optional):\n                The text field.\n            embedding (`Sequence`, optional):\n                The embedding returned by the model.\n            image_urls (`Sequence[str]`, optional):\n                The image URLs returned by the model.\n            raw (`Any`, optional):\n                The raw data returned by the model.\n        \"\"\"\n        self.text = text\n        self.embedding = embedding\n        self.image_urls = image_urls\n        self.raw = raw", "start_char_idx": 249, "end_char_idx": 1349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e": {"__data__": {"id_": "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96eb79a0-d3e7-4f67-9320-e9b64b35d04b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6e89e2ca75a673ad52339aa0e20e82833bbae0f60c8626f706b9d3a5c3fac6f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32e20de4-f236-4c0d-af50-2ddc688137b7", "node_type": "1", "metadata": {}, "hash": "66cef36fc5ef7a1c0108c788efd92e4fb22788f442b49635b09123e9c059e3c8", "class_name": "RelatedNodeInfo"}}, "text": "def __str__(self) -> str:\n        if _is_json_serializable(self.raw):\n            raw = self.raw\n        else:\n            raw = str(self.raw)\n\n        serialized_fields = {\n            \"text\": self.text,\n            \"embedding\": self.embedding,\n            \"image_urls\": self.image_urls,\n            \"json\": self.json,\n            \"raw\": raw,\n        }\n        return json.dumps(serialized_fields, indent=4, ensure_ascii=False)", "start_char_idx": 1355, "end_char_idx": 1783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32e20de4-f236-4c0d-af50-2ddc688137b7": {"__data__": {"id_": "32e20de4-f236-4c0d-af50-2ddc688137b7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d610de725332e4516b6eef93627dcf4a55ba11947451ca4f0391636db5d0cf7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b3e019f-3b40-476b-8514-c739c2c4d303", "node_type": "1", "metadata": {}, "hash": "973f9e2c0a7c89eeb1a8b0be961b55702c19d9934eee0380ab7b093a099cae23", "class_name": "RelatedNodeInfo"}}, "text": "class ResponseParser:", "start_char_idx": 1786, "end_char_idx": 1807, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b3e019f-3b40-476b-8514-c739c2c4d303": {"__data__": {"id_": "7b3e019f-3b40-476b-8514-c739c2c4d303", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32e20de4-f236-4c0d-af50-2ddc688137b7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e4bb22a27a7e35c3b8b8c6a2cfa64e1b33e99cbc869ed2a16d31c237eaf848ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "825a075e-3414-40fb-b5db-76b54047355e", "node_type": "1", "metadata": {}, "hash": "e626bac148deb07cafd9ea4244780096d4d72d35869db8534f672504c8dbaa0d", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A class that contains several static methods to parse the response.\"\"\"\n\n    @classmethod\n    def to_dict(cls, response: ModelResponse) -> ModelResponse:\n        \"\"\"Parse the response text to a dict, and feed it into the `json`\n        field.\"\"\"\n        text = response.text\n        if text is not None:\n            logger.debug(\"Text before parsing\", text)\n\n            # extract from the first '{' to the last '}'\n            index_start = max(text.find(\"{\"), 0)\n            index_end = min(text.rfind(\"}\") + 1, len(text))\n\n            text = text[index_start:index_end]\n            logger.debug(\"Text after parsing\", text)\n\n            response.text = text\n            response.json = json.loads(text)\n            return response\n        else:\n            raise ValueError(\n                f\"The text field of the model response is None: {response}\",\n            )", "start_char_idx": 1812, "end_char_idx": 2681, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "825a075e-3414-40fb-b5db-76b54047355e": {"__data__": {"id_": "825a075e-3414-40fb-b5db-76b54047355e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b3e019f-3b40-476b-8514-c739c2c4d303", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b458357179ef26a75f328ba3362284520c2e02e88631a3f6dc7b57b36385e081", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e", "node_type": "1", "metadata": {}, "hash": "bfc3d790381c130e0d87f9bfa83a900ce58971d6df91c25c27ffe013fcb5d4a6", "class_name": "RelatedNodeInfo"}}, "text": "@classmethod\n    def to_list(cls, response: ModelResponse) -> ModelResponse:\n        \"\"\"Parse the response text to a list, and feed it into the `json`\n        field.\"\"\"\n        text = response.text\n        if text is not None:\n            logger.debug(\"Text before parsing\", text)\n\n            # extract from the first '{' to the last '}'\n            index_start = max(text.find(\"[\"), 0)\n            index_end = min(text.rfind(\"]\") + 1, len(text))\n\n            text = text[index_start:index_end]\n            logger.debug(\"Text after parsing\", text)\n\n            response.text = text\n            response.json = json.loads(text)\n            return response\n        else:\n            raise ValueError(\n                f\"The text field of the model response is None: {response}\",\n            )", "start_char_idx": 2687, "end_char_idx": 3477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e": {"__data__": {"id_": "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d9feb21-0e61-4670-846f-cadeb250cb62", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b8e22a60178a3d95ead7111840c9b301ec12a1bc45402ff91557629aa699807b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "825a075e-3414-40fb-b5db-76b54047355e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e12f24913a2eae632c378f4be695c72500402c2916b020fc58d9ccb8ccaf1db3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15fc1be8-be12-4ce7-bad9-97b08336af4b", "node_type": "1", "metadata": {}, "hash": "9bbb2e2bd23d992ba5a69d5b92939ec97b05b6bdce25c0044292ec7a4e002e03", "class_name": "RelatedNodeInfo"}}, "text": "class ResponseParsingError(Exception):\n    \"\"\"Exception raised when parsing the response fails.\"\"\"\n\n    parse_func: str\n    \"\"\"The source code of the parsing function.\"\"\"\n\n    error_info: str\n    \"\"\"The detail information of the error.\"\"\"\n\n    response: ModelResponse\n    \"\"\"The response that fails to be parsed.\"\"\"\n\n    def __init__(\n        self,\n        *args: Any,\n        parse_func: Callable,\n        error_info: str,\n        response: ModelResponse,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize the exception.\n\n        Args:\n            parse_func (`str`):\n                The source code of the parsing function.\n            error_info (`str`):\n                The detail information of the error.\n            response (`ModelResponse`):\n                The response that fails to be parsed.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n\n        self.parse_func_code = inspect.getsource(parse_func)\n        self.error_info = error_info\n        self.response = response\n\n    def __str__(self) -> str:\n        return (\n            f\"Fail to parse response with the following parsing function:\\n\"\n            f\"## PARSE FUNCTION: \\n\"\n            f\"```python\\n\"\n            f\"{self.parse_func_code}\"\n            f\"```\\n\\n\"\n            f\"## ERROR INFO: \\n\"\n            f\"{self.error_info}\\n\\n\"\n            f\"## INPUT RESPONSE: \\n\"\n            f\"{self.response}\"\n        )", "start_char_idx": 3480, "end_char_idx": 4878, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15fc1be8-be12-4ce7-bad9-97b08336af4b": {"__data__": {"id_": "15fc1be8-be12-4ce7-bad9-97b08336af4b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b7e1be94cf80ae8dbb96cac429393c019802504d62a901f856c86bebafe4d140", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "09c76815-8809-4cec-bd9e-8c5284907f55", "node_type": "1", "metadata": {}, "hash": "6a7a233137d7be7afcc4c6a7b578242beb61e78bed72ae38f8e13e1248139b70", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"MsgHub is designed to share messages among a group of agents.\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Any, Optional, Union, Sequence\n\nfrom loguru import logger\n\nfrom agentscope.agents import AgentBase", "start_char_idx": 0, "end_char_idx": 245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09c76815-8809-4cec-bd9e-8c5284907f55": {"__data__": {"id_": "09c76815-8809-4cec-bd9e-8c5284907f55", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15fc1be8-be12-4ce7-bad9-97b08336af4b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e1ef8d785f7f03725706691c0bdbc73f7aec051f387225cf67ab8347988fa2e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6e372ee-dee0-4783-b3f8-7cfd914d605e", "node_type": "1", "metadata": {}, "hash": "a1d1e3d83ea5187bd3f196a67952267cd09d839421a5cb23bf866feb0185a076", "class_name": "RelatedNodeInfo"}}, "text": "class MsgHubManager:", "start_char_idx": 248, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6e372ee-dee0-4783-b3f8-7cfd914d605e": {"__data__": {"id_": "c6e372ee-dee0-4783-b3f8-7cfd914d605e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "09c76815-8809-4cec-bd9e-8c5284907f55", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98b126cec0d32e50602414d1d62e870a90d22237b7bf503b68fd0c859c73f054", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1eb64ee-9ffd-4fa3-9422-4761637130b8", "node_type": "1", "metadata": {}, "hash": "cb0cf5051e2c91133232c5738752498602b91b36ff1e44fc90f79a084cbe8279", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"MsgHub manager class for sharing dialog among a group of agents.\"\"\"\n\n    def __init__(\n        self,\n        participants: Sequence[AgentBase],\n        announcement: Optional[Union[Sequence[dict], dict]] = None,\n    ) -> None:\n        \"\"\"Initialize a msghub manager from the given arguments.\n\n        Args:\n            participants (`Sequence[AgentBase]`):\n                The Sequence of participants in the msghub.\n            announcement (`Optional[Union[list[dict], dict]]`, defaults to\n            `None`):\n                The message that will be broadcast to all participants at\n                the first without requiring response.\n        \"\"\"\n        self.participants = participants\n        self.announcement = announcement\n\n    def __enter__(self) -> MsgHubManager:\n        \"\"\"Will be called when entering the msghub.\"\"\"\n        name_participants = [agent.name for agent in self.participants]\n        logger.debug(\n            \"Enter msghub with participants: {}\",\n            \", \".join(\n                name_participants,\n            ),\n        )\n\n        self._reset_audience()\n\n        # broadcast the input message to all participants\n        if self.announcement is not None:\n            for agent in self.participants:\n                agent.observe(self.announcement)\n\n        return self\n\n    def __exit__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Will be called when exiting the msghub.\"\"\"\n        for agent in self.participants:\n            agent.clear_audience()", "start_char_idx": 273, "end_char_idx": 1771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1eb64ee-9ffd-4fa3-9422-4761637130b8": {"__data__": {"id_": "f1eb64ee-9ffd-4fa3-9422-4761637130b8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6e372ee-dee0-4783-b3f8-7cfd914d605e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "964c9247ef80fe2b44bec88b68f21671f67023377408ed21c6fa92d20eac0b9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187", "node_type": "1", "metadata": {}, "hash": "adb37eebedec8308074e42da2802b415632e8d79e0527089dbea0143fc65ba61", "class_name": "RelatedNodeInfo"}}, "text": "def _reset_audience(self) -> None:\n        \"\"\"Reset the audience for agent in `self.participant`\"\"\"\n        for agent in self.participants:\n            agent.reset_audience(self.participants)\n\n    def add(\n        self,\n        new_participant: Union[Sequence[AgentBase], AgentBase],\n    ) -> None:\n        \"\"\"Add new participant into this hub\"\"\"\n        if isinstance(new_participant, AgentBase):\n            new_participant = [new_participant]\n\n        for agent in new_participant:\n            if agent not in self.participants:\n                self.participants.append(agent)\n            else:\n                logger.warning(\n                    f\"Skip adding agent [{agent.name}] for it has \"\n                    \"already joined in.\",\n                )\n\n        self._reset_audience()", "start_char_idx": 1777, "end_char_idx": 2566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187": {"__data__": {"id_": "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1eb64ee-9ffd-4fa3-9422-4761637130b8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4ae2d42af2b15a6e7d69389b134f1222bfd20122f07dff5261a680b1468e226", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12f88757-a0c3-45c8-bff7-c7dda5e3ca49", "node_type": "1", "metadata": {}, "hash": "becbb034e7f42d8d18673651d3020f7ba40ab12315b944253b4afb361ab02baf", "class_name": "RelatedNodeInfo"}}, "text": "def delete(\n        self,\n        participant: Union[Sequence[AgentBase], AgentBase],\n    ) -> None:\n        \"\"\"Delete agents from participant.\"\"\"\n        if isinstance(participant, AgentBase):\n            participant = [participant]\n\n        for agent in participant:\n            if agent in self.participants:\n                # Clear the audience of the deleted agent firstly\n                agent.clear_audience()\n\n                # remove agent from self.participant\n                self.participants.pop(self.participants.index(agent))\n            else:\n                logger.warning(\n                    f\"Cannot find agent [{agent.name}], skip its\"\n                    f\" deletion.\",\n                )\n\n        # Remove this agent from the audience of other agents\n        self._reset_audience()\n\n    def broadcast(self, msg: Union[dict, list[dict]]) -> None:\n        \"\"\"Broadcast the message to all participants.\n\n        Args:\n            msg (`Union[dict, list[dict]]`):\n                One or a list of dict messages to broadcast among all\n                participants.\n        \"\"\"\n        for agent in self.participants:\n            agent.observe(msg)", "start_char_idx": 2572, "end_char_idx": 3736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12f88757-a0c3-45c8-bff7-c7dda5e3ca49": {"__data__": {"id_": "12f88757-a0c3-45c8-bff7-c7dda5e3ca49", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef4527dd-f698-4784-b75d-405c21e248ea", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b3c47e05674e5bc61ffc1f5624e8b36be6f4b71fa2b38fa408caa27bfb9635b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "68edc6914f9ebd9ee6ae9fdb8752546c8df045b50ac99ccd967872cb844db98f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56d2cef5-cd53-4230-bab4-b630f06ef9b1", "node_type": "1", "metadata": {}, "hash": "29c30f0c4e9a12247ea61b0988e28fa12fc72db8152881f5e22ec3800cd76543", "class_name": "RelatedNodeInfo"}}, "text": "def msghub(\n    participants: Sequence[AgentBase],\n    announcement: Optional[Union[Sequence[dict], dict]] = None,\n) -> MsgHubManager:\n    \"\"\"msghub is used to share messages among a group of agents.\n\n    Args:\n        participants (`Sequence[AgentBase]`):\n            A Sequence of participated agents in the msghub.\n        announcement (`Optional[Union[list[dict], dict]]`, defaults to `None`):\n            The message that will be broadcast to all participants at the\n            very beginning without requiring response.\n\n    Example:\n        In the following code, we create a msghub with three agents, and each\n        message output by `agent1`, `agent2`, `agent3` will be passed to all\n        other agents, that's what we mean msghub.\n\n        .. code-block:: python\n\n            with msghub(participant=[agent1, agent2, agent3]):\n                agent1()\n                agent2()\n\n        Actually, it has the same effect as the following code, but much more\n        easy and elegant!\n\n        .. code-block:: python\n\n            x1 = agent1()\n            agent2.observe(x1)\n            agent3.observe(x1)\n\n            x2 = agent2()\n            agent1.observe(x2)\n            agent3.observe(x2)\n    \"\"\"\n    return MsgHubManager(participants, announcement)", "start_char_idx": 3739, "end_char_idx": 5006, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56d2cef5-cd53-4230-bab4-b630f06ef9b1": {"__data__": {"id_": "56d2cef5-cd53-4230-bab4-b630f06ef9b1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 520, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e07abe0-cad6-403e-8ac9-8c7acf85f0ad", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 520, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "76943e52d4161923ebb4cc7700a31c8ba90924aee4265c3b6711c05b78089d5c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12f88757-a0c3-45c8-bff7-c7dda5e3ca49", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "aa27777179b7531d0a5892f1019a7d9d177cba594094af84c8a793f62ebd3541", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c63fdb9e-d023-4eea-80fb-d1f0e0227773", "node_type": "1", "metadata": {}, "hash": "a87ca2a486a8062d4c387218a96ce0256a01b2373fc5987e9507bf0644cf7f44", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import all pipeline related modules in the package. \"\"\"\nfrom .pipeline import (\n    PipelineBase,\n    IfElsePipeline,\n    SwitchPipeline,\n    ForLoopPipeline,\n    WhileLoopPipeline,\n    SequentialPipeline,\n)\n\nfrom .functional import sequentialpipeline\nfrom .functional import ifelsepipeline\n\n__all__ = [\n    \"PipelineBase\",\n    \"IfElsePipeline\",\n    \"SwitchPipeline\",\n    \"ForLoopPipeline\",\n    \"WhileLoopPipeline\",\n    \"SequentialPipeline\",\n    \"sequentialpipeline\",\n    \"ifelsepipeline\",\n]", "start_char_idx": 0, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c63fdb9e-d023-4eea-80fb-d1f0e0227773": {"__data__": {"id_": "c63fdb9e-d023-4eea-80fb-d1f0e0227773", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c28811b7-29b0-4244-a09e-e53be1668146", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1649ca9484e28e3eeccc6aa5c3daa87a21540f0008b43aa040d91efbed490f89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56d2cef5-cd53-4230-bab4-b630f06ef9b1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 520, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4d94a1b2b9cc15bd965932e44bafef900c9319a05ab0d022c652083d425d0260", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "061e4e49-c976-49c9-830a-fd59899b8b9d", "node_type": "1", "metadata": {}, "hash": "ce1bc8b5fd49628ab502a76b4b1e8d0a5095a2af2a9ba9faecbd88bacc65fd9b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Functional counterpart for Pipeline \"\"\"\nfrom typing import (\n    Callable,\n    Sequence,\n    Optional,\n    Union,\n    Any,\n    Mapping,\n)\nfrom ..agents.operator import Operator\n\n# A single Operator or a Sequence of Operators\nOperators = Union[Operator, Sequence[Operator]]\n\n\ndef placeholder(x: dict = None) -> dict:\n    r\"\"\"A placeholder that do nothing.\n\n    Acts as a placeholder in branches that do not require any operations in\n    flow control like if-else/switch\n    \"\"\"\n    return x\n\n\ndef sequentialpipeline(\n    operators: Sequence[Operator],\n    x: Optional[dict] = None,\n) -> dict:\n    \"\"\"Functional version of SequentialPipeline.\n\n    Args:\n        operators (`Sequence[Operator]`):\n            Participating operators.\n        x (`Optional[dict]`, defaults to `None`):\n            The input dictionary.\n\n    Returns:\n        `dict`: the output dictionary.\n    \"\"\"\n    if len(operators) == 0:\n        raise ValueError(\"No operators provided.\")\n\n    msg = operators[0](x)\n    for operator in operators[1:]:\n        msg = operator(msg)\n    return msg\n\n\ndef _operators(operators: Operators, x: Optional[dict] = None) -> dict:\n    \"\"\"Syntactic sugar for executing a single operator or a sequence of\n    operators.\"\"\"\n    if isinstance(operators, Sequence):\n        return sequentialpipeline(operators, x)\n    else:\n        return operators(x)", "start_char_idx": 0, "end_char_idx": 1377, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "061e4e49-c976-49c9-830a-fd59899b8b9d": {"__data__": {"id_": "061e4e49-c976-49c9-830a-fd59899b8b9d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c28811b7-29b0-4244-a09e-e53be1668146", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1649ca9484e28e3eeccc6aa5c3daa87a21540f0008b43aa040d91efbed490f89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c63fdb9e-d023-4eea-80fb-d1f0e0227773", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2332a5779a8c6a3743e62cb8b8d6dea391e065633b902d06c2891a83e5b7022f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14188d41-f023-43ef-8ec0-78ed3bfa120a", "node_type": "1", "metadata": {}, "hash": "16a62ac2e7a9a0dcf12b8f6efbe0bd8dab4862a5c795226e120f22066e098f8f", "class_name": "RelatedNodeInfo"}}, "text": "def ifelsepipeline(\n    condition_func: Callable,\n    if_body_operators: Operators,\n    else_body_operators: Operators = placeholder,\n    x: Optional[dict] = None,\n) -> dict:\n    \"\"\"Functional version of IfElsePipeline.\n\n    Args:\n        condition_func (`Callable`):\n            A function that determines whether to exeucte `if_body_operator`\n            or `else_body_operator` based on x.\n        if_body_operator (`Operators`):\n            Operators executed when `condition_func` returns True.\n        else_body_operator (`Operators`, defaults to `placeholder`):\n            Operators executed when condition_func returns False,\n            does nothing and just return the input by default.\n        x (`Optional[dict]`, defaults to `None`):\n            The input dictionary.\n\n    Returns:\n        `dict`: the output dictionary.\n    \"\"\"\n    if condition_func(x):\n        return _operators(if_body_operators, x)\n    else:\n        return _operators(else_body_operators, x)", "start_char_idx": 1380, "end_char_idx": 2356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14188d41-f023-43ef-8ec0-78ed3bfa120a": {"__data__": {"id_": "14188d41-f023-43ef-8ec0-78ed3bfa120a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c28811b7-29b0-4244-a09e-e53be1668146", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1649ca9484e28e3eeccc6aa5c3daa87a21540f0008b43aa040d91efbed490f89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "061e4e49-c976-49c9-830a-fd59899b8b9d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bfbce504fee6ba782f05bf2d82810dbe0adc2ebccfbeaf3f114e96044977f13e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05bdd821-2276-4e23-aaf2-b7d34e20f038", "node_type": "1", "metadata": {}, "hash": "fc0f45e922cc4463a864b6972908f951d8e4f7ae0494c9d51f5e60d643f2afbb", "class_name": "RelatedNodeInfo"}}, "text": "def switchpipeline(\n    condition_func: Callable[[Any], Any],\n    case_operators: Mapping[Any, Operators],\n    default_operators: Operators = placeholder,\n    x: Optional[dict] = None,\n) -> dict:\n    \"\"\"Functional version of SwitchPipeline.\n\n\n    Args:\n        condition_func (`Callable[[Any], Any]`):\n            A function that determines which case_operator to execute based\n            on the input x.\n        case_operators (`Mapping[Any, Operator]`):\n            A dictionary containing multiple operators and their\n            corresponding trigger conditions.\n        default_operators (`Operators`, defaults to `placeholder`):\n            Operators that are executed when the actual condition do not\n            meet any of the case_operators, does nothing and just return the\n            input by default.\n        x (`Optional[dict]`, defaults to `None`):\n            The input dictionary.\n\n    Returns:\n        dict: the output dictionary.\n    \"\"\"\n    target_case = condition_func(x)\n    if target_case in case_operators:\n        return _operators(case_operators[target_case], x)\n    else:\n        return _operators(default_operators, x)", "start_char_idx": 2359, "end_char_idx": 3507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05bdd821-2276-4e23-aaf2-b7d34e20f038": {"__data__": {"id_": "05bdd821-2276-4e23-aaf2-b7d34e20f038", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c28811b7-29b0-4244-a09e-e53be1668146", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1649ca9484e28e3eeccc6aa5c3daa87a21540f0008b43aa040d91efbed490f89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14188d41-f023-43ef-8ec0-78ed3bfa120a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ae78897f364dc529b47b4a61b42cb9ce2b1e200e64f741b313a1fa3645460fd9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2edd8818-66b6-4c31-b401-8596b47a5d79", "node_type": "1", "metadata": {}, "hash": "4ab6dad61e0e8eb0f693c2be5bcdb657406ee2c7938b54276b78a8a6ed73f13c", "class_name": "RelatedNodeInfo"}}, "text": "def forlooppipeline(\n    loop_body_operators: Operators,\n    max_loop: int,\n    break_func: Callable[[dict], bool] = lambda _: False,\n    x: Optional[dict] = None,\n) -> dict:\n    \"\"\"Functional version of ForLoopPipeline.\n\n    Args:\n        loop_body_operators (`Operators`):\n            Operators executed as the body of the loop.\n        max_loop (`int`):\n            maximum number of loop executions.\n        break_func (`Callable[[dict], bool]`):\n            A function used to determine whether to break out of the loop\n            based on the output of the loop_body_operator, defaults to\n            `lambda _: False`\n        x (`Optional[dict]`, defaults to `None`):\n            The input dictionary.\n\n    Returns:\n        `dict`: The output dictionary.\n    \"\"\"\n    for _ in range(max_loop):\n        # loop body\n        x = _operators(loop_body_operators, x)\n        # check condition\n        if break_func(x):\n            break\n    return x  # type: ignore[return-value]", "start_char_idx": 3510, "end_char_idx": 4490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2edd8818-66b6-4c31-b401-8596b47a5d79": {"__data__": {"id_": "2edd8818-66b6-4c31-b401-8596b47a5d79", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c28811b7-29b0-4244-a09e-e53be1668146", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1649ca9484e28e3eeccc6aa5c3daa87a21540f0008b43aa040d91efbed490f89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05bdd821-2276-4e23-aaf2-b7d34e20f038", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "56304a1b62cf487958a56bb1b03152ead0bbe57d2c1368ca616635fc0c3d9be1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "367fffc3-5133-47b2-bacc-71c3d6b61cf9", "node_type": "1", "metadata": {}, "hash": "5108ca2217d9eef452ac038a207fb7c3a43f5f005e40b201e75475a3b68b75a1", "class_name": "RelatedNodeInfo"}}, "text": "def whilelooppipeline(\n    loop_body_operators: Operators,\n    condition_func: Callable[[int, Any], bool] = lambda _, __: False,\n    x: Optional[dict] = None,\n) -> dict:\n    \"\"\"Functional version of WhileLoopPipeline.\n\n    Args:\n        loop_body_operators (`Operators`): Operators executed as the body of\n            the loop.\n        condition_func (`Callable[[int, Any], bool]`, optional): A function\n            that determines whether to continue executing the loop body based\n            on the current loop number and output of the loop_body_operator,\n            defaults to `lambda _,__: False`\n        x (`Optional[dict]`, defaults to `None`):\n            The input dictionary.\n\n    Returns:\n        `dict`: the output dictionary.\n    \"\"\"\n    i = 0\n    while condition_func(i, x):\n        # loop body\n        x = _operators(loop_body_operators, x)\n        # check condition\n        i += 1\n    return x  # type: ignore[return-value]", "start_char_idx": 4493, "end_char_idx": 5434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "367fffc3-5133-47b2-bacc-71c3d6b61cf9": {"__data__": {"id_": "367fffc3-5133-47b2-bacc-71c3d6b61cf9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2edd8818-66b6-4c31-b401-8596b47a5d79", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "24a286f4315e4a7cc458cdaa33954ecf201e172f2770219bce76d284de1192bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f039bd9b-8408-4cce-9152-3e83b6f810e2", "node_type": "1", "metadata": {}, "hash": "5e62e8e0862debe2407215de996ab280a92a5cac951f66d417b96238fd0ee0b4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Base class for Pipeline \"\"\"\n\nfrom typing import Callable, Sequence\nfrom typing import Any\nfrom typing import List\nfrom typing import Mapping\nfrom typing import Optional\nfrom abc import abstractmethod\n\nfrom .functional import (\n    Operators,\n    placeholder,\n    sequentialpipeline,\n    ifelsepipeline,\n    switchpipeline,\n    forlooppipeline,\n    whilelooppipeline,\n)\nfrom ..agents.operator import Operator\n\n\nclass PipelineBase(Operator):\n    r\"\"\"Base interface of all pipelines.\n\n    The pipeline is a special kind of operator that includes\n    multiple operators and the interaction logic among them.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.participants: List[Any] = []\n\n    @abstractmethod\n    def __call__(self, x: Optional[dict] = None) -> dict:\n        \"\"\"Define the actions taken by this pipeline.\n\n        Args:\n            x (Optional[`dict`], optional):\n                Dialog history and some environment information\n\n        Returns:\n            `dict`: The pipeline's response to the input.\n        \"\"\"", "start_char_idx": 0, "end_char_idx": 1058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f039bd9b-8408-4cce-9152-3e83b6f810e2": {"__data__": {"id_": "f039bd9b-8408-4cce-9152-3e83b6f810e2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "367fffc3-5133-47b2-bacc-71c3d6b61cf9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5b6f5fa897d87c31b78ab6f02a7bb02190ba65ba336abf0a7c8d0d86ac60aee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "caa73846-6dc9-47ba-b9e8-e89484d8acc7", "node_type": "1", "metadata": {}, "hash": "5932f21b0da79c319ad15574721fd4954860c58fb8aa19f93522baeb8aed2cd4", "class_name": "RelatedNodeInfo"}}, "text": "class IfElsePipeline(PipelineBase):", "start_char_idx": 1061, "end_char_idx": 1096, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "caa73846-6dc9-47ba-b9e8-e89484d8acc7": {"__data__": {"id_": "caa73846-6dc9-47ba-b9e8-e89484d8acc7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f039bd9b-8408-4cce-9152-3e83b6f810e2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0255c1271b47c47be56e0f486789e0b518a94b555855d988d63a66f3913f6202", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e926d6f3-8b88-48bf-9220-c951b52dd37e", "node_type": "1", "metadata": {}, "hash": "930e60b7d482a839182580bc33f9c738257e81b295a089056f76d5aa7e48e610", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"A template pipeline for implementing control flow like if-else.\n\n    IfElsePipeline(condition_func, if_body_operators, else_body_operators)\n    represents the following workflow::\n\n        if condition_func(x):\n            if_body_operators(x)\n        else:\n            else_body_operators(x)\n    \"\"\"\n\n    def __init__(\n        self,\n        condition_func: Callable[[dict], bool],\n        if_body_operators: Operators,\n        else_body_operators: Operators = placeholder,\n    ) -> None:\n        r\"\"\"Initialize an IfElsePipeline.\n\n        Args:\n            condition_func (`Callable[[dict], bool]`):\n                A function that determines whether to execute\n                if_body_operators or else_body_operators based on the input x.\n            if_body_operators (`Operators`):\n                Operators executed when condition_func returns True.\n            else_body_operators (`Operators`):\n                Operators executed when condition_func returns False,\n                does nothing and just return the input by default.\n        \"\"\"\n        self.condition_func = condition_func\n        self.if_body_operator = if_body_operators\n        self.else_body_operator = else_body_operators\n        self.participants = [self.if_body_operator] + [self.else_body_operator]", "start_char_idx": 1101, "end_char_idx": 2385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e926d6f3-8b88-48bf-9220-c951b52dd37e": {"__data__": {"id_": "e926d6f3-8b88-48bf-9220-c951b52dd37e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "caa73846-6dc9-47ba-b9e8-e89484d8acc7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0ccd1d5ae69dde3c52cda2e3390a56a5fcbea39fba830ce948d3aa4415855697", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8840dea6-d870-4245-ba9a-4e69f2da9f3b", "node_type": "1", "metadata": {}, "hash": "bf6f329bd0c3231f051c168674314163af34d56f8564833a4da173592e85ca1d", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(self, x: Optional[dict] = None) -> dict:\n        return ifelsepipeline(\n            condition_func=self.condition_func,\n            if_body_operators=self.if_body_operator,\n            else_body_operators=self.else_body_operator,\n            x=x,\n        )", "start_char_idx": 2391, "end_char_idx": 2660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8840dea6-d870-4245-ba9a-4e69f2da9f3b": {"__data__": {"id_": "8840dea6-d870-4245-ba9a-4e69f2da9f3b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e926d6f3-8b88-48bf-9220-c951b52dd37e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2063cdd2d175bcae3bcd6471c7a1c378937855b32ca349b4f5d6abc9c1820f13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a22e70e2-6300-4c3d-90dd-71ed2e9611e5", "node_type": "1", "metadata": {}, "hash": "e810a0856cf4f312216d4832162386ee1f23c8a4ad844955f700966d640364a9", "class_name": "RelatedNodeInfo"}}, "text": "class SwitchPipeline(PipelineBase):", "start_char_idx": 2663, "end_char_idx": 2698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a22e70e2-6300-4c3d-90dd-71ed2e9611e5": {"__data__": {"id_": "a22e70e2-6300-4c3d-90dd-71ed2e9611e5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8840dea6-d870-4245-ba9a-4e69f2da9f3b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8b8aa318d61b16a52a019783ad3d0a8533b36e5848b76a61114fbba272dabf45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8833993-5527-4046-b5df-51eba96cee9f", "node_type": "1", "metadata": {}, "hash": "d1c8ca7a598a421b71ee4b702456443e790fb222180404ac3326544b67e5841e", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"A template pipeline for implementing control flow like switch-case.\n\n    SwitchPipeline(condition_func, case_operators, default_operators)\n    represents the following workflow::\n\n        switch condition_func(x):\n            case k1: return case_operators[k1](x)\n            case k2: return case_operators[k2](x)\n            ...\n            default: return default_operators(x)\n    \"\"\"", "start_char_idx": 2703, "end_char_idx": 3093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8833993-5527-4046-b5df-51eba96cee9f": {"__data__": {"id_": "c8833993-5527-4046-b5df-51eba96cee9f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a22e70e2-6300-4c3d-90dd-71ed2e9611e5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a78756629a217ff8c6752091b693aa122ced259c67e1b2f6f6bfdfd2e6879d6d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4bc9523b-5a03-4941-a375-07c64f44726c", "node_type": "1", "metadata": {}, "hash": "ec7c0f3ee4adf38fc19a9d408aaa964541d36d662dbe526c6caedc30d8de2c40", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        condition_func: Callable[[dict], Any],\n        case_operators: Mapping[Any, Operators],\n        default_operators: Operators = placeholder,\n    ) -> None:\n        \"\"\"Initialize a SwitchPipeline.\n\n        Args:\n            condition_func (`Callable[[dict], Any]`):\n                A function that determines which case_operator to execute\n                based on the input x.\n            case_operators (`dict[Any, Operators]`):\n                A dictionary containing multiple operators and their\n                corresponding trigger conditions.\n            default_operators (`Operators`, defaults to `placeholder`):\n                Operators that are executed when the actual condition do\n                not meet any of the case_operators, does nothing and just\n                return the input by default.\n        \"\"\"\n        self.condition_func = condition_func\n        self.case_operators = case_operators\n        self.default_operators = default_operators\n        self.participants = list(self.case_operators.values()) + [\n            self.default_operators,\n        ]\n\n    def __call__(self, x: Optional[dict] = None) -> dict:\n        return switchpipeline(\n            condition_func=self.condition_func,\n            case_operators=self.case_operators,\n            default_operators=self.default_operators,\n            x=x,\n        )", "start_char_idx": 3099, "end_char_idx": 4479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bc9523b-5a03-4941-a375-07c64f44726c": {"__data__": {"id_": "4bc9523b-5a03-4941-a375-07c64f44726c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8833993-5527-4046-b5df-51eba96cee9f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ea38ebde0fd9ab36a84cb9aeb10a0a620d7a5a7bcec2a7ec4940fc5351e55c31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "221f1617-05b2-47e0-9568-289ff670771c", "node_type": "1", "metadata": {}, "hash": "b696cb41d009936c1892a1e34f7822419dad8418fc9f86342eacad6bca0dcd07", "class_name": "RelatedNodeInfo"}}, "text": "class ForLoopPipeline(PipelineBase):", "start_char_idx": 4482, "end_char_idx": 4518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "221f1617-05b2-47e0-9568-289ff670771c": {"__data__": {"id_": "221f1617-05b2-47e0-9568-289ff670771c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4bc9523b-5a03-4941-a375-07c64f44726c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3f232683f8c2b2f50f68552d8573f5c48b29b78564e2ce129cf4a780116681ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9", "node_type": "1", "metadata": {}, "hash": "a8b26953b31933121b94174970f239c345f0bb4d969941b0e431777c3152384c", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"A template pipeline for implementing control flow like for-loop\n\n    ForLoopPipeline(loop_body_operators, max_loop) represents the following\n    workflow::\n\n        for i in range(max_loop):\n            x = loop_body_operators(x)\n\n    ForLoopPipeline(loop_body_operators, max_loop, break_func)\n    represents the following workflow::\n\n        for i in range(max_loop):\n            x = loop_body_operators(x)\n            if break_func(x):\n                break\n    \"\"\"\n\n    def __init__(\n        self,\n        loop_body_operators: Operators,\n        max_loop: int,\n        break_func: Callable[[dict], bool] = lambda _: False,\n    ):\n        r\"\"\"Initialize a ForLoopPipeline.\n\n        Args:\n            loop_body_operators (`Operators`):\n                Operators executed as the body of the loop.\n            max_loop (`int`):\n                Maximum number of loop executions.\n            break_func (`Callable[[dict], bool]`, defaults to `lambda _:\n            False`):\n                A function used to determine whether to break out of the\n                loop based on the output of the loop_body_operators.\n        \"\"\"\n        self.loop_body_operators = loop_body_operators\n        self.max_loop = max_loop\n        self.break_func = break_func\n        self.participants = [self.loop_body_operators]", "start_char_idx": 4523, "end_char_idx": 5832, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9": {"__data__": {"id_": "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "221f1617-05b2-47e0-9568-289ff670771c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c92a0007c93a389e85e26652c61dd79367ed253bb81d090601ae8cb1b350f60a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05", "node_type": "1", "metadata": {}, "hash": "71d7016b3fed5ac540e25395bbf77fa945ab5220c9bdf2053b0eab0494730380", "class_name": "RelatedNodeInfo"}}, "text": "def __call__(self, x: Optional[dict] = None) -> dict:\n        return forlooppipeline(\n            loop_body_operators=self.loop_body_operators,\n            max_loop=self.max_loop,\n            break_func=self.break_func,\n            x=x,\n        )", "start_char_idx": 5838, "end_char_idx": 6084, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05": {"__data__": {"id_": "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6afbcece785b7b7c02c74918a6faf1b678a5f0bc74c7ab421235b58e8198c4be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82bdd6e4-3212-42f2-9c93-25b03aa08597", "node_type": "1", "metadata": {}, "hash": "2e3251d17f7b8c32c34d2469d2d902f1600ebd99a49e4721ea539809d1f503a1", "class_name": "RelatedNodeInfo"}}, "text": "class WhileLoopPipeline(PipelineBase):\n    r\"\"\"A template pipeline for implementing control flow like while-loop\n\n    WhileLoopPipeline(loop_body_operators, condition_operator, condition_func)\n    represents the following workflow::\n\n        i = 0\n        while (condition_func(i, x))\n            x = loop_body_operators(x)\n            i += 1\n    \"\"\"\n\n    def __init__(\n        self,\n        loop_body_operators: Operators,\n        condition_func: Callable[[int, dict], bool] = lambda _, __: False,\n    ):\n        \"\"\"Initialize a WhileLoopPipeline.\n\n        Args:\n            loop_body_operators (`Operators`):\n                Operators executed as the body of the loop.\n            condition_func (`Callable[[int, dict], bool]`, defaults to\n            `lambda _, __: False`):\n                A function that determines whether to continue executing the\n                loop body based on the current loop number and output of the\n                `loop_body_operator`\n        \"\"\"\n        self.condition_func = condition_func\n        self.loop_body_operators = loop_body_operators\n        self.participants = [self.loop_body_operators]\n\n    def __call__(self, x: Optional[dict] = None) -> dict:\n        return whilelooppipeline(\n            loop_body_operators=self.loop_body_operators,\n            condition_func=self.condition_func,\n            x=x,\n        )", "start_char_idx": 6087, "end_char_idx": 7448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82bdd6e4-3212-42f2-9c93-25b03aa08597": {"__data__": {"id_": "82bdd6e4-3212-42f2-9c93-25b03aa08597", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8065b83d-e8eb-4e30-8008-77e487103210", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "10813ebaeef740980050cd731e2a2f407737e4b57a8526188992c709803f3d28", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5dd70fe0bf3c164019346a230cd557e043a3d41fd486eb82a9c8c304c8f66dd1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aef494ed-0ec6-4079-acfd-71ff9b8a8742", "node_type": "1", "metadata": {}, "hash": "250222ced134bf86d2d04c8baff75c0f8e9ce3a788558c868963d53bc18fd665", "class_name": "RelatedNodeInfo"}}, "text": "class SequentialPipeline(PipelineBase):\n    r\"\"\"A template pipeline for implementing sequential logic.\n\n    Sequential(operators) represents the following workflow::\n\n        x = operators[0](x)\n        x = operators[1](x)\n        ...\n        x = operators[n](x)\n    \"\"\"\n\n    def __init__(self, operators: Sequence[Operator]) -> None:\n        r\"\"\"Initialize a Sequential pipeline.\n\n        Args:\n            operators (`Sequence[Operator]`):\n                A Sequence of operators to be executed sequentially.\n        \"\"\"\n        self.operators = operators\n        self.participants = list(self.operators)\n\n    def __call__(self, x: Optional[dict] = None) -> dict:\n        return sequentialpipeline(operators=self.operators, x=x)", "start_char_idx": 7451, "end_char_idx": 8181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aef494ed-0ec6-4079-acfd-71ff9b8a8742": {"__data__": {"id_": "aef494ed-0ec6-4079-acfd-71ff9b8a8742", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82bdd6e4-3212-42f2-9c93-25b03aa08597", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad5b53a48a8e5ed97713a6ec1424076081cd2fba6c3bcc982815cd0f9bf231df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e147be5-c149-4f30-a09b-7e58b4b0000f", "node_type": "1", "metadata": {}, "hash": "9d3271f2833f273190064a5d1895f96c0d9fba3a29a3b6f227d076d4096ce145", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Prompt engineering module.\"\"\"\nfrom typing import Any, Optional, Union\nfrom enum import IntEnum\n\nfrom loguru import logger\n\nfrom agentscope.models import OpenAIWrapperBase, ModelWrapperBase\nfrom agentscope.constants import ShrinkPolicy\nfrom agentscope.utils.tools import to_openai_dict, to_dialog_str\n\n\nclass PromptType(IntEnum):\n    \"\"\"Enum for prompt types.\"\"\"\n\n    STRING = 0\n    LIST = 1", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e147be5-c149-4f30-a09b-7e58b4b0000f": {"__data__": {"id_": "8e147be5-c149-4f30-a09b-7e58b4b0000f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aef494ed-0ec6-4079-acfd-71ff9b8a8742", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "87d344774c26c53d09b83aa89cb4a6f75633293dd7adb87680e848100325e46a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c5ff953-d156-48ff-8774-9fd6b9d52d77", "node_type": "1", "metadata": {}, "hash": "177b8d74aad463dfedfbad3e33f89abe3425dd40333eb2cd1dbe5e7b177b6882", "class_name": "RelatedNodeInfo"}}, "text": "class PromptEngine:", "start_char_idx": 420, "end_char_idx": 439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c5ff953-d156-48ff-8774-9fd6b9d52d77": {"__data__": {"id_": "1c5ff953-d156-48ff-8774-9fd6b9d52d77", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e147be5-c149-4f30-a09b-7e58b4b0000f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98188af332d258b5b9505df426e8111642134949d0c6bbb9472abc6cb43f6184", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "44f24a64-b214-414c-a221-74e137000347", "node_type": "1", "metadata": {}, "hash": "8116e05230a78b258d92fdcbd9ea28a7351111f3dea9e6c251da75fd14b0ad07", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Prompt engineering module for both list and string prompt\"\"\"", "start_char_idx": 444, "end_char_idx": 507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44f24a64-b214-414c-a221-74e137000347": {"__data__": {"id_": "44f24a64-b214-414c-a221-74e137000347", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c5ff953-d156-48ff-8774-9fd6b9d52d77", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5181fd9aa85fa05aa320785e294680ba04d79307225bec2828049d732c122417", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9170ab64-ef48-4a04-b90b-06491b7fc38e", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        model: ModelWrapperBase,\n        shrink_policy: ShrinkPolicy = ShrinkPolicy.TRUNCATE,\n        max_length: Optional[int] = None,\n        prompt_type: Optional[PromptType] = None,\n        max_summary_length: int = 200,\n        summarize_model: Optional[ModelWrapperBase] = None,\n    ) -> None:", "start_char_idx": 513, "end_char_idx": 840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9170ab64-ef48-4a04-b90b-06491b7fc38e": {"__data__": {"id_": "9170ab64-ef48-4a04-b90b-06491b7fc38e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "44f24a64-b214-414c-a221-74e137000347", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "75f5f13036e91f8d8a0b6049c0576c9dc8d3b4e6550671b788b68c877fd296eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da": {"__data__": {"id_": "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9170ab64-ef48-4a04-b90b-06491b7fc38e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bcdc9b90f969b13cc817526c770cd5ecc14a4ee08ce4542fbc31ff9471bada51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34e337e0-f3d7-4524-a163-98e62b554903", "node_type": "1", "metadata": {}, "hash": "16db793536b3b2a55948d77ed69032d86c1d602b626b3699338eb7998885e63e", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34e337e0-f3d7-4524-a163-98e62b554903": {"__data__": {"id_": "34e337e0-f3d7-4524-a163-98e62b554903", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bcdc9b90f969b13cc817526c770cd5ecc14a4ee08ce4542fbc31ff9471bada51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d63588c-ab4f-46cc-b547-bf7576a3bf9d", "node_type": "1", "metadata": {}, "hash": "0064c145909acb3e2d7fa0c98747f91dc18fe521330c7f7ebe9114b9dae1da8c", "class_name": "RelatedNodeInfo"}}, "text": "self.model = model\n        self.shrink_policy = shrink_policy\n        self.max_length = max_length\n\n        if prompt_type is None:\n            if isinstance(model, OpenAIWrapperBase):\n                self.prompt_type = PromptType.LIST\n            else:\n                self.prompt_type = PromptType.STRING\n        else:\n            self.prompt_type = prompt_type\n\n        self.max_summary_length = max_summary_length\n\n        if summarize_model is None:\n            self.summarize_model = model\n\n        logger.warning(\n            \"The prompt engine will be deprecated in the future. \"\n            \"Please use the `format` function in model wrapper object \"\n            \"instead. More details refer to \",\n            \"https://modelscope.github.io/agentscope/en/tutorial/206-prompt\"\n            \".html\",\n        )", "start_char_idx": 3290, "end_char_idx": 4104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d63588c-ab4f-46cc-b547-bf7576a3bf9d": {"__data__": {"id_": "6d63588c-ab4f-46cc-b547-bf7576a3bf9d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34e337e0-f3d7-4524-a163-98e62b554903", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "81fae16351958e440b5023e7e09b715d3652f6c4b671bdf40df315c1eed0f4d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14a6a317-5b15-4e22-9423-fc325e9c3f37", "node_type": "1", "metadata": {}, "hash": "f945c22eadfd3625309ec6edb23b5dfa780aa20f17abff2b4578b613367b267a", "class_name": "RelatedNodeInfo"}}, "text": "def join(\n        self,\n        *args: Any,\n        format_map: Optional[dict] = None,\n    ) -> Union[str, list[dict]]:\n        \"\"\"Join prompt components according to its type. The join function can\n        accept any number and type of arguments. If prompt type is\n        `PromptType.STRING`, the arguments will be joined by `\"\\\\\\\\n\"`. If\n        prompt type is `PromptType.LIST`, the string arguments will be\n        converted to `Msg` from `system`.\n        \"\"\"\n        # TODO: achieve the summarize function\n\n        # Filter `None`\n        args = [_ for _ in args if _ is not None]\n\n        if self.prompt_type == PromptType.STRING:\n            return self.join_to_str(*args, format_map=format_map)\n        elif self.prompt_type == PromptType.LIST:\n            return self.join_to_list(*args, format_map=format_map)\n        else:\n            raise RuntimeError(\"Invalid prompt type.\")", "start_char_idx": 4110, "end_char_idx": 5000, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14a6a317-5b15-4e22-9423-fc325e9c3f37": {"__data__": {"id_": "14a6a317-5b15-4e22-9423-fc325e9c3f37", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d63588c-ab4f-46cc-b547-bf7576a3bf9d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9fe708583060240dd3dd9b6cc0be5bfa6b2e2b77247efa59d2dd925bb091478f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5", "node_type": "1", "metadata": {}, "hash": "cfd68e6462fbf67a4200b5597ee294f57bfd3515eef619e14822b69c7d3a3f4b", "class_name": "RelatedNodeInfo"}}, "text": "def join_to_str(self, *args: Any, format_map: Union[dict, None]) -> str:\n        \"\"\"Join prompt components to a string.\"\"\"\n        prompt = []\n        for item in args:\n            if isinstance(item, list):\n                items_str = self.join_to_str(*item, format_map=None)\n                prompt += [items_str]\n            elif isinstance(item, dict):\n                prompt.append(to_dialog_str(item))\n            else:\n                prompt.append(str(item))\n        prompt_str = \"\\n\".join(prompt)\n\n        if format_map is not None:\n            prompt_str = prompt_str.format_map(format_map)\n\n        return prompt_str", "start_char_idx": 5006, "end_char_idx": 5632, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5": {"__data__": {"id_": "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e02fa90f-58c5-4949-af98-c41334d7f032", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0a32a70db331c20d04736f6a7613440697e0dd33f638517d909f9f8fcf705c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14a6a317-5b15-4e22-9423-fc325e9c3f37", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b16fd572661035bce621fbe71f9fd9c6b077d9a1010c7670e6989e44a02d373c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5cb15045-b0dd-4242-9599-d7a6caae4ac3", "node_type": "1", "metadata": {}, "hash": "e87b46aac1d1529a983b3eb043529545267dd5aa4bcd463b7922973d6cabf451", "class_name": "RelatedNodeInfo"}}, "text": "def join_to_list(self, *args: Any, format_map: Union[dict, None]) -> list:\n        \"\"\"Join prompt components to a list of `Msg` objects.\"\"\"\n        prompt = []\n        for item in args:\n            if isinstance(item, list):\n                # nested processing\n                prompt.extend(self.join_to_list(*item, format_map=None))\n            elif isinstance(item, dict):\n                prompt.append(to_openai_dict(item))\n            else:\n                prompt.append(to_openai_dict({\"content\": str(item)}))\n\n        if format_map is not None:\n            format_prompt = []\n            for msg in prompt:\n                format_prompt.append(\n                    {\n                        k.format_map(format_map): v.format_map(format_map)\n                        for k, v in msg.items()\n                    },\n                )\n            prompt = format_prompt\n\n        return prompt", "start_char_idx": 5638, "end_char_idx": 6532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cb15045-b0dd-4242-9599-d7a6caae4ac3": {"__data__": {"id_": "5cb15045-b0dd-4242-9599-d7a6caae4ac3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 775, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a4318342-0fdb-463e-b9c6-5fefd4581718", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 775, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cbb677a6c60e0b22dd22fe27ab2b7ca268ed6e636537a65151bae02e9838076c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e0f44055a1c5e41ca000bd0367b9c33e5506100f4da02e37e17170d3d0abb61a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b24e53e4-ab6e-40e9-9d2e-951aaf6009ed", "node_type": "1", "metadata": {}, "hash": "46bb1be61bfded8a2b82da6e5450198728bd3e61b42bf67491059b25612600d5", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Import all rpc related modules in the package.\"\"\"\nfrom typing import Any\nfrom .rpc_agent_client import RpcAgentClient, ResponseStub, call_in_thread\n\ntry:\n    from .rpc_agent_pb2 import RpcMsg  # pylint: disable=E0611\nexcept ModuleNotFoundError:\n    RpcMsg = Any  # type: ignore[misc]\ntry:\n    from .rpc_agent_pb2_grpc import RpcAgentServicer\n    from .rpc_agent_pb2_grpc import RpcAgentStub\n    from .rpc_agent_pb2_grpc import add_RpcAgentServicer_to_server\nexcept ImportError:\n    RpcAgentServicer = object\n    RpcAgentStub = Any\n    add_RpcAgentServicer_to_server = Any\n\n\n__all__ = [\n    \"RpcAgentClient\",\n    \"ResponseStub\",\n    \"call_in_thread\",\n    \"RpcMsg\",\n    \"RpcAgentServicer\",\n    \"RpcAgentStub\",\n    \"add_RpcAgentServicer_to_server\",\n]", "start_char_idx": 0, "end_char_idx": 774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b24e53e4-ab6e-40e9-9d2e-951aaf6009ed": {"__data__": {"id_": "b24e53e4-ab6e-40e9-9d2e-951aaf6009ed", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464b3ef2-4936-4adc-af6f-558bece90245", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98a68e5e1b7499d2f7a2a83eabefb11e58f4b2f639c6b8ed6fb2b1a2e762eb7c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cb15045-b0dd-4242-9599-d7a6caae4ac3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 775, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "44738b8459f15fb531d263179670849b63ecaec559e7e186b3122fb7c844c6cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf6ff324-56cd-4865-8312-23f98d8613e8", "node_type": "1", "metadata": {}, "hash": "e9e1a3d277e201e0b209b2c80f1412a19db9e50b07cc0c91f2c3f8dcd8507be5", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Client of rpc agent server \"\"\"\n\nimport json\nimport threading\nfrom typing import Any, Optional\nfrom loguru import logger\n\ntry:\n    import grpc\nexcept ImportError:\n    grpc = None\n\ntry:\n    from agentscope.rpc.rpc_agent_pb2 import RpcMsg  # pylint: disable=E0611\n    from agentscope.rpc.rpc_agent_pb2_grpc import RpcAgentStub\nexcept ModuleNotFoundError:\n    RpcMsg = Any  # type: ignore[misc]\n    RpcAgentStub = Any", "start_char_idx": 0, "end_char_idx": 441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf6ff324-56cd-4865-8312-23f98d8613e8": {"__data__": {"id_": "bf6ff324-56cd-4865-8312-23f98d8613e8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464b3ef2-4936-4adc-af6f-558bece90245", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98a68e5e1b7499d2f7a2a83eabefb11e58f4b2f639c6b8ed6fb2b1a2e762eb7c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b24e53e4-ab6e-40e9-9d2e-951aaf6009ed", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ebbe6724913b68f5322f484bee52748b087635ba70ec57924c108e21c1ce9961", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0123df88-219c-4248-a58a-023565e91913", "node_type": "1", "metadata": {}, "hash": "5a123c52220f03a7b167512219eb632762f42e343e692d7956e348433e4bf279", "class_name": "RelatedNodeInfo"}}, "text": "class RpcAgentClient:", "start_char_idx": 444, "end_char_idx": 465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0123df88-219c-4248-a58a-023565e91913": {"__data__": {"id_": "0123df88-219c-4248-a58a-023565e91913", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464b3ef2-4936-4adc-af6f-558bece90245", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98a68e5e1b7499d2f7a2a83eabefb11e58f4b2f639c6b8ed6fb2b1a2e762eb7c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf6ff324-56cd-4865-8312-23f98d8613e8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fec82fa0902185a78fc82857d91ab074a14ef47eec3539672155cab16f82fc23", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c", "node_type": "1", "metadata": {}, "hash": "a12f73126ec4c64e5dba7c3683147688c69941bd49da6fea9afa412a4d082e9b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A client of Rpc agent server\"\"\"\n\n    def __init__(self, host: str, port: int, agent_id: str = \"\") -> None:\n        \"\"\"Init a rpc agent client\n\n        Args:\n            host (`str`): the hostname of the rpc agent server which the\n            client is connected.\n            port (`int`): the port of the rpc agent server which the client\n            is connected.\n            agent_id (`str`): the agent id of the agent being called.\n        \"\"\"\n        self.host = host\n        self.port = port\n        self.agent_id = agent_id\n\n    def call_func(\n        self,\n        func_name: str,\n        value: Optional[str] = None,\n        timeout: int = 300,\n    ) -> str:\n        \"\"\"Call the specific function of rpc server.\n\n        Args:\n            func_name (`str`): the name of the function being called.\n            x (`str`, optional): the seralized input value. Defaults to None.\n\n        Returns:\n            str: serialized return data.\n        \"\"\"\n        with grpc.insecure_channel(f\"{self.host}:{self.port}\") as channel:\n            stub = RpcAgentStub(channel)\n            result_msg = stub.call_func(\n                RpcMsg(\n                    value=value,\n                    target_func=func_name,\n                    agent_id=self.agent_id,\n                ),\n                timeout=timeout,\n            )\n            return result_msg.value", "start_char_idx": 470, "end_char_idx": 1829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c": {"__data__": {"id_": "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464b3ef2-4936-4adc-af6f-558bece90245", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98a68e5e1b7499d2f7a2a83eabefb11e58f4b2f639c6b8ed6fb2b1a2e762eb7c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0123df88-219c-4248-a58a-023565e91913", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "32b3e2e4c2d4465376d9d650b87520eb90396c018be09763d443c0834c309f18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "753b63b0-2b88-4389-901b-94125897a951", "node_type": "1", "metadata": {}, "hash": "561b7a0afd16483c1a3752a69fae98912e7d104fb95e0655123f904f5dd3ef3b", "class_name": "RelatedNodeInfo"}}, "text": "def create_agent(self, agent_configs: Optional[dict]) -> None:\n        \"\"\"Create a new agent for this client.\"\"\"\n        try:\n            if self.agent_id is None or len(self.agent_id) == 0:\n                return\n            self.call_func(\n                func_name=\"_create_agent\",\n                value=(\n                    None\n                    if agent_configs is None\n                    else json.dumps(agent_configs)\n                ),\n            )\n        except Exception as e:\n            logger.error(\n                f\"Fail to create agent with id [{self.agent_id}]: {e}\",\n            )\n\n    def delete_agent(self) -> None:\n        \"\"\"\n        Delete the agent created by this client.\n        \"\"\"\n        try:\n            if self.agent_id is not None and len(self.agent_id) > 0:\n                self.call_func(\"_delete_agent\", timeout=5)\n        except Exception:\n            logger.warning(\n                f\"Fail to delete agent with id [{self.agent_id}]\",\n            )", "start_char_idx": 1835, "end_char_idx": 2826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "753b63b0-2b88-4389-901b-94125897a951": {"__data__": {"id_": "753b63b0-2b88-4389-901b-94125897a951", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464b3ef2-4936-4adc-af6f-558bece90245", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "98a68e5e1b7499d2f7a2a83eabefb11e58f4b2f639c6b8ed6fb2b1a2e762eb7c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d1100d1fc607fb51fdcb99ea3bc511c3e4647d314a5e5bc2a67d64075ba623a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc948c70-bbd7-4d7c-8a47-3e80c35383bc", "node_type": "1", "metadata": {}, "hash": "e897cd8477ee1fb34b19dec3cc437ca2b9dc9d2cf7fdf88f78e783e4f368d0e6", "class_name": "RelatedNodeInfo"}}, "text": "class ResponseStub:\n    \"\"\"A stub used to save the response of an rpc call in a sub-thread.\"\"\"\n\n    def __init__(self) -> None:\n        self.response = None\n        self.condition = threading.Condition()\n\n    def set_response(self, response: str) -> None:\n        \"\"\"Set the message.\"\"\"\n        with self.condition:\n            self.response = response\n            self.condition.notify_all()\n\n    def get_response(self) -> str:\n        \"\"\"Get the message.\"\"\"\n        with self.condition:\n            while self.response is None:\n                self.condition.wait()\n            return self.response\n\n\ndef call_in_thread(\n    client: RpcAgentClient,\n    x: dict,\n    func_name: str,\n) -> ResponseStub:\n    \"\"\"Call rpc function in a sub-thread.\n\n    Args:\n        client (`RpcAgentClient`): the rpc client.\n        x (`dict`): the value of the reqeust.\n        func_name (`str`): the name of the function being called.\n\n    Returns:\n        `ResponseStub`: a stub to get the response.\n    \"\"\"\n    stub = ResponseStub()\n\n    def wrapper() -> None:\n        resp = client.call_func(\n            func_name=func_name,\n            value=x.serialize() if x is not None else \"\",\n        )\n        stub.set_response(resp)  # type: ignore[arg-type]\n\n    thread = threading.Thread(target=wrapper)\n    thread.start()\n    return stub", "start_char_idx": 2829, "end_char_idx": 4149, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc948c70-bbd7-4d7c-8a47-3e80c35383bc": {"__data__": {"id_": "bc948c70-bbd7-4d7c-8a47-3e80c35383bc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2.py", "file_name": "rpc_agent_pb2.py", "file_type": "text/x-python", "file_size": 1271, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6991ec33-d8f8-4060-940d-1cb7bfa0a253", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2.py", "file_name": "rpc_agent_pb2.py", "file_type": "text/x-python", "file_size": 1271, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "75174a90e3994a137d9864bcdf2fd58a7ed977042df184f0c8c1f8f3830bce54", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "753b63b0-2b88-4389-901b-94125897a951", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c317cf84eaba183b2e2a3ec04b1350e7e27ca314fecc7ea9d1e173276675daf2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50507d79-8b05-44a6-9f20-f4da931e2775", "node_type": "1", "metadata": {}, "hash": "7b8891f038531f95accc47e4305427ecce61d2f536c7bc1165d2003848ec7bd8", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: rpc_agent.proto\n# Protobuf Python Version: 4.25.0\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\x0frpc_agent.proto\">\\n\\x06RpcMsg\\x12\\r\\n\\x05value\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0btarget_func\\x18\\x02 \\x01(\\t\\x12\\x10\\n\\x08\\x61gent_id\\x18\\x03 \\x01(\\t2+\\n\\x08RpcAgent\\x12\\x1f\\n\\tcall_func\\x12\\x07.RpcMsg\\x1a\\x07.RpcMsg\"\\x00\\x62\\x06proto3',\n)\n\n_globals = globals()\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"rpc_agent_pb2\", _globals)\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    _globals[\"_RPCMSG\"]._serialized_start = 19\n    _globals[\"_RPCMSG\"]._serialized_end = 81\n    _globals[\"_RPCAGENT\"]._serialized_start = 83\n    _globals[\"_RPCAGENT\"]._serialized_end = 126\n# @@protoc_insertion_point(module_scope)", "start_char_idx": 0, "end_char_idx": 1270, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50507d79-8b05-44a6-9f20-f4da931e2775": {"__data__": {"id_": "50507d79-8b05-44a6-9f20-f4da931e2775", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e95a88e-f41a-4286-be3f-7d6729e609c6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d2020dd06b678e6fe50391767bbd7c3f4d66ada14358f8e52c773561d743428b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc948c70-bbd7-4d7c-8a47-3e80c35383bc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2.py", "file_name": "rpc_agent_pb2.py", "file_type": "text/x-python", "file_size": 1271, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "539d917486d4e8bd91fe54a9e60381a55442e9dee7542be7f03e47dc2e3767ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f", "node_type": "1", "metadata": {}, "hash": "caf20b29b1709f78e188f9016145c9748c955c3236277281488ce72b852a2d06", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!\n\"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"\ntry:\n    import grpc\nexcept ImportError:\n    grpc = None\n\nimport agentscope.rpc.rpc_agent_pb2 as rpc__agent__pb2\n\n\nclass RpcAgentStub(object):\n    \"\"\"Servicer for rpc agent server\"\"\"\n\n    def __init__(self, channel):\n        \"\"\"Constructor.\n\n        Args:\n            channel: A grpc.Channel.\n        \"\"\"\n        self.call_func = channel.unary_unary(\n            \"/RpcAgent/call_func\",\n            request_serializer=rpc__agent__pb2.RpcMsg.SerializeToString,\n            response_deserializer=rpc__agent__pb2.RpcMsg.FromString,\n        )\n\n\nclass RpcAgentServicer(object):\n    \"\"\"Servicer for rpc agent server\"\"\"\n\n    def call_func(self, request, context):\n        \"\"\"Missing associated documentation comment in .proto file.\"\"\"\n        context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n        context.set_details(\"Method not implemented!\")\n        raise NotImplementedError(\"Method not implemented!\")", "start_char_idx": 0, "end_char_idx": 1068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f": {"__data__": {"id_": "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e95a88e-f41a-4286-be3f-7d6729e609c6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d2020dd06b678e6fe50391767bbd7c3f4d66ada14358f8e52c773561d743428b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50507d79-8b05-44a6-9f20-f4da931e2775", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "447b0547f8b0ccce03470ba6794a6811388453d8bacecea3c0cb12aee113ef11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2ad00a5-2826-4758-9845-52d416ff3448", "node_type": "1", "metadata": {}, "hash": "19eec4aaf21a4aa002e696d81fe2e23c3e2fe8a77bc1743753245d3323060c2a", "class_name": "RelatedNodeInfo"}}, "text": "def add_RpcAgentServicer_to_server(servicer, server):\n    rpc_method_handlers = {\n        \"call_func\": grpc.unary_unary_rpc_method_handler(\n            servicer.call_func,\n            request_deserializer=rpc__agent__pb2.RpcMsg.FromString,\n            response_serializer=rpc__agent__pb2.RpcMsg.SerializeToString,\n        ),\n    }\n    generic_handler = grpc.method_handlers_generic_handler(\n        \"RpcAgent\",\n        rpc_method_handlers,\n    )\n    server.add_generic_rpc_handlers((generic_handler,))\n\n\n# This class is part of an EXPERIMENTAL API.\nclass RpcAgent(object):\n    \"\"\"Servicer for rpc agent server\"\"\"\n\n    @staticmethod\n    def call_func(\n        request,\n        target,\n        options=(),\n        channel_credentials=None,\n        call_credentials=None,\n        insecure=False,\n        compression=None,\n        wait_for_ready=None,\n        timeout=None,\n        metadata=None,\n    ):\n        return grpc.experimental.unary_unary(\n            request,\n            target,\n            \"/RpcAgent/call_func\",\n            rpc__agent__pb2.RpcMsg.SerializeToString,\n            rpc__agent__pb2.RpcMsg.FromString,\n            options,\n            channel_credentials,\n            insecure,\n            call_credentials,\n            compression,\n            wait_for_ready,\n            timeout,\n            metadata,\n        )", "start_char_idx": 1071, "end_char_idx": 2405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2ad00a5-2826-4758-9845-52d416ff3448": {"__data__": {"id_": "d2ad00a5-2826-4758-9845-52d416ff3448", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cca33da9-c372-4b55-a042-09e3aec3cc8d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ef16199d690a253a95355aae50045b45e3ac93f1c73f9d9670858c6a68b0839c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "812cb80eede81be281bde973b858608f98f3cb87b29071e269dc07dff9683c2d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "045806ea-f860-4773-9cb1-807d7bfe9f4d", "node_type": "1", "metadata": {}, "hash": "3d47a907540aae58aa46ba1fcd563d5f64b40dbe4a12aae2c9d32e887d56f3c5", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import all service-related modules in the package.\"\"\"\nfrom loguru import logger\n\nfrom .execute_code.exec_python import execute_python_code\nfrom .file.common import (\n    create_file,\n    delete_file,\n    move_file,\n    create_directory,\n    delete_directory,\n    move_directory,\n)\nfrom .file.text import read_text_file, write_text_file\nfrom .file.json import read_json_file, write_json_file\nfrom .sql_query.mysql import query_mysql\nfrom .sql_query.sqlite import query_sqlite\nfrom .sql_query.mongodb import query_mongodb\nfrom .web_search.search import bing_search, google_search\nfrom .web_search.arxiv import arxiv_search\nfrom .service_response import ServiceResponse\nfrom .service_factory import ServiceFactory\nfrom .retrieval.similarity import cos_sim\nfrom .text_processing.summarization import summarization\nfrom .retrieval.retrieval_from_list import retrieve_from_list\nfrom .service_status import ServiceExecStatus\nfrom .web_search.web_digest import digest_webpage, load_web, parse_html_to_text\n\n\ndef get_help() -> None:\n    \"\"\"Get help message.\"\"\"\n    help_msg = f\"The following service are available:\\n{__all__}\"\n    logger.info(help_msg)", "start_char_idx": 0, "end_char_idx": 1171, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "045806ea-f860-4773-9cb1-807d7bfe9f4d": {"__data__": {"id_": "045806ea-f860-4773-9cb1-807d7bfe9f4d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cca33da9-c372-4b55-a042-09e3aec3cc8d", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ef16199d690a253a95355aae50045b45e3ac93f1c73f9d9670858c6a68b0839c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d2ad00a5-2826-4758-9845-52d416ff3448", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "23fac4eb76de6f32f95f442a468ebe6a6b5db74129421776a35e606a5f145a27", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3023c8e9-f1d1-417a-aae0-adc32afa853f", "node_type": "1", "metadata": {}, "hash": "f213e326f81e3c8de8c9069036db3514b7aa3675064bd1027d434fbfa21c2c15", "class_name": "RelatedNodeInfo"}}, "text": "__all__ = [\n    \"execute_python_code\",\n    \"create_file\",\n    \"delete_file\",\n    \"move_file\",\n    \"create_directory\",\n    \"delete_directory\",\n    \"move_directory\",\n    \"read_text_file\",\n    \"write_text_file\",\n    \"read_json_file\",\n    \"write_json_file\",\n    \"bing_search\",\n    \"google_search\",\n    \"arxiv_search\",\n    \"query_mysql\",\n    \"query_sqlite\",\n    \"query_mongodb\",\n    \"ServiceResponse\",\n    \"ServiceFactory\",\n    \"cos_sim\",\n    \"summarization\",\n    \"retrieve_from_list\",\n    \"ServiceExecStatus\",\n    \"digest_webpage\",\n    \"load_web\",\n    \"parse_html_to_text\",\n]", "start_char_idx": 1174, "end_char_idx": 1745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3023c8e9-f1d1-417a-aae0-adc32afa853f": {"__data__": {"id_": "3023c8e9-f1d1-417a-aae0-adc32afa853f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "045806ea-f860-4773-9cb1-807d7bfe9f4d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "12580ca98ca7807cda902a45be191b384db096fb3d660c3800c4c68abd8944cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "705820b9-4248-4655-ae14-f2317ce6b0b0", "node_type": "1", "metadata": {}, "hash": "05ee1b6f2dba42adee1b27f1f8b77393bbd99ae8ed43549eb6beb74041f69ccf", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Service to execute python code.\"\"\"\nimport builtins\nimport contextlib\nimport inspect\nimport io\nimport multiprocessing\nimport os\nimport platform\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport traceback\nfrom hashlib import md5\nfrom typing import Optional, Union, Tuple\n\nfrom loguru import logger\n\ntry:\n    import docker\n    from docker.errors import APIError, ImageNotFound\nexcept ImportError:\n    docker = None\ntry:\n    import resource\nexcept (ModuleNotFoundError, ImportError):\n    resource = None\n\nfrom agentscope.utils.common import create_tempdir, timer\nfrom agentscope.service.service_status import ServiceExecStatus\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.constants import (\n    _DEFAULT_PYPI_MIRROR,\n    _DEFAULT_TRUSTED_HOST,\n)", "start_char_idx": 0, "end_char_idx": 813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "705820b9-4248-4655-ae14-f2317ce6b0b0": {"__data__": {"id_": "705820b9-4248-4655-ae14-f2317ce6b0b0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3023c8e9-f1d1-417a-aae0-adc32afa853f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "03ef004ef2e06807287d8589081e373007df8ed2f48a34031d2919ae2bdf29e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "429a8860-21ec-494e-9982-62fec63dd5f5", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def execute_python_code(\n    code: str,\n    timeout: Optional[Union[int, float]] = 300,\n    use_docker: Optional[Union[bool, str]] = None,\n    maximum_memory_bytes: Optional[int] = None,\n) -> ServiceResponse:", "start_char_idx": 816, "end_char_idx": 1024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "429a8860-21ec-494e-9982-62fec63dd5f5": {"__data__": {"id_": "429a8860-21ec-494e-9982-62fec63dd5f5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "705820b9-4248-4655-ae14-f2317ce6b0b0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "46571ce3cd0fa9ddb3e211513533bac7ef5992b0f8e78cc82b3ccf42108192a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7fee588a-f737-4637-aa7a-2450fe027550", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fee588a-f737-4637-aa7a-2450fe027550": {"__data__": {"id_": "7fee588a-f737-4637-aa7a-2450fe027550", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "429a8860-21ec-494e-9982-62fec63dd5f5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3bcc08bf4ba464a61344ccb443119d864bb73ed33237b6fad37ac55e010864b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "230b037d-3e5f-46ce-8cb9-35d43ea8f84f", "node_type": "1", "metadata": {}, "hash": "202592bc81bd67ff1dc6dc04320d7ada844919b45d3692cc8297b74bb5ef2fea", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "230b037d-3e5f-46ce-8cb9-35d43ea8f84f": {"__data__": {"id_": "230b037d-3e5f-46ce-8cb9-35d43ea8f84f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7fee588a-f737-4637-aa7a-2450fe027550", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3bcc08bf4ba464a61344ccb443119d864bb73ed33237b6fad37ac55e010864b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98bffdd7-12cd-49b3-8398-793a25e9f4af", "node_type": "1", "metadata": {}, "hash": "a8180fb7dc7bd878d7c8eada10b8249b16063e54a0e9d1a4cd8ff1e2614672da", "class_name": "RelatedNodeInfo"}}, "text": "# Check if the `use_docker` flag has been explicitly set by the user.\n    if use_docker is None:\n        # If `use_docker` is not set, determine whether to use Docker based on\n        # the availability of the Docker module in the environment.\n        if docker is None:\n            # If the Docker module is not available, default to not using\n            # Docker.\n            use_docker = False\n        else:\n            # If the Docker module is available, default to using Docker.\n            use_docker = True\n\n    if use_docker:\n        response = _execute_python_code_docker(\n            code,\n            timeout,\n            use_docker,\n            maximum_memory_bytes,\n        )\n    else:\n        response = _execute_python_code_sys(\n            code,\n            timeout,\n            maximum_memory_bytes,\n        )\n\n    return response", "start_char_idx": 3231, "end_char_idx": 4080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98bffdd7-12cd-49b3-8398-793a25e9f4af": {"__data__": {"id_": "98bffdd7-12cd-49b3-8398-793a25e9f4af", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "230b037d-3e5f-46ce-8cb9-35d43ea8f84f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "474797eef7e1cc29518cc8c17658f564bd1ec24ca7c2abb5e54d7d2a45e8b832", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9dbeac20-7d40-4198-b14c-41c646632315", "node_type": "1", "metadata": {}, "hash": "273bc4ed9f627a2359b000ce66fef9b77b1853f0032f0dec8a292e9b7a2a12ee", "class_name": "RelatedNodeInfo"}}, "text": "def _sys_execute(\n    code: str,\n    shared_list: list,\n    maximum_memory_bytes: int,\n    timeout: int,\n) -> None:", "start_char_idx": 4083, "end_char_idx": 4198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dbeac20-7d40-4198-b14c-41c646632315": {"__data__": {"id_": "9dbeac20-7d40-4198-b14c-41c646632315", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98bffdd7-12cd-49b3-8398-793a25e9f4af", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ddf5c1160ef25731bb7d57c64830d5fc2ee0e9ef3f02a3c5ad1937f51df2f0ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36e4e463-0e61-4cf5-8c50-8a47fb5acea6", "node_type": "1", "metadata": {}, "hash": "52157677a273983b7dc96afd554f319c7f8fc245d0b0f3f361854fbb41c42c2b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    Executes the given Python code in a controlled environment, capturing\n    the output and errors.\n\n    Parameters:\n        code (str): The Python code to be executed.\n        shared_list (ListProxy): A list proxy managed by a\n            multiprocessing.Manager to which the output and error messages\n            will be appended, along with a success flag.\n        maximum_memory_bytes (int): The maximum amount of memory in bytes\n            that the execution is allowed to use.\n        timeout (int): The maximum amount of time in seconds that the code\n            is allowed to run.\n\n    Returns:\n        None: This function does not return anything. It appends the results\n            to the shared_list.\n    \"\"\"\n    is_success = False\n    with create_tempdir():\n        # These system calls are needed when cleaning up tempdir.\n        rmtree = shutil.rmtree\n        rmdir = os.rmdir\n        chdir = os.chdir\n\n        sys_python_guard(maximum_memory_bytes)\n        output_buffer, error_buffer = io.StringIO(), io.StringIO()\n        with timer(timeout), contextlib.redirect_stdout(\n            output_buffer,\n        ), contextlib.redirect_stderr(error_buffer):\n            try:\n                exec(code)\n                is_success = True\n            except Exception:\n                error_buffer.write(traceback.format_exc())\n\n        # Needed for cleaning up.\n        shutil.rmtree = rmtree\n        os.rmdir = rmdir\n        os.chdir = chdir", "start_char_idx": 4203, "end_char_idx": 5660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36e4e463-0e61-4cf5-8c50-8a47fb5acea6": {"__data__": {"id_": "36e4e463-0e61-4cf5-8c50-8a47fb5acea6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9dbeac20-7d40-4198-b14c-41c646632315", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "17c9c7300e514eec505632115902720bcdb8890a2c334702bd2bdf5f747929b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62a6ddad-9dc8-4f40-937b-7d6a9f077411", "node_type": "1", "metadata": {}, "hash": "f383d807332949772904931afe3ed0f7f7c548b2e3f39f0fa458fd87cc5ef253", "class_name": "RelatedNodeInfo"}}, "text": "shared_list.extend(\n        [output_buffer.getvalue(), error_buffer.getvalue(), is_success],\n    )", "start_char_idx": 5665, "end_char_idx": 5763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62a6ddad-9dc8-4f40-937b-7d6a9f077411": {"__data__": {"id_": "62a6ddad-9dc8-4f40-937b-7d6a9f077411", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36e4e463-0e61-4cf5-8c50-8a47fb5acea6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "368a9bca68bc9cca3c9c3aafb057a706653710127a0e5d638174a4da5621e309", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9f75657-4699-4c28-acab-8664160d08c7", "node_type": "1", "metadata": {}, "hash": "aa92ac983eccfdb2d0b353a0bef96748b7a06da4d9ec37007cf36348bb5405bd", "class_name": "RelatedNodeInfo"}}, "text": "def _execute_python_code_sys(\n    code: str = \"\",\n    timeout: Optional[Union[int, float]] = None,\n    maximum_memory_bytes: Optional[int] = None,\n) -> ServiceResponse:\n    \"\"\"\n    Execute string of python code in system environments.\n\n    WARNING: This function is designed to execute code generated by models\n    that have not been explicitly trusted. The likelihood of such code\n    being maliciously harmful is low, yet there exists a risk of unintended\n    destructive behavior arising from the model's limitations or misalignment.\n    \"\"\"\n    logger.warning(\n        \"Executing code in system environments. There exists a risk of \"\n        \"unintended destructive behavior. Please consider using a \"\n        \"containerized environment.\",\n    )\n\n    manager = multiprocessing.Manager()\n    shared_list = manager.list()\n\n    p = multiprocessing.Process(\n        target=_sys_execute,\n        args=(\n            code,\n            shared_list,\n            maximum_memory_bytes,\n            timeout,\n        ),\n    )\n    p.start()\n    p.join()\n    if p.is_alive():\n        p.kill()\n    output, error, status = shared_list[0], shared_list[1], shared_list[2]\n    if status:\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=output,\n        )\n    else:\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=f\"{output}\\n{error}\",\n        )", "start_char_idx": 5766, "end_char_idx": 7191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9f75657-4699-4c28-acab-8664160d08c7": {"__data__": {"id_": "e9f75657-4699-4c28-acab-8664160d08c7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62a6ddad-9dc8-4f40-937b-7d6a9f077411", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6ec61d8a17861b2a3ee0e361d676524094468ebd1660f39bda0b4009c50d966a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94542e8d-1c89-438b-bdc4-ea6fd06a4165", "node_type": "1", "metadata": {}, "hash": "44319f90147d364d8216e173f31ead1ac087f29de77dd72a315308de703b038b", "class_name": "RelatedNodeInfo"}}, "text": "def _execute_python_code_docker(\n    code: str = \"\",\n    timeout: Optional[Union[int, float]] = None,\n    use_docker: Optional[Union[bool, str]] = True,\n    maximum_memory_bytes: Optional[int] = None,\n) -> ServiceResponse:", "start_char_idx": 7194, "end_char_idx": 7416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94542e8d-1c89-438b-bdc4-ea6fd06a4165": {"__data__": {"id_": "94542e8d-1c89-438b-bdc4-ea6fd06a4165", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9f75657-4699-4c28-acab-8664160d08c7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "184c8443daf4de4b3f76cffc491341323e0660a5f67c6f2964ea7b860890031f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "341d636e-1050-4640-8579-87fc35ccd746", "node_type": "1", "metadata": {}, "hash": "82e40a2cae2118d896efa63b3c2a1d54e4083a9dd6557f1105c4d2346fa8b971", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    Execute string of python code in containerized environments.\n\n    If ImportErrors occur, this function will attempt to install the missing\n    packages and retry execution until no ImportErrors are found or until\n    execution succeeds.\n    \"\"\"", "start_char_idx": 7421, "end_char_idx": 7673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "341d636e-1050-4640-8579-87fc35ccd746": {"__data__": {"id_": "341d636e-1050-4640-8579-87fc35ccd746", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94542e8d-1c89-438b-bdc4-ea6fd06a4165", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6dbfc477cc0bd34b48aa4baf57addc001f076043319820e74e9d6fcd4026109d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6", "node_type": "1", "metadata": {}, "hash": "2a73288b4a6469167d3ce16451f195512dd6a8504c6d69b207ab34cbfbbef0bf", "class_name": "RelatedNodeInfo"}}, "text": "def docker_execute(\n        exec_code: str,\n        max_retries: int = 5,\n    ) -> Tuple:", "start_char_idx": 7679, "end_char_idx": 7768, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6": {"__data__": {"id_": "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "341d636e-1050-4640-8579-87fc35ccd746", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0abb60a23c7aa320e1010ce23fef175d6647f628be9d67f0619a8e448575076d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b5f7f54-eef9-4438-9b82-15350e3cb40f", "node_type": "1", "metadata": {}, "hash": "42db46db08dcc65248f573c88e883ffb73d1835cac444d1cbd3cbcc6329b8a43", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Helper function to execute code inside the container.\"\"\"\n        missing_modules = []\n        # Extract source code with wrapper timer\n        timer_code = str(inspect.getsource(timer))\n        is_success = False\n\n        # Construct the timer context manager code\n        exec_code_with_timer = (\n            \"import contextlib, signal\\nfrom typing import Any, Generator, \"\n            \"Optional, Union\\n\"\n            + timer_code\n            + f\"\\nwith timer({timeout}):\\n    \"\n        )\n\n        # Construct the command to be executed inside the timer context\n        exec_code_with_timer = f\"\"\"{exec_code_with_timer}\n            exec('''{exec_code}''')\n        \"\"\"\n\n        # Create a temporary file to store the commands to run\n        code_hash = md5(code.encode()).hexdigest()\n        file_name = f\"tmp_code_{code_hash}.py\"\n        with open(file_name, \"w\", encoding=\"utf-8\") as exec_code_file:\n            exec_code_file.write(exec_code_with_timer)", "start_char_idx": 7777, "end_char_idx": 8736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b5f7f54-eef9-4438-9b82-15350e3cb40f": {"__data__": {"id_": "0b5f7f54-eef9-4438-9b82-15350e3cb40f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f6aab519c37866c54e1a9038008f0f1e9ed401bedf93307ff7b70ec5be3278c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78a5cebe-7f30-47fb-a0cc-76dfce1c2637", "node_type": "1", "metadata": {}, "hash": "5b4be0348ce250110f7b004fa471a3d57ad6e0bc6ec4c5c12a5f94b2f3153187", "class_name": "RelatedNodeInfo"}}, "text": "try:", "start_char_idx": 334, "end_char_idx": 338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78a5cebe-7f30-47fb-a0cc-76dfce1c2637": {"__data__": {"id_": "78a5cebe-7f30-47fb-a0cc-76dfce1c2637", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b5f7f54-eef9-4438-9b82-15350e3cb40f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "48bd5cc82d1aa65b36316ef8a9dfd307b718935a678be1737cbead4a5bd616e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d88ad05-653f-47d8-be58-e29907f9a7aa", "node_type": "1", "metadata": {}, "hash": "e92e1821bba448e93c357866865f9cb20f4274b1a8cb27d9f565f4e238d46dfa", "class_name": "RelatedNodeInfo"}}, "text": "for _ in range(max_retries):\n                # Check if there are missing modules to install", "start_char_idx": 8763, "end_char_idx": 8855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d88ad05-653f-47d8-be58-e29907f9a7aa": {"__data__": {"id_": "3d88ad05-653f-47d8-be58-e29907f9a7aa", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78a5cebe-7f30-47fb-a0cc-76dfce1c2637", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f3a863bebee725bf13a774df7b0bec8dbfa178e52cb431dc3bb372a0b326a4c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47f35d06-4e53-49e5-881c-9bb078c9b90b", "node_type": "1", "metadata": {}, "hash": "6b9602b78d26918b969b07068e7bc5affebeec74d5e5b557da864c50cbb0872e", "class_name": "RelatedNodeInfo"}}, "text": "install_command = (\n                    f\"pip install -q {' '.join(missing_modules)} -i\"\n                    f\" {_DEFAULT_PYPI_MIRROR} \"\n                    f\"--trusted-host {_DEFAULT_TRUSTED_HOST}\"\n                    if missing_modules\n                    else \"\"\n                )\n\n                # Construct the Docker command\n                docker_command = (\n                    f\"{install_command} && python /app/{file_name}\"\n                )\n                docker_command = docker_command.strip(\"& \")\n\n                container = client.containers.run(\n                    image=image_name,\n                    command=docker_command,\n                    volumes={os.getcwd(): {\"bind\": \"/app\", \"mode\": \"rw\"}},\n                    working_dir=\"/app\",\n                    detach=True,\n                )\n                wait_response = container.wait()\n                docker_out = container.logs(stdout=True, stderr=False).decode(\n                    \"utf-8\",\n                )\n                docker_err = container.logs(stdout=False, stderr=True).decode(\n                    \"utf-8\",\n                )\n                is_success = wait_response.get(\"StatusCode\", None) == 0\n                # Check for ImportError or ModuleNotFoundError in stderr\n                if (\n                    \"ImportError\" not in docker_err\n                    and \"ModuleNotFoundError\" not in docker_err\n                ):\n                    break\n\n                # Extract the name of the missing module", "start_char_idx": 8872, "end_char_idx": 10370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47f35d06-4e53-49e5-881c-9bb078c9b90b": {"__data__": {"id_": "47f35d06-4e53-49e5-881c-9bb078c9b90b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d88ad05-653f-47d8-be58-e29907f9a7aa", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "88165c825ba09b357872f397edf433946153f657ca2a3ae6fdc7d96b55bb5b35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efd95891-9911-47b1-b59c-f73f6ebc8d83", "node_type": "1", "metadata": {}, "hash": "cbcfeb111a7cc2306907ed970ef41f9ad22c24af150f01a6f733b039a8fb4eb8", "class_name": "RelatedNodeInfo"}}, "text": "missing_module_match = re.search(\n                    r\"No module named '(\\w+)'\",\n                    docker_err,\n                )\n                if missing_module_match:\n                    missing_modules.append(missing_module_match.group(1))\n                else:\n                    # If a missing module cannot be determined, do not retry\n                    break", "start_char_idx": 10387, "end_char_idx": 10758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efd95891-9911-47b1-b59c-f73f6ebc8d83": {"__data__": {"id_": "efd95891-9911-47b1-b59c-f73f6ebc8d83", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47f35d06-4e53-49e5-881c-9bb078c9b90b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "44e9118223358846f8d9faf3b132bd8aee1336685dfb5abf979bddabd8066e19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7", "node_type": "1", "metadata": {}, "hash": "e6b2d0cb6b52f79e187ce4d8efb1aff3abfce21b161dcee2c9fe1ba6b7d494f4", "class_name": "RelatedNodeInfo"}}, "text": "except Exception as e:\n            logger.error(e)\n        finally:\n            # Clean up the temporary file\n            if os.path.exists(file_name):\n                os.remove(file_name)", "start_char_idx": 10767, "end_char_idx": 10955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7": {"__data__": {"id_": "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efd95891-9911-47b1-b59c-f73f6ebc8d83", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f470df86b13f98c99d52788fc5d8bdcb5c8d8db6821b8caf7b2de97ab3652c1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78", "node_type": "1", "metadata": {}, "hash": "77bfbd226d08fc8836b2e96c7372dc208d5df2988b7ab338ecbb75bfa91daaee", "class_name": "RelatedNodeInfo"}}, "text": "return docker_out, docker_err, is_success", "start_char_idx": 10965, "end_char_idx": 11006, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78": {"__data__": {"id_": "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29253b1842ace2852ead1f7b7367255a69767700010d57b29f99351aadc4b3fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8aefe10d-37be-418a-9b56-f8ff99aac41e", "node_type": "1", "metadata": {}, "hash": "2ddf02441f009846dd1b81c7f15b357e5b9c9a53b965805bb132bc223181b7bd", "class_name": "RelatedNodeInfo"}}, "text": "client = docker.from_env()  # Initialize Docker client\n\n    # Step 1. Pull images & enter images\n    image_name = \"python:3.9.12\" if use_docker is True else use_docker\n\n    # Check if the image exists locally before pulling\n    local_images = [\n        tag for image in client.images.list() for tag in image.tags\n    ]\n    if image_name not in local_images:\n        try:\n            # Pull the image if it does not exist locally\n            client.images.pull(image_name)\n        except (ImageNotFound, APIError) as e:\n            return ServiceResponse(\n                status=ServiceExecStatus.ERROR,\n                content=f\"Failed to pull Docker image: {e}\",\n            )\n\n    # Step 2. Execute code and catch Import Error and re-install\n    run_args = {\"image\": image_name, \"detach\": True, \"network_disabled\": False}\n    if maximum_memory_bytes is not None:\n        run_args[\"mem_limit\"] = maximum_memory_bytes\n\n    # Try to execute the code and retry if ImportErrors are encountered\n    output, error, status = docker_execute(code)\n\n    if status:\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=output,\n        )\n    else:\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=f\"{output}\\n{error}\",\n        )", "start_char_idx": 11012, "end_char_idx": 12321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8aefe10d-37be-418a-9b56-f8ff99aac41e": {"__data__": {"id_": "8aefe10d-37be-418a-9b56-f8ff99aac41e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c1ad1fceac0060bc0f7c6b47af033a2b14eed90e7788d76481f4ec2aeb19346d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22d77424-b8bb-400d-a9b5-22e38ff789dd", "node_type": "1", "metadata": {}, "hash": "bbc5395e4ee2fb4d2f0f5f754da1ffaf69f3ec501b7c3043c3a829bed0856a3d", "class_name": "RelatedNodeInfo"}}, "text": "def sys_python_guard(maximum_memory_bytes: Optional[int] = None) -> None:", "start_char_idx": 12324, "end_char_idx": 12397, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22d77424-b8bb-400d-a9b5-22e38ff789dd": {"__data__": {"id_": "22d77424-b8bb-400d-a9b5-22e38ff789dd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8aefe10d-37be-418a-9b56-f8ff99aac41e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "82f286538a863df05b3376254d1772f00facd6940b1e43101cee069090625d45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b994cc84-636a-438f-810b-a998d1535903", "node_type": "1", "metadata": {}, "hash": "becf06826a0f52a74d08ad6ca65356d4d47aa4de6b074c89f0da8fc3333506f7", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    This disables various destructive functions and prevents the generated code\n    from interfering with the test (e.g. fork bomb, killing other processes,\n    removing filesystem files, etc.)\n\n    The implementation of this function are modified from\n    https://github.com/openai/human-eval/blob/master/human_eval/execution.py\n    \"\"\"\n\n    if resource is not None:\n        if maximum_memory_bytes is not None:\n            resource.setrlimit(\n                resource.RLIMIT_AS,\n                (maximum_memory_bytes, maximum_memory_bytes),\n            )\n            resource.setrlimit(\n                resource.RLIMIT_DATA,\n                (maximum_memory_bytes, maximum_memory_bytes),\n            )\n            if not platform.uname().system == \"Darwin\":\n                resource.setrlimit(\n                    resource.RLIMIT_STACK,\n                    (maximum_memory_bytes, maximum_memory_bytes),\n                )\n\n    # Disable builtins functions\n    builtins_funcs_to_disable = [\"exit\", \"quit\"]\n    for func_name in builtins_funcs_to_disable:\n        setattr(builtins, func_name, None)\n\n    # Disable os functions\n    os.environ[\"OMP_NUM_THREADS\"] = \"1\"", "start_char_idx": 12402, "end_char_idx": 13569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b994cc84-636a-438f-810b-a998d1535903": {"__data__": {"id_": "b994cc84-636a-438f-810b-a998d1535903", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d990a440-4521-4096-a633-6a4def9749b8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "05dc45f92632ae7d1cde5a9b85434cd083c2ff09579ca07f25a084d34b1cc557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22d77424-b8bb-400d-a9b5-22e38ff789dd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ff7480e06a5b587a160c8635cbd083d9cabbc0bacd0868902d18ca31e545469e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60870d9a-a6ba-4a1d-84b9-db5d00150a31", "node_type": "1", "metadata": {}, "hash": "db0b17f518c43e19cab098a8c1ee7a2b5b7ccabf4e30b5294ecc6f637f09ee07", "class_name": "RelatedNodeInfo"}}, "text": "os_funcs_to_disable = [\n        \"kill\",\n        \"system\",\n        \"putenv\",\n        \"remove\",\n        \"removedirs\",\n        \"rmdir\",\n        \"fchdir\",\n        \"setuid\",\n        \"fork\",\n        \"forkpty\",\n        \"killpg\",\n        \"rename\",\n        \"renames\",\n        \"truncate\",\n        \"replace\",\n        \"unlink\",\n        \"fchmod\",\n        \"fchown\",\n        \"chmod\",\n        \"chown\",\n        \"chroot\",\n        \"lchflags\",\n        \"lchmod\",\n        \"lchown\",\n        \"getcwd\",\n        \"chdir\",\n    ]\n    for func_name in os_funcs_to_disable:\n        setattr(os, func_name, None)\n\n    # Disable shutil functions\n    shutil_funcs_to_disable = [\"rmtree\", \"move\", \"chown\"]\n    for func_name in shutil_funcs_to_disable:\n        setattr(shutil, func_name, None)\n\n    # Disable subprocess functions\n    subprocess_funcs_to_disable = [\"Popen\"]\n    for func_name in subprocess_funcs_to_disable:\n        setattr(subprocess, func_name, None)\n\n    __builtins__[\"help\"] = None\n\n    # Disable sys modules\n    sys_modules_to_disable = [\n        \"ipdb\",\n        \"joblib\",\n        \"resource\",\n        \"psutil\",\n        \"tkinter\",\n    ]\n    for module_name in sys_modules_to_disable:\n        sys.modules[module_name] = None", "start_char_idx": 13574, "end_char_idx": 14780, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60870d9a-a6ba-4a1d-84b9-db5d00150a31": {"__data__": {"id_": "60870d9a-a6ba-4a1d-84b9-db5d00150a31", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b994cc84-636a-438f-810b-a998d1535903", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cf48acfb171acbaa9840eb61b287aed2a3c7699867cb30e5ed93d7b6213575a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8178ba9-623e-4db6-baee-098ead12e8dc", "node_type": "1", "metadata": {}, "hash": "069edb619f8a1ca5197d7f1b4bdad9747f8cddfc6dc90385deb7f04f2ebfe609", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Common operators for file and directory. \"\"\"\nimport os\nimport shutil\n\nfrom agentscope.utils.common import write_file\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\n\n\ndef create_file(file_path: str, content: str = \"\") -> ServiceResponse:\n    \"\"\"\n    Create a file and write content to it.\n\n    Args:\n        file_path (`str`):\n            The path where the file will be created.\n        content (`str`):\n            Content to write into the file.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    if os.path.exists(file_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The file already exists.\",\n        )\n    return write_file(content, file_path)", "start_char_idx": 0, "end_char_idx": 950, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8178ba9-623e-4db6-baee-098ead12e8dc": {"__data__": {"id_": "c8178ba9-623e-4db6-baee-098ead12e8dc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60870d9a-a6ba-4a1d-84b9-db5d00150a31", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a510f865413e27f12a1c433e044d026925eb033453e288152aa6f5c2a9104649", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "005f7552-b6ef-49f0-8528-e0f6a8765f0c", "node_type": "1", "metadata": {}, "hash": "a0ee024971948e8d90fca35267c3455a9b2760ff51275108b16b040065319020", "class_name": "RelatedNodeInfo"}}, "text": "def delete_file(file_path: str) -> ServiceResponse:\n    \"\"\"Delete a file specified by the file path.\n\n    Args:\n        file_path (`str`):\n            The path of the file to be deleted.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    try:\n        os.remove(file_path)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 953, "end_char_idx": 1666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "005f7552-b6ef-49f0-8528-e0f6a8765f0c": {"__data__": {"id_": "005f7552-b6ef-49f0-8528-e0f6a8765f0c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8178ba9-623e-4db6-baee-098ead12e8dc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "943a3a1a714ccc9bff7300669ec709e225cc562190637707dac008cac09d4dc3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c572eba8-2892-48e2-bcb2-6fc44eb32294", "node_type": "1", "metadata": {}, "hash": "3868aa8100da9ca8d5b24d17aba501982dd8c25cb1e9ab5054a841004c076978", "class_name": "RelatedNodeInfo"}}, "text": "def move_file(source_path: str, destination_path: str) -> ServiceResponse:\n    \"\"\"\n    Move a file from a source path to a destination path.\n\n    Args:\n        source_path (`str`):\n            The current path of the file.\n        destination_path (`str`):\n            The new path for the file.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    if not os.path.exists(source_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileNotFoundError: The source file does not exist.\",\n        )\n    if os.path.exists(destination_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The destination file already exists.\",\n        )\n    try:\n        shutil.move(source_path, destination_path)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 1669, "end_char_idx": 2917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c572eba8-2892-48e2-bcb2-6fc44eb32294": {"__data__": {"id_": "c572eba8-2892-48e2-bcb2-6fc44eb32294", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "005f7552-b6ef-49f0-8528-e0f6a8765f0c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ab38c6bbb31919282ce2ce43888110596fe9159cd7664f9bee4d4e70d5ccc4b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e", "node_type": "1", "metadata": {}, "hash": "4cce53d26b78be4a2979bf20de98f22b635dd2106a58749c46aae9ad810536b8", "class_name": "RelatedNodeInfo"}}, "text": "def create_directory(directory_path: str) -> ServiceResponse:\n    \"\"\"\n    Create a directory at the specified path.\n\n    Args:\n        directory_path (`str`):\n            The path where the directory will be created.\n\n    Returns:\n        `ServiceResponse`: where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    if os.path.exists(directory_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The directory already exists.\",\n        )\n    try:\n        os.makedirs(directory_path)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 2920, "end_char_idx": 3865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e": {"__data__": {"id_": "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c572eba8-2892-48e2-bcb2-6fc44eb32294", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f782b6730fe920200ef4a65b02169f7e27efe7effc2b3e2afb287fcd4edb4624", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8256e890-aa14-4898-a2bb-4ea3f0395674", "node_type": "1", "metadata": {}, "hash": "0ab27a53efbf2060d89e960f41dbec7c6799279fa54ee41df6c120c925b2a590", "class_name": "RelatedNodeInfo"}}, "text": "def delete_directory(directory_path: str) -> ServiceResponse:\n    \"\"\"\n    Delete a directory and all of its contents.\n\n    Args:\n        directory_path (`str`):\n            The path of the directory to be deleted.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    if not os.path.exists(directory_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The directory does not exists.\",\n        )\n    try:\n        shutil.rmtree(directory_path)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 3868, "end_char_idx": 4817, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8256e890-aa14-4898-a2bb-4ea3f0395674": {"__data__": {"id_": "8256e890-aa14-4898-a2bb-4ea3f0395674", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e7dd618-bd56-4dab-a747-94ba28f85512", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e53918c4a9e834002b2505961e48bba7957810fee67b123a49d08a1aa7ff648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cf980197d6966d39598b35c56a409f5076267cb6acf42d2dc26a0075430450b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e53f92d-ff3c-4fe5-811e-2de02b56e34f", "node_type": "1", "metadata": {}, "hash": "c320890ba8ea69c45f7a932b2669dea87d45669aa2bb70919f1fca474310c541", "class_name": "RelatedNodeInfo"}}, "text": "def move_directory(\n    source_path: str,\n    destination_path: str,\n) -> ServiceResponse:\n    \"\"\"\n    Move a directory from a source path to a destination path.\n\n    Args:\n        source_path (`str`):\n            The current path of the directory.\n        destination_path (`str`):\n            The new path for the directory.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n\n    \"\"\"\n    if not os.path.exists(source_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileNotFoundError: The source directory does not exist.\",\n        )\n    if os.path.exists(destination_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The destination directory already \"\n            \"exists.\",\n        )\n    try:\n        shutil.move(source_path, destination_path)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 4820, "end_char_idx": 6124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e53f92d-ff3c-4fe5-811e-2de02b56e34f": {"__data__": {"id_": "0e53f92d-ff3c-4fe5-811e-2de02b56e34f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37a7f555-ff29-4430-8da6-683b7e6f653a", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "907bac9c8de934d8255caf47e1fe71a8033377a4a785ba56ac7c0830e4f8f085", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8256e890-aa14-4898-a2bb-4ea3f0395674", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "dc475d0145404cafff28b2b97a2f4d359c58a93b116722286cc79d30972984e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dda80d6c-cbe8-496c-923a-cc3a935eacdd", "node_type": "1", "metadata": {}, "hash": "2055f2a8965880649a9464e2833501016c8502c67328f88cabf0fd6e6ee7487b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Operators for json file and directory. \"\"\"\nimport json\nimport os\nfrom typing import Any\n\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\n\n\ndef read_json_file(file_path: str) -> ServiceResponse:\n    \"\"\"\n    Read and parse a JSON file.\n\n    Args:\n        file_path (`str`):\n            The path to the JSON file to be read.\n\n    Returns:\n        `ServiceResponse`: Where the boolean indicates success, the\n        Any is the parsed JSON content (typically a dict), and the str contains\n        an error message if any, including the error type.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            return ServiceResponse(\n                status=ServiceExecStatus.SUCCESS,\n                content=f\"{json.load(file)}\",\n            )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 0, "end_char_idx": 1077, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dda80d6c-cbe8-496c-923a-cc3a935eacdd": {"__data__": {"id_": "dda80d6c-cbe8-496c-923a-cc3a935eacdd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37a7f555-ff29-4430-8da6-683b7e6f653a", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "907bac9c8de934d8255caf47e1fe71a8033377a4a785ba56ac7c0830e4f8f085", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e53f92d-ff3c-4fe5-811e-2de02b56e34f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2e7cd16a978774c6ae291d7386b21b43957ec6ee095b3de0e6b34ec556199e18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01", "node_type": "1", "metadata": {}, "hash": "17b87f52592b066768f58b34b8ae442d24f29997e905872567e869aa7a6dcdf3", "class_name": "RelatedNodeInfo"}}, "text": "def write_json_file(\n    file_path: str,\n    data: Any,\n    overwrite: bool = False,\n) -> ServiceResponse:\n    \"\"\"\n    Serialize data to a JSON file.\n\n    Args:\n        file_path (`str`):\n            The path to the file where the JSON data will be written.\n        data (`Any`):\n            The data to serialize to JSON.\n        overwrite (`bool`):\n            Whether to overwrite the file if it already exists.\n\n    Returns:\n        `ServiceResponse`: where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n    \"\"\"\n    if not overwrite and os.path.exists(file_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The file already exists.\",\n        )\n    try:\n        with open(file_path, \"w\", encoding=\"utf-8\") as file:\n            json.dump(data, file, ensure_ascii=False, indent=4)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 1080, "end_char_idx": 2319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01": {"__data__": {"id_": "bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f3f10ce-a7fb-40cc-a672-6375a21de651", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b9c4a786bd844ba86df8ec82478fad72c86aec4016b110c745c719878bef068d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dda80d6c-cbe8-496c-923a-cc3a935eacdd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "62844cea8a6df5ac1a38eb2fa2fc6012a0bc230bfccce94471ca8531f81a86de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "71851a56-959d-4d60-be22-ea9cafa81b65", "node_type": "1", "metadata": {}, "hash": "5f63ab900253e3ac0bdd8ee4046e2560331fe95568eaed7d78ddf452af117d16", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Operators for txt file and directory. \"\"\"\nimport os\n\nfrom agentscope.utils.common import write_file\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\n\n\ndef read_text_file(file_path: str) -> ServiceResponse:\n    \"\"\"\n    Read the content of the text file.\n\n    Args:\n        file_path (`str`):\n            The path to the text file to be read.\n\n    Returns:\n        `ServiceResponse`: A tuple (bool, str) where the boolean indicates\n        success, and the str contains the file content or an error message\n        if any, including the error type.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            return ServiceResponse(\n                status=ServiceExecStatus.SUCCESS,\n                content=file.read(),\n            )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 0, "end_char_idx": 1071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71851a56-959d-4d60-be22-ea9cafa81b65": {"__data__": {"id_": "71851a56-959d-4d60-be22-ea9cafa81b65", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f3f10ce-a7fb-40cc-a672-6375a21de651", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b9c4a786bd844ba86df8ec82478fad72c86aec4016b110c745c719878bef068d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2f9c3cc0772345ad79006f1ad52b203bd5705e60fe1d23ff89d92a960566ddb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ad9879c-9160-4b3f-97b8-15f15ad4cadc", "node_type": "1", "metadata": {}, "hash": "77eece11cd6752d5f0c300a086de8b0e7e5a077406e129595701a5bcfb4e9ac3", "class_name": "RelatedNodeInfo"}}, "text": "def write_text_file(\n    file_path: str,\n    content: str,\n    overwrite: bool = False,\n) -> ServiceResponse:\n    \"\"\"\n    Write content to a text file.\n\n    Args:\n        file_path (`str`):\n            The path to the file where content will be written.\n        content (`str`):\n            Content to write into the file.\n        overwrite (`bool`, defaults to `False`):\n            Whether to overwrite the file if it already exists.\n\n    Returns:\n        `ServiceResponse`: where the boolean indicates success, and the\n        str contains an error message if any, including the error type.\n    \"\"\"\n    if not overwrite and os.path.exists(file_path):\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=\"FileExistsError: The file already exists.\",\n        )\n    return write_file(content, file_path)", "start_char_idx": 1074, "end_char_idx": 1920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ad9879c-9160-4b3f-97b8-15f15ad4cadc": {"__data__": {"id_": "0ad9879c-9160-4b3f-97b8-15f15ad4cadc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "76fe8e5850518bfb4e7b932725631b04ab2d53ef8299083d57c1b187ec3d32a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "71851a56-959d-4d60-be22-ea9cafa81b65", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bb987cdc28be14529dcda93a9a7179ba7b1e07ddc8d7f0260e726a72c31438cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc3ed1ed-59fd-4021-8598-37800301ed2e", "node_type": "1", "metadata": {}, "hash": "c2ddee859b2ea3093bbff84428fe33123882e2deecfde4461d8a94e0b6a51802", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Retrieve service working with memory specially.\"\"\"\nfrom typing import Callable, Optional, Any, Sequence\nfrom loguru import logger\n\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\nfrom agentscope.models import ModelWrapperBase", "start_char_idx": 0, "end_char_idx": 332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc3ed1ed-59fd-4021-8598-37800301ed2e": {"__data__": {"id_": "cc3ed1ed-59fd-4021-8598-37800301ed2e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "76fe8e5850518bfb4e7b932725631b04ab2d53ef8299083d57c1b187ec3d32a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ad9879c-9160-4b3f-97b8-15f15ad4cadc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e93f801f23b7e956384baac243df83df3d29a76688a28fd3086f827560c6f12c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a81886da-54e6-47a4-a08c-baa232923d8c", "node_type": "1", "metadata": {}, "hash": "68c541a2a14a76b1b2ad12f887fd82ff64ddeae476a642aa4cf85be012fdb872", "class_name": "RelatedNodeInfo"}}, "text": "def retrieve_from_list(\n    query: Any,\n    knowledge: Sequence,  # TODO: rename\n    score_func: Callable[[Any, Any], float],\n    top_k: int = None,\n    embedding_model: Optional[ModelWrapperBase] = None,\n    preserve_order: bool = True,\n) -> ServiceResponse:", "start_char_idx": 335, "end_char_idx": 594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a81886da-54e6-47a4-a08c-baa232923d8c": {"__data__": {"id_": "a81886da-54e6-47a4-a08c-baa232923d8c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "76fe8e5850518bfb4e7b932725631b04ab2d53ef8299083d57c1b187ec3d32a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc3ed1ed-59fd-4021-8598-37800301ed2e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f031d8c2629c8475607718c3a86523333f4b18a2f66f71620328efa594f4de31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98", "node_type": "1", "metadata": {}, "hash": "43aa8a61919e6bd79b5100b6a8bae1dfacf1cc191d47686946b0c8351b38e337", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    Retrieve data in a list.\n\n    Memory retrieval with user-defined score function. The score function is\n    expected to take the `query` and one of the element in 'knowledge' (a\n    list). This function retrieves top-k elements in 'knowledge' with\n    HIGHEST scores. If the 'query' is a dict but has no embedding,\n    we use the embedding model to embed the query.\n\n    Args:\n        query (`Any`):\n            A message to be retrieved.\n        knowledge (`Sequence`):\n            Data/knowledge to be retrieved from.\n        score_func (`Callable[[Any, Any], float]`):\n            User-defined function for comparing two messages.\n        top_k (`int`, defaults to `None`):\n            Maximum number of messages returned.\n        embedding_model (`Optional[ModelWrapperBase]`, defaults to `None`):\n            A model to embed the query/message.\n        preserve_order (`bool`, defaults to `True`):\n            Whether to preserve the original order of the retrieved data.\n            Defaults to True.\n\n    Returns:\n        `ServiceResponse`: The top-k retrieved messages with HIGHEST scores.\n    \"\"\"", "start_char_idx": 599, "end_char_idx": 1711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98": {"__data__": {"id_": "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "76fe8e5850518bfb4e7b932725631b04ab2d53ef8299083d57c1b187ec3d32a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a81886da-54e6-47a4-a08c-baa232923d8c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6626e0281abd97108e565251e515d9cfd6f3b6a7e7f6955e78b831f6bc080074", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d0c65263-3695-4d32-bec1-a77b4ff9bd3a", "node_type": "1", "metadata": {}, "hash": "2aa5366effa735f01154852c58c930badac6d6660b7a14bcaeb2b0e8852dc411", "class_name": "RelatedNodeInfo"}}, "text": "if isinstance(query, dict):\n        if embedding_model is not None and \"embedding\" not in query:\n            query[\"embedding\"] = embedding_model(\n                [query],\n                return_embedding_only=True,\n            )\n        elif embedding_model is None and \"embedding\" not in query:\n            logger.warning(\n                \"Since the input query has no embedding, embedding model is \"\n                \"is not provided either.\",\n            )\n\n    # (score, index, object)\n    scores = [\n        (score_func(query, msg), i, msg) for i, msg in enumerate(knowledge)\n    ]\n\n    # ordered by score, and extract the top-k items with highest scores\n    top_k = len(scores) if top_k is None else top_k\n    ordered_top_k_scores = sorted(scores, key=lambda x: x[0], reverse=True)[\n        :top_k\n    ]\n\n    # if keep the original order\n    if preserve_order:\n        # ordered by index\n        content = sorted(ordered_top_k_scores, key=lambda x: x[1])\n    else:\n        content = ordered_top_k_scores\n\n    # The returned content includes a list of triples of (score, index, object)\n    return ServiceResponse(\n        status=ServiceExecStatus.SUCCESS,\n        content=content,\n    )", "start_char_idx": 1716, "end_char_idx": 2907, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0c65263-3695-4d32-bec1-a77b4ff9bd3a": {"__data__": {"id_": "d0c65263-3695-4d32-bec1-a77b4ff9bd3a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/similarity.py", "file_name": "similarity.py", "file_type": "text/x-python", "file_size": 926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa94194c-094f-4782-9782-dab52b115a83", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/similarity.py", "file_name": "similarity.py", "file_type": "text/x-python", "file_size": 926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2e34ed0bd47f96c6979bf2eec358bec66473f5c86c1867f5b8d7151d54267a7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6fcef734c4e8eba7b188e7e3ae3c436004d48222156515528bd7e2323c52eb8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2279d4a7-0f8f-4a4a-9192-2b44e96aed88", "node_type": "1", "metadata": {}, "hash": "7c5fccf05c25bf88ccb0be5c5bf80bf61aef77ab246787f4e828d0fc8f44241a", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"\nSimilarity functions for retrieval\n\"\"\"\ntry:\n    import numpy as np\nexcept ImportError:\n    np = None\n\nfrom agentscope.service.service_status import ServiceExecStatus\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.constants import Embedding\n\n\ndef cos_sim(\n    a: Embedding,\n    b: Embedding,\n) -> ServiceResponse:\n    \"\"\"Compute the cosine similarity between two different embeddings\n\n    Args:\n        a (`Embedding`):\n            Embedding\n        b (`Embedding`):\n            Embedding\n\n    Returns:\n        `ServiceResponse`: A float.\n    \"\"\"\n    if not len(a) == len(b):\n        return ServiceResponse(\n            ServiceExecStatus.ERROR,\n            \"embedding length not equal\",\n        )\n    a, b = np.array(a), np.array(b)\n    return ServiceResponse(\n        ServiceExecStatus.SUCCESS,\n        np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b)),\n    )", "start_char_idx": 0, "end_char_idx": 925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2279d4a7-0f8f-4a4a-9192-2b44e96aed88": {"__data__": {"id_": "2279d4a7-0f8f-4a4a-9192-2b44e96aed88", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d0c65263-3695-4d32-bec1-a77b4ff9bd3a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/similarity.py", "file_name": "similarity.py", "file_type": "text/x-python", "file_size": 926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c6ba82d4273b79413443310ac60aa2f4638adf40005f013212878f2bc25bf00d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6538b8fa-74ca-45df-80fd-77c5dbd569fd", "node_type": "1", "metadata": {}, "hash": "3de87432558256eeaf141a6e02e6f4b39311aa3c105f6ea1be685b19bd16d9bd", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Service factory for model prompt.\"\"\"\nimport collections.abc\nfrom functools import partial\nimport inspect\nfrom typing import (\n    Callable,\n    Any,\n    Tuple,\n    Union,\n    Optional,\n    Literal,\n    get_args,\n    get_origin,\n)\n\ntry:\n    from docstring_parser import parse\nexcept ImportError:\n    parse = None\nfrom loguru import logger\n\n\ndef _get_type_str(cls: Any) -> Optional[Union[str, list]]:\n    \"\"\"Get the type string.\"\"\"\n    type_str = None\n    if hasattr(cls, \"__origin__\"):\n        # Typing class\n        if cls.__origin__ is Union:\n            type_str = [_get_type_str(_) for _ in get_args(cls)]\n        elif cls.__origin__ is collections.abc.Sequence:\n            type_str = \"array\"\n        else:\n            type_str = str(cls.__origin__)\n    else:\n        # Normal class\n        if cls is str:\n            type_str = \"string\"\n        elif cls in [float, int, complex]:\n            type_str = \"number\"\n        elif cls is bool:\n            type_str = \"boolean\"\n        elif cls is collections.abc.Sequence:\n            type_str = \"array\"\n        elif cls is None.__class__:\n            type_str = \"null\"\n        else:\n            type_str = cls.__name__\n\n    return type_str  # type: ignore[return-value]", "start_char_idx": 0, "end_char_idx": 1246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6538b8fa-74ca-45df-80fd-77c5dbd569fd": {"__data__": {"id_": "6538b8fa-74ca-45df-80fd-77c5dbd569fd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2279d4a7-0f8f-4a4a-9192-2b44e96aed88", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f1e076bd9098a979dff046d7727980ab3f98ca0d015169843b47da886b0bd981", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fabfd1e0-c961-4447-a143-3f0c5b437215", "node_type": "1", "metadata": {}, "hash": "d491c6e67f363949c7dc2384e5fa61dd18d6823a658f098fabc5f27496c76c88", "class_name": "RelatedNodeInfo"}}, "text": "class ServiceFactory:", "start_char_idx": 1249, "end_char_idx": 1270, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fabfd1e0-c961-4447-a143-3f0c5b437215": {"__data__": {"id_": "fabfd1e0-c961-4447-a143-3f0c5b437215", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6538b8fa-74ca-45df-80fd-77c5dbd569fd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "34eb37db9751f9b03770261218ed73c8acd53689e77d0d661d54328d97a3b552", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "193c9687-4958-47e9-802a-edcf71fe4440", "node_type": "1", "metadata": {}, "hash": "f82a08c4aaa806f9f9e65ebe48c2f248830ed3c5dc8edefd2977b526c3d66f0c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A service factory class that turns service function into string\n    prompt format.\"\"\"", "start_char_idx": 1275, "end_char_idx": 1363, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "193c9687-4958-47e9-802a-edcf71fe4440": {"__data__": {"id_": "193c9687-4958-47e9-802a-edcf71fe4440", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fabfd1e0-c961-4447-a143-3f0c5b437215", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5a68c40bf51d3b74814590a5406b3a47aba9e70c48c8771c77f7b643cb1224ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "363f2f51-0db7-48bf-8c3a-ee81f19f73b4", "node_type": "1", "metadata": {}, "hash": "76fbbfa03d56d53dbb69c17429a946be60a3b366c7773cca4b9981378358be20", "class_name": "RelatedNodeInfo"}}, "text": "@classmethod", "start_char_idx": 1369, "end_char_idx": 1381, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "363f2f51-0db7-48bf-8c3a-ee81f19f73b4": {"__data__": {"id_": "363f2f51-0db7-48bf-8c3a-ee81f19f73b4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "193c9687-4958-47e9-802a-edcf71fe4440", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f88300aafea66855147fbf8cdccf2a54f58980f415af8ab2fe657e3e673c3bf2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a698082b-78e4-4713-aed1-63391875427b", "node_type": "1", "metadata": {}, "hash": "902519eb2048031c3af648c9d25bbcd998b25b32f9ecc914b2c67e7abfb8abc2", "class_name": "RelatedNodeInfo"}}, "text": "def get(\n        cls,\n        service_func: Callable[..., Any],\n        **kwargs: Any,\n    ) -> Tuple[Callable[..., Any], dict]:", "start_char_idx": 1386, "end_char_idx": 1514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a698082b-78e4-4713-aed1-63391875427b": {"__data__": {"id_": "a698082b-78e4-4713-aed1-63391875427b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "363f2f51-0db7-48bf-8c3a-ee81f19f73b4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "655f40c63341ab3b53cd3ac7dab9bb25c066247a3223b039e0ab624d05c73a07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "101ca0f4-0471-43d1-a17d-44571a75347a", "node_type": "1", "metadata": {}, "hash": "b03afd88536e643bb8f0f85aae970a9525e4b1b8d7433d3fd7dd4e01cb9f8be3", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Covnert a service function into a tool function that agent can\n        use, and generate a dictionary in JSON Schema format that can be\n        used in OpenAI API directly. While for open-source model, developers\n        should handle the conversation from json dictionary to prompt.\n\n        Args:\n            service_func (`Callable[..., Any]`):\n                The service function to be called.\n            kwargs (`Any`):\n                The arguments to be passed to the service function.\n\n        Returns:\n            `Tuple(Callable[..., Any], dict)`: A tuple of tool function and\n            a dict in JSON Schema format to describe the function.\n\n        Note:\n            The description of the function and arguments are extracted from\n            its docstring automatically, which should be well-formatted in\n            **Google style**. Otherwise, their descriptions in the returned\n            dictionary will be empty.\n\n        Suggestions:\n            1. The name of the service function should be self-explanatory,\n            so that the agent can understand the function and use it properly.\n            2. The typing of the arguments should be provided when defining\n            the function (e.g. `def func(a: int, b: str, c: bool)`), so that\n            the agent can specify the arguments properly.\n\n        Example:\n\n        \"\"\"\n        # Get the function for agent to use\n        tool_func = partial(service_func, **kwargs)", "start_char_idx": 1523, "end_char_idx": 2977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "101ca0f4-0471-43d1-a17d-44571a75347a": {"__data__": {"id_": "101ca0f4-0471-43d1-a17d-44571a75347a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a698082b-78e4-4713-aed1-63391875427b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "43359e2fc54818fd91a41142f349e83896f7962342addbf93d9a0422b0568293", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b489401-eccb-4be9-88fc-bedd122f5894", "node_type": "1", "metadata": {}, "hash": "ed2515b12fc529094388ad77ee3f699176b81a427e21679006ce4e637d1eb02b", "class_name": "RelatedNodeInfo"}}, "text": "# Obtain all arguments of the service function\n        argsspec = inspect.getfullargspec(service_func)\n\n        # Construct the mapping from arguments to their typings\n        if parse is None:\n            raise ImportError(\n                \"Missing required package `docstring_parser`\"\n                \"Please install it by \"\n                \"`pip install docstring_parser`.\",\n            )\n\n        docstring = parse(service_func.__doc__)\n\n        # Function description\n        func_description = (\n            docstring.short_description or docstring.long_description\n        )\n\n        # The arguments that requires the agent to specify\n        args_agent = set(argsspec.args) - set(kwargs.keys())\n\n        # Check if the arguments from agent have descriptions in docstring\n        args_description = {\n            _.arg_name: _.description for _ in docstring.params\n        }\n\n        # Prepare default values\n        if argsspec.defaults is None:\n            args_defaults = {}\n        else:\n            args_defaults = dict(\n                zip(\n                    reversed(argsspec.args),\n                    reversed(argsspec.defaults),  # type: ignore\n                ),\n            )\n\n        args_required = sorted(\n            list(set(args_agent) - set(args_defaults.keys())),\n        )\n\n        # Prepare types of the arguments, remove the return type\n        args_types = {\n            k: v for k, v in argsspec.annotations.items() if k != \"return\"\n        }", "start_char_idx": 2987, "end_char_idx": 4463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b489401-eccb-4be9-88fc-bedd122f5894": {"__data__": {"id_": "2b489401-eccb-4be9-88fc-bedd122f5894", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "101ca0f4-0471-43d1-a17d-44571a75347a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a4a2d2904ee36aa8ffbce8ba7a905ab6955c4cc44a53cb0ce1dd21b9e46016a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "184adf63-263f-4843-ac9d-90f6fb755ee1", "node_type": "1", "metadata": {}, "hash": "18b789a2df4b95f47afb904278fea4024012d805e347b4b802b828437174213e", "class_name": "RelatedNodeInfo"}}, "text": "# Prepare argument dictionary\n        properties_field = {}\n        for key in args_agent:\n            arg_property = {}\n            # type\n            if key in args_types:\n                try:\n                    required_type = _get_type_str(args_types[key])\n                    arg_property[\"type\"] = required_type\n                except Exception:\n                    logger.warning(\n                        f\"Fail and skip to get the type of the \"\n                        f\"argument `{key}`.\",\n                    )\n\n                # For Literal type, add enum field\n                if get_origin(args_types[key]) is Literal:\n                    arg_property[\"enum\"] = list(args_types[key].__args__)\n\n            # description\n            if key in args_description:\n                arg_property[\"description\"] = args_description[key]\n\n            # default\n            if key in args_defaults and args_defaults[key] is not None:\n                arg_property[\"default\"] = args_defaults[key]\n\n            properties_field[key] = arg_property\n\n        # Construct the JSON Schema for the service function\n        func_dict = {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": service_func.__name__,\n                \"description\": func_description,\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": properties_field,\n                    \"required\": args_required,\n                },\n            },\n        }", "start_char_idx": 4473, "end_char_idx": 5971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "184adf63-263f-4843-ac9d-90f6fb755ee1": {"__data__": {"id_": "184adf63-263f-4843-ac9d-90f6fb755ee1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5aeef9b3766360a5dd048b65ea27d34b4aadc31bf23edf3bcb178aef9fab37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b489401-eccb-4be9-88fc-bedd122f5894", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5b333d98baa6765908dc0ee8d73edd9e7d494cc5da37e68e20f1f6d209acb94d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dfd20525-4292-40ce-afb2-04550eeec783", "node_type": "1", "metadata": {}, "hash": "b23ebebb93097bcd99394c05c542f61658d01cffbdfa220e748bb1da65804d0e", "class_name": "RelatedNodeInfo"}}, "text": "return tool_func, func_dict", "start_char_idx": 5981, "end_char_idx": 6008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfd20525-4292-40ce-afb2-04550eeec783": {"__data__": {"id_": "dfd20525-4292-40ce-afb2-04550eeec783", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_response.py", "file_name": "service_response.py", "file_type": "text/x-python", "file_size": 911, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c487412-f781-42e6-b077-c2b5f4a77391", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_response.py", "file_name": "service_response.py", "file_type": "text/x-python", "file_size": 911, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5c72122238e6fef902f69bb4ebe814962b6a796c24914ed0a28489c1fd9e05f9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "184adf63-263f-4843-ac9d-90f6fb755ee1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6c733c2dd6a1030a96fea6a13d2fdca2a96400634ecb8563eeda11520a2292cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd972226-0f4f-4409-982a-c795d5a690ea", "node_type": "1", "metadata": {}, "hash": "e0ede555834f06ea7037388ace1acef7623ce31b0016f6c604232d3b29887ea4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Service response module \"\"\"\nfrom typing import Any\n\nfrom agentscope.service.service_status import ServiceExecStatus\n\n\nclass ServiceResponse(dict):\n    \"\"\"Used to wrap the execution results of the services\"\"\"\n\n    __setattr__ = dict.__setitem__\n    __getattr__ = dict.__getitem__\n\n    def __init__(\n        self,\n        status: ServiceExecStatus,\n        content: Any,\n    ):\n        \"\"\"Constructor of ServiceResponse\n\n        Args:\n            status (`ServiceExeStatus`):\n                The execution status of the service.\n            content (`Any`)\n                If the argument`status` is `SUCCESS`, `content` is the\n                response. We use `object` here to support various objects,\n                e.g. str, dict, image, video, etc.\n                Otherwise, `content` is the error message.\n        \"\"\"\n        self.status = status\n        self.content = content", "start_char_idx": 0, "end_char_idx": 910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd972226-0f4f-4409-982a-c795d5a690ea": {"__data__": {"id_": "cd972226-0f4f-4409-982a-c795d5a690ea", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_status.py", "file_name": "service_status.py", "file_type": "text/x-python", "file_size": 204, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5312403f-2fd3-42d6-bc4f-36bc983f71e6", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_status.py", "file_name": "service_status.py", "file_type": "text/x-python", "file_size": 204, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "27b5b9a48d7b4aee12f2453da790170c63508a66c103a939aa19dea24991e91b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dfd20525-4292-40ce-afb2-04550eeec783", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_response.py", "file_name": "service_response.py", "file_type": "text/x-python", "file_size": 911, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "83d1d90d0772cf9ad79f71a806609c2844abda5bbca669c39e2380e026781f36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "946657fe-430c-4461-9cd5-99a54bac0391", "node_type": "1", "metadata": {}, "hash": "88e415bae56fd23394b4652727f933599852669b2e00cf9bee424deae577c8f4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Enum for service execution status.\"\"\"\nfrom enum import IntEnum\n\n\nclass ServiceExecStatus(IntEnum):\n    \"\"\"Enum for service execution status.\"\"\"\n\n    SUCCESS = 1\n    ERROR = -1", "start_char_idx": 0, "end_char_idx": 203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "946657fe-430c-4461-9cd5-99a54bac0391": {"__data__": {"id_": "946657fe-430c-4461-9cd5-99a54bac0391", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df1f81df-f62c-4bf5-a923-862c23f0c846", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d255803c29ee704d0c286acaf916befbf459f4d264c9ce2c72f7aab85cd66441", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd972226-0f4f-4409-982a-c795d5a690ea", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_status.py", "file_name": "service_status.py", "file_type": "text/x-python", "file_size": 204, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8a71d9e0113165cdfe7067e32c7205584d9cfeae3884e272c548c43d3a605dc9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61f31d3f-d29e-48c3-8b76-918fe1b009c3", "node_type": "1", "metadata": {}, "hash": "725c48d0509a79a8a19098d24fa1dbf2bd3c7c227046cad372ed0c5718d64dc2", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"query in MongoDB \"\"\"\nfrom typing import Optional, Any\n\nfrom ..service_response import ServiceResponse\nfrom ...service.service_status import ServiceExecStatus\n\ntry:\n    import pymongo.errors\nexcept ImportError:\n    pymongo = None", "start_char_idx": 0, "end_char_idx": 255, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61f31d3f-d29e-48c3-8b76-918fe1b009c3": {"__data__": {"id_": "61f31d3f-d29e-48c3-8b76-918fe1b009c3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df1f81df-f62c-4bf5-a923-862c23f0c846", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d255803c29ee704d0c286acaf916befbf459f4d264c9ce2c72f7aab85cd66441", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "946657fe-430c-4461-9cd5-99a54bac0391", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "893ba0801d815f5a08772021117e3bb63069d117a194eb13e5ebf574cc90e626", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30d7cb37-deb6-4a2e-91bb-192e3d7399f8", "node_type": "1", "metadata": {}, "hash": "8f8ebdd6c68aed4bcc589897511112b1df8eed85ca147e835d235aaeb01878f5", "class_name": "RelatedNodeInfo"}}, "text": "def query_mongodb(\n    database: str,\n    collection: str,\n    query: dict,\n    host: str,\n    port: int,\n    maxcount_results: Optional[int] = None,\n    **kwargs: Any,\n) -> ServiceResponse:", "start_char_idx": 258, "end_char_idx": 448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30d7cb37-deb6-4a2e-91bb-192e3d7399f8": {"__data__": {"id_": "30d7cb37-deb6-4a2e-91bb-192e3d7399f8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df1f81df-f62c-4bf5-a923-862c23f0c846", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d255803c29ee704d0c286acaf916befbf459f4d264c9ce2c72f7aab85cd66441", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61f31d3f-d29e-48c3-8b76-918fe1b009c3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7c96f34dbfd07d2b97e85970129817e5fd255a15965d8c2d6675002b3c172ce5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb", "node_type": "1", "metadata": {}, "hash": "bd9e4212a97904466203d50f5b5e4be4bae348e653d5bc9252fdcb41e4fa5083", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Execute query within MongoDB database.\n\n    Args:\n        database (`str`):\n            The name of the database to use.\n        collection (`str`):\n            The name of the collection to use in mongodb.\n        query (`dict`):\n            The mongodb query to execute.\n        host (`str`):\n            The hostname or IP address of the MongoDB server.\n        port (`int`):\n            The port number of MongoDB server.\n        maxcount_results (`int`, defaults to `None`):\n            The maximum number of results to return. Defaults to `100` to\n            avoid too many results.\n        **kwargs:\n\n    Returns:\n        `ServiceResponse`: A `ServiceResponse` object that contains execution\n        results or error message.\n\n    Note:\n        MongoDB is a little different from mysql and sqlite, for its\n        operations corresponds to different functions. Now we only support\n        `find` query and leave other operations in the future.\n    \"\"\"", "start_char_idx": 453, "end_char_idx": 1415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb": {"__data__": {"id_": "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df1f81df-f62c-4bf5-a923-862c23f0c846", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d255803c29ee704d0c286acaf916befbf459f4d264c9ce2c72f7aab85cd66441", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30d7cb37-deb6-4a2e-91bb-192e3d7399f8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e33332ac34aa92848ebec9f34d56bbf83ff537597478eb7de2efb3de2da23031", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02a4504c-7be8-472d-83a6-0d1922ade277", "node_type": "1", "metadata": {}, "hash": "0fa5c81278b1c10a76bee6275821805bac87ffe5cce0b6fe421702bf56370c85", "class_name": "RelatedNodeInfo"}}, "text": "try:\n        # Establish connection to MongoDB\n        with pymongo.MongoClient(\n            host=host,\n            port=port,\n            **kwargs,\n        ) as mongo_client:\n            db = mongo_client[database]\n            coll = db[collection]\n\n            # Perform the query\n            if maxcount_results is not None:\n                results = coll.find(query).limit(maxcount_results)\n            else:\n                results = coll.find(query)\n\n            # mongo_client.close()\n\n            # Convert the cursor to a list\n            documents = list(results)\n            return ServiceResponse(\n                status=ServiceExecStatus.SUCCESS,\n                content=documents,\n            )\n\n    except Exception as e:\n        # mongo_client.close()\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            # TODO: more specific error message\n            content=str(e),\n        )", "start_char_idx": 1420, "end_char_idx": 2349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02a4504c-7be8-472d-83a6-0d1922ade277": {"__data__": {"id_": "02a4504c-7be8-472d-83a6-0d1922ade277", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4bab1114d6260ead8e185c99a2286418b49f8ffe21958adea56666ed63ee0ae3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1f7f25354c0451edfd8bb9ea41817074968e02457c34ac2932b9578c53d32b93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47388fb9-c281-49b7-b46a-af89caade6d0", "node_type": "1", "metadata": {}, "hash": "352270bddacddfd01db0d9cfd6cd877d57783d64a7bee79540c97d8fd621fe49", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"query in Mysql \"\"\"\nfrom typing import Optional\nfrom typing import Any\n\nfrom ..service_response import ServiceResponse\nfrom ...utils.common import if_change_database\nfrom ...service.service_status import ServiceExecStatus\n\ntry:\n    import pymysql\nexcept ImportError:\n    pymysql = None", "start_char_idx": 0, "end_char_idx": 311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47388fb9-c281-49b7-b46a-af89caade6d0": {"__data__": {"id_": "47388fb9-c281-49b7-b46a-af89caade6d0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4bab1114d6260ead8e185c99a2286418b49f8ffe21958adea56666ed63ee0ae3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02a4504c-7be8-472d-83a6-0d1922ade277", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a65f18a0aa8a4c6d859fe19143730fff300e1263ae72e25e44fd714d4b67a394", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7", "node_type": "1", "metadata": {}, "hash": "58aad0af2c09ebcb7f2b157f1ebd5f3233e9c94f389c54a74ddb3eeaad03179e", "class_name": "RelatedNodeInfo"}}, "text": "def query_mysql(\n    database: str,\n    query: str,\n    host: str,\n    user: str,\n    password: str,\n    port: int,\n    allow_change_data: bool = False,\n    maxcount_results: Optional[int] = None,\n    **kwargs: Any,\n) -> ServiceResponse:", "start_char_idx": 314, "end_char_idx": 551, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7": {"__data__": {"id_": "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4bab1114d6260ead8e185c99a2286418b49f8ffe21958adea56666ed63ee0ae3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47388fb9-c281-49b7-b46a-af89caade6d0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "95a7b3b4cc9580ab42deed0c21152316a683db4e0a6e552277d80d2c578b90a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03493dee-aba1-4ef4-b970-ec22825ae030", "node_type": "1", "metadata": {}, "hash": "e072b9f47fa1a96c0eb346b1d31875f2c35595cf29096bc078598db01de4a02c", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    Execute query within MySQL database.\n\n    Args:\n        database (`str`):\n            The name of the database to use.\n        query (`str`):\n            SQL query to execute.\n        host (`str`):\n            The host name or IP address of the MySQL server, e.g. \"localhost\".\n        user (`str`):\n            The username of the MySQL account to use.\n        password (`str`):\n            The password of the MySQL account to use.\n        port (`str`):\n            The port number of the MySQL server, e.g. 3306.\n        allow_change_data (`bool`, defaults to `False`):\n            Whether to allow changing data in the database. Defaults to\n            `False` to avoid accidental changes to the database.\n        maxcount_results (`int`, defaults to `None`):\n            The maximum number of results to return. Defaults to `100` to\n            avoid too many results.\n\n    Returns:\n        `ServiceResponse`: A `ServiceResponse` object that contains\n        execution results or error message.\n    \"\"\"\n\n    # Check if the query is safe\n    if not allow_change_data and not if_change_database(query):\n        raise ValueError(\n            \"Unsafe SQL query detected. Only SELECT statements are allowed. \"\n            \"If you want to allow changing data in the database, \"\n            \"set `allow_change_data` to `True`.\",\n        )\n\n    # Limit the number of results by adding LIMIT keywords if necessary", "start_char_idx": 556, "end_char_idx": 1972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03493dee-aba1-4ef4-b970-ec22825ae030": {"__data__": {"id_": "03493dee-aba1-4ef4-b970-ec22825ae030", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4bab1114d6260ead8e185c99a2286418b49f8ffe21958adea56666ed63ee0ae3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "701c7e3156be49c1f2422d5a3d37e3a668c3c387394769e37534921261b14bf4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a421482-255a-4e97-8a5e-3ef5d5de6c02", "node_type": "1", "metadata": {}, "hash": "5660f7a7cdf051cad79897a9ae1bb82f5da594d2fe3906a1497f8c6c97759f0e", "class_name": "RelatedNodeInfo"}}, "text": "if maxcount_results is not None:\n        if \"limit\" not in query.lower():\n            query += f\" LIMIT {maxcount_results}\"\n\n    # Execute the query\n    try:\n        # Establish a connection to the database\n        conn = pymysql.connect(\n            host=host,\n            port=port,\n            user=user,\n            password=password,\n            database=database,\n            **kwargs,\n        )\n\n        cursor = conn.cursor()\n        cursor.execute(query)\n\n        if if_change_database(query):\n            conn.commit()\n\n        cursor.close()\n        conn.close()\n\n        # Fetch the results\n        results = cursor.fetchall()\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=results,\n        )\n    except Exception as e:\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            # TODO: more specific error message\n            content=str(e),\n        )", "start_char_idx": 1977, "end_char_idx": 2921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a421482-255a-4e97-8a5e-3ef5d5de6c02": {"__data__": {"id_": "3a421482-255a-4e97-8a5e-3ef5d5de6c02", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f995deb2-791f-44a3-a234-a992ac1da842", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad76e3d383f46915fa6ec9e76b4ebfc7925cd5e3ab7b1a59f2ccfc2262120d88", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03493dee-aba1-4ef4-b970-ec22825ae030", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d4864f34f47ce0e25d9af288f2b9994a181fe194c259e076ebc99f6778f56ef7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19238073-44df-49e6-b692-c69594a9212c", "node_type": "1", "metadata": {}, "hash": "af46537eae205b243ba79d3cea9fa91b5fe37de0243e4bdc184baaa1602023cd", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Query in sqlite \"\"\"\nfrom typing import Optional\nfrom typing import Any\n\nfrom ...service.service_response import ServiceResponse\nfrom ...utils.common import if_change_database\nfrom ...service.service_status import ServiceExecStatus\n\ntry:\n    import sqlite3\nexcept ImportError:\n    sqlite3 = None", "start_char_idx": 0, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19238073-44df-49e6-b692-c69594a9212c": {"__data__": {"id_": "19238073-44df-49e6-b692-c69594a9212c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f995deb2-791f-44a3-a234-a992ac1da842", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad76e3d383f46915fa6ec9e76b4ebfc7925cd5e3ab7b1a59f2ccfc2262120d88", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a421482-255a-4e97-8a5e-3ef5d5de6c02", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "eb34af7dee14f2ee081c1f5eed38d859cd6795ff8ee1283cf26396d842790448", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c45584a2-e8de-4f8e-a542-bcc65537616b", "node_type": "1", "metadata": {}, "hash": "30d21ddde1d343ff6b1751efb401c8b9e8968114fbbd78f1eb6824b066933456", "class_name": "RelatedNodeInfo"}}, "text": "def query_sqlite(\n    database: str,\n    query: str,\n    allow_change_data: bool = False,\n    maxcount_results: Optional[int] = None,\n    **kwargs: Any,\n) -> ServiceResponse:", "start_char_idx": 325, "end_char_idx": 499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c45584a2-e8de-4f8e-a542-bcc65537616b": {"__data__": {"id_": "c45584a2-e8de-4f8e-a542-bcc65537616b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f995deb2-791f-44a3-a234-a992ac1da842", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad76e3d383f46915fa6ec9e76b4ebfc7925cd5e3ab7b1a59f2ccfc2262120d88", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19238073-44df-49e6-b692-c69594a9212c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2ceea510122f8bdde28c680a4ef101d93eaccac585073e68899dc43630127e03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c87dd12c-e1f2-4995-be84-36c17a88668f", "node_type": "1", "metadata": {}, "hash": "cc3a3acb408707247cb721596cfe9354b1b0e6c61db99dc1bc81f3fa26c58c29", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Executes query within sqlite database.\n\n    Args:\n        database (`str`):\n            The name of the database to use.\n        query (`str`):\n            The query to execute.\n        allow_change_data (`bool`, defaults to `False`):\n            Whether to allow changing data in the database. Defaults to\n            `False` to avoid accidental changes to the database.\n        maxcount_results (`int`, defaults to `None`):\n            The maximum number of results to return.\n\n    Returns:\n        `ServiceResponse`: A `ServiceResponse` object that contains\n        execution results or error message.\n    \"\"\"\n\n    # Check if the query is safe\n    if not allow_change_data and not if_change_database(query):\n        raise ValueError(\n            \"Unsafe SQL query detected. Only SELECT statements are allowed. \"\n            \"If you want to allow changing data in the database, \"\n            \"set `allow_change_data` to `True`.\",\n        )\n\n    # Limit the number of results by adding LIMIT keywords if necessary\n    if maxcount_results is not None:\n        if \"limit\" not in query.lower():\n            query += f\" LIMIT {maxcount_results}\"", "start_char_idx": 504, "end_char_idx": 1649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c87dd12c-e1f2-4995-be84-36c17a88668f": {"__data__": {"id_": "c87dd12c-e1f2-4995-be84-36c17a88668f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f995deb2-791f-44a3-a234-a992ac1da842", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ad76e3d383f46915fa6ec9e76b4ebfc7925cd5e3ab7b1a59f2ccfc2262120d88", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c45584a2-e8de-4f8e-a542-bcc65537616b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "20da4bbca917f4a431c4e9cbb98eef1cc89643e9aebfecdf05e61cc300622907", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55510a23-6a03-4929-aa3e-55f65ee83217", "node_type": "1", "metadata": {}, "hash": "fe906ba481551a80e23c89054175dd746b79c61219f3b74b15ded07418f0f206", "class_name": "RelatedNodeInfo"}}, "text": "try:\n        conn = sqlite3.connect(database, **kwargs)\n        cursor = conn.cursor()\n        cursor.execute(query)\n        results = cursor.fetchall()\n\n        # commit the change if needed\n        if if_change_database(query):\n            conn.commit()\n\n        cursor.close()\n        conn.close()\n\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=results,\n        )\n    except Exception as e:\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            # TDOO: more specific error message\n            content=str(e),\n        )", "start_char_idx": 1655, "end_char_idx": 2262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55510a23-6a03-4929-aa3e-55f65ee83217": {"__data__": {"id_": "55510a23-6a03-4929-aa3e-55f65ee83217", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c87dd12c-e1f2-4995-be84-36c17a88668f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2ae3f21dfb59b469494fadc07773baa48021fd66308deec66660962a53a6a070", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75f434e3-98a4-47c9-96cb-dc863504d1c1", "node_type": "1", "metadata": {}, "hash": "dffda5a221b40af99b6c0cff4f0ff0ab488e6fe9a305ffcb8361ee20447e3384", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"\nService for text processing\n\"\"\"\nfrom loguru import logger\n\nfrom agentscope.models import ModelWrapperBase\nfrom agentscope.service.service_status import ServiceExecStatus\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.message import Msg\nfrom agentscope.constants import _DEFAULT_SYSTEM_PROMPT\nfrom agentscope.constants import _DEFAULT_TOKEN_LIMIT_PROMPT", "start_char_idx": 0, "end_char_idx": 413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75f434e3-98a4-47c9-96cb-dc863504d1c1": {"__data__": {"id_": "75f434e3-98a4-47c9-96cb-dc863504d1c1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55510a23-6a03-4929-aa3e-55f65ee83217", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "780538276e101dea0055d36ba756cce512c7aace152b2dc598a1e39d86a18aac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6fd2450-c106-4773-8842-a3a34b4a17f3", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def summarization(\n    model: ModelWrapperBase,\n    text: str,\n    system_prompt: str = _DEFAULT_SYSTEM_PROMPT,\n    max_return_token: int = -1,\n    token_limit_prompt: str = _DEFAULT_TOKEN_LIMIT_PROMPT,\n) -> ServiceResponse:", "start_char_idx": 416, "end_char_idx": 640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6fd2450-c106-4773-8842-a3a34b4a17f3": {"__data__": {"id_": "e6fd2450-c106-4773-8842-a3a34b4a17f3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75f434e3-98a4-47c9-96cb-dc863504d1c1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "34fa2697f47aaa1e12caf7832a88f4cc726e1ac65f34063e4ccdfe7bde99b49c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c", "node_type": "1", "metadata": {}, "hash": "84752a4d9d1b34eb4d88f3b985903ef3c12d0e6193e17416ebbe90d05b112f05", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c": {"__data__": {"id_": "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6fd2450-c106-4773-8842-a3a34b4a17f3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29ecf86de56917cae57ae73a30568be99ab3025aff532f66435d02c4b3f9cc52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab5fc295-629b-4c06-96cd-cf6349080f2d", "node_type": "1", "metadata": {}, "hash": "058c0fb2cab390a0f5fb7f441f7a5a76cb75d597cf063f74d12f2f82b96b611e", "class_name": "RelatedNodeInfo"}}, "text": "Summarize the input text.\n\n    Summarization function (Notice: current version of token limitation is\n    built with Open AI API)\n\n    Args:\n        model (`ModelWrapperBase`):\n            Model used to summarize provided text.\n        text (`str`):\n            Text to be summarized by the model.\n        system_prompt (`str`, defaults to `_DEFAULT_SYSTEM_PROMPT`):\n            Prompts as instruction for the system, will be as an instruction\n            for the model.\n        max_return_token (`int`, defaults to `-1`):\n            Whether provide additional prompting instruction to limit the\n            number of tokens in summarization returned by the model.\n        token_limit_prompt (`str`, defaults to `_DEFAULT_TOKEN_LIMIT_PROMPT`):\n            Prompt to instruct the model follow token limitation.\n\n    Returns:\n        `ServiceResponse`: If the model successfully summarized the text, and\n        the summarization satisfies the provided token limitation, return\n        `ServiceResponse` with `ServiceExecStatus.SUCCESS`; otherwise return\n        `ServiceResponse` with `ServiceExecStatus.ERROR` (if the summary is\n        return successfully but exceed the token limits, the content\n        contains the summary as well).\n\n    Example:\n\n    The default message with `text` to be summarized:\n\n    .. code-block:: python\n\n        [\n            {\n                \"role\": \"system\",\n                \"name\": \"system\",\n                \"content\": \"You are a helpful agent to summarize the text.\\\\", "start_char_idx": 648, "end_char_idx": 2152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab5fc295-629b-4c06-96cd-cf6349080f2d": {"__data__": {"id_": "ab5fc295-629b-4c06-96cd-cf6349080f2d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2b9fb7ee2e8f94b6bda58ca5c2fee5e9c9abc05300f791cd4e33996cb266fbce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3982b0dc-82c9-4ace-9246-eb367317b98a", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "You need to keep all the key information of the text in the\\\\", "start_char_idx": 2169, "end_char_idx": 2230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3982b0dc-82c9-4ace-9246-eb367317b98a": {"__data__": {"id_": "3982b0dc-82c9-4ace-9246-eb367317b98a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab5fc295-629b-4c06-96cd-cf6349080f2d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "e7fdf1e4153b5deca23e8fb8c9479ec8c318989f3064e92bc414c5a5bf463726", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218", "node_type": "1", "metadata": {}, "hash": "b017c0e667399bbb06f83977eefe20f7934c94eb0fdbe1e3fdf7a1d7b8a3096a", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218": {"__data__": {"id_": "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "54a52c343a9b2ebf3e188661c8965ee699457629b179acbbb3531f87ca89d93f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3982b0dc-82c9-4ace-9246-eb367317b98a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29ecf86de56917cae57ae73a30568be99ab3025aff532f66435d02c4b3f9cc52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bbfca7fe-4e42-4eac-a3d3-c952485f6b4c", "node_type": "1", "metadata": {}, "hash": "b217a73f0af442195d01619b789d4b18adc7d255b8ba256e29d34ac9990cc061", "class_name": "RelatedNodeInfo"}}, "text": "if max_return_token > 0:\n        system_prompt += token_limit_prompt.format(max_return_token)\n    try:\n        msgs = [\n            Msg(name=\"system\", role=\"system\", content=system_prompt),\n            Msg(name=\"user\", role=\"user\", content=text),\n        ]\n        msgs = model.format(msgs)\n        model_output = model(messages=msgs)\n        summary = model_output.text\n        return ServiceResponse(\n            ServiceExecStatus.SUCCESS,\n            content=summary,\n        )\n    except ValueError as e:\n        logger.exception(e)\n        return ServiceResponse(\n            ServiceExecStatus.ERROR,\n            content=f\"Summarization by model {model.model} fail\",\n        )", "start_char_idx": 2495, "end_char_idx": 3176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bbfca7fe-4e42-4eac-a3d3-c952485f6b4c": {"__data__": {"id_": "bbfca7fe-4e42-4eac-a3d3-c952485f6b4c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "d70eefd341f9f3bf1d026aa547db1d901a3d6be67e639dd982eeadc621bb97e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "150c787b-fade-4703-b677-285b522f0f05", "node_type": "1", "metadata": {}, "hash": "0ab6d4f50d318f75e1eb18a577718c85a0ccf105f213d3ba43a933117cffe3d4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Search papers in arXiv API. This implementation refers to the repository\nhttps://github.com/lukasschwab/arxiv.py, which is MIT licensed.\n\"\"\"\nimport json\nimport re\nimport time\nimport urllib\nfrom calendar import timegm\nfrom datetime import datetime, timezone\nfrom typing import List, Optional, Union\n\ntry:\n    import feedparser\nexcept ImportError:\n    feedparser = None\nfrom loguru import logger\n\nfrom agentscope.service.service_response import (\n    ServiceResponse,\n    ServiceExecStatus,\n)\n\nARXIV_SEARCH_URL = \"http://export.arxiv.org/api/query?{parameters_str}\"\n\nLOGIC_OPERATORS = [\"ANDNOT\", \"AND\", \"OR\"]\n\nSYMBOLS = [\"(\", \")\"]\n\nQUERY_PREFIX = [\"all:\", \"ti:\", \"au:\", \"abs:\", \"co:\", \"jr:\", \"cat:\", \"rn:\"]", "start_char_idx": 0, "end_char_idx": 731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "150c787b-fade-4703-b677-285b522f0f05": {"__data__": {"id_": "150c787b-fade-4703-b677-285b522f0f05", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bbfca7fe-4e42-4eac-a3d3-c952485f6b4c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f895e5bce2d5869313c1e7bfe7bf36258f748984d8ecfac96cfd76cd50808f34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa733f5c-72b4-4799-b92b-d5194598cb14", "node_type": "1", "metadata": {}, "hash": "39c440bf53ad345ab313cfb56c41eba118928801a5d8c7cac553b01eb8eba3ce", "class_name": "RelatedNodeInfo"}}, "text": "class _Result(dict):", "start_char_idx": 734, "end_char_idx": 754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa733f5c-72b4-4799-b92b-d5194598cb14": {"__data__": {"id_": "aa733f5c-72b4-4799-b92b-d5194598cb14", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "150c787b-fade-4703-b677-285b522f0f05", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f05674a17895088e44db84626c4b343d5f40910529002ea31200556eff3789ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1371532-53d8-43e5-a400-1a2941904092", "node_type": "1", "metadata": {}, "hash": "544c6f20620603c1308ec3cb5fe73f550bec8fa4c21f09b6ff23d71920d7fbf0", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"The class for arXiv search results.\"\"\"\n\n    __getattr__ = dict.__getitem__\n    __setattr__ = dict.__setitem__\n\n    id: str\n    \"\"\"A url of the form `https://arxiv.org/abs/{id}`.\"\"\"\n\n    title: str\n    \"\"\"The title of the result.\"\"\"\n\n    updated: str\n    \"\"\"When the result was last updated.\"\"\"\n\n    published: str\n    \"\"\"When the result was published.\"\"\"\n\n    summary: str\n    \"\"\"The summary of the search result.\"\"\"\n\n    authors: List[str]\n    \"\"\"The authors of the search result.\"\"\"\n\n    comment: Optional[str]\n    \"\"\"The authors' comment if present.\"\"\"\n\n    primary_category: Optional[str]\n    \"\"\"The result's primary arXiv category. See [arXiv: Category\n    Taxonomy](https://arxiv.org/category_taxonomy).\"\"\"\n\n    tags: List[str]\n    \"\"\"All of the result's tags. See [arXiv: Category\n    Taxonomy](https://arxiv.org/category_taxonomy).\"\"\"\n\n    journal_ref: Optional[str]\n    \"\"\"A journal reference if present.\"\"\"\n\n    doi: Optional[str]\n    \"\"\"A URL for the resolved DOI to an external resource if present.\"\"\"", "start_char_idx": 759, "end_char_idx": 1775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1371532-53d8-43e5-a400-1a2941904092": {"__data__": {"id_": "d1371532-53d8-43e5-a400-1a2941904092", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa733f5c-72b4-4799-b92b-d5194598cb14", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4afdc98be002c9022c04d465c4498607522505e1a2fbdde93eb55ea7d78e8f4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6076c666-142c-4b90-9b18-186e312ff1f9", "node_type": "1", "metadata": {}, "hash": "3bbedb64384dec9da080b9ee2238c7a163d1f673c38168be335aa3cf5a01e4cd", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(\n        self,\n        entry_id: str,\n        title: str,\n        updated: str,\n        published: str,\n        summary: str,\n        authors: List[str],\n        pdf_url: Optional[str] = None,\n        comment: Optional[str] = None,\n        primary_category: Optional[str] = None,\n        tags: List[str] = None,\n        journal_ref: Optional[str] = None,\n        doi: Optional[str] = None,\n    ) -> None:\n        \"\"\"The class for arXiv search results.\"\"\"\n        self.entry_id = entry_id\n        self.title = title\n        self.updated = updated\n        self.published = published\n        self.summary = summary\n        self.authors = authors\n        self.pdf_url = pdf_url\n        self.comment = comment\n        self.primary_category = primary_category\n        self.tags = tags\n        self.journal_ref = journal_ref\n        self.doi = doi\n\n    def __str__(self) -> str:\n        cleaned_dict = {}\n        for key in self:\n            if self[key] is not None:\n                cleaned_dict[key] = self[key]\n        return json.dumps(cleaned_dict, ensure_ascii=False)\n\n    def __repr__(self) -> str:\n        return self.__str__()", "start_char_idx": 1781, "end_char_idx": 2922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6076c666-142c-4b90-9b18-186e312ff1f9": {"__data__": {"id_": "6076c666-142c-4b90-9b18-186e312ff1f9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1371532-53d8-43e5-a400-1a2941904092", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a2162f35e37f89eab95a899458d92c80ea2ce8fb7b7366737e4d7e222549de19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd", "node_type": "1", "metadata": {}, "hash": "01805e7e97f2e2e5cb98eb1c1e0eb1fed22ca55a2f0c5ad4a227484a8b53852a", "class_name": "RelatedNodeInfo"}}, "text": "def _parse_pdf_url(links: List) -> Union[str, None]:\n    \"\"\"Parse the pdf url from the links.\"\"\"\n    for link in links:\n        if link.get(\"title\") == \"pdf\":\n            return link.get(\"href\")\n    return None\n\n\ndef _parse_timestamp(timestamp: time.struct_time) -> str:\n    \"\"\"Parse the timestamp to a string.\"\"\"\n    timestamp = datetime.fromtimestamp(timegm(timestamp), tz=timezone.utc)\n    return timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")", "start_char_idx": 2925, "end_char_idx": 3364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd": {"__data__": {"id_": "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6076c666-142c-4b90-9b18-186e312ff1f9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f2072b9316b5432eb29965d30249724d02d06ea8029deaef5ba114d20f28f03e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82a2bb6d-cd91-4ab3-850f-84e31a644163", "node_type": "1", "metadata": {}, "hash": "f84627760f0bdd37dd319d346e73041fd0191c33b270d635561b4b13fac94f1e", "class_name": "RelatedNodeInfo"}}, "text": "def _clean_arxiv_search_results(result: dict) -> dict:", "start_char_idx": 3367, "end_char_idx": 3421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82a2bb6d-cd91-4ab3-850f-84e31a644163": {"__data__": {"id_": "82a2bb6d-cd91-4ab3-850f-84e31a644163", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6051b583b30912ba9129ba950c6e0d716d444b6ed47c3dc5309de76cc3ea264f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a693fc0-804b-42eb-ad3c-ee6d48b609cc", "node_type": "1", "metadata": {}, "hash": "e9074a96d01c67bae98a3b8542ed60f31d2783d272e6873ff61b3c2170dc968b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Clean the arXiv search results, and remove unnecessary information.\"\"\"\n    feed = result.feed\n\n    # Basic information\n    cleaned_dict = {\n        \"updated\": _parse_timestamp(feed.updated_parsed),\n        \"opensearch_total_results\": int(feed.opensearch_totalresults),\n        \"opensearch_start_index\": int(feed.opensearch_startindex),\n        \"opensearch_itemsperpage\": int(feed.opensearch_itemsperpage),\n    }\n\n    # Entries\n    entries = []", "start_char_idx": 3426, "end_char_idx": 3872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a693fc0-804b-42eb-ad3c-ee6d48b609cc": {"__data__": {"id_": "1a693fc0-804b-42eb-ad3c-ee6d48b609cc", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82a2bb6d-cd91-4ab3-850f-84e31a644163", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8a3596c7bd473a658d227fa399c382bdaa5cd2ad88f9ee1e376d3b0d76e262b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1377eb3a-e568-4f10-ba07-d163c4a5707f", "node_type": "1", "metadata": {}, "hash": "56fce9de76bf27687c62595a45b8bb820cdbd0c56c7f098fbdab6b53ebf99c0d", "class_name": "RelatedNodeInfo"}}, "text": "for entry in result.entries:\n        title = \"0\"\n        if hasattr(entry, \"title\"):\n            title = entry.title\n        else:\n            logger.warning(\n                \"Result %s is missing title attribute; defaulting to '0'\",\n                entry.id,\n            )\n\n        tags = [tag.get(\"term\") for tag in entry.tags]\n        if len(tags) == 0:\n            tags = None\n\n        entry_dict = _Result(\n            # Basic properties\n            entry_id=entry.id,\n            title=title,\n            updated=_parse_timestamp(entry.updated_parsed),\n            published=_parse_timestamp(entry.published_parsed),\n            summary=entry.summary,\n            authors=[author.name for author in entry.authors],\n            # Optional properties\n            pdf_url=_parse_pdf_url(entry.links),\n            comment=entry.get(\"arxiv_comment\"),\n            primary_category=entry.arxiv_primary_category.get(\"term\"),\n            tags=tags,\n            journal_ref=entry.get(\"arxiv_journal_ref\"),\n            doi=entry.get(\"arxiv_doi\"),\n        )\n\n        entries.append(entry_dict)\n\n    cleaned_dict[\"entries\"] = entries\n\n    return cleaned_dict", "start_char_idx": 3877, "end_char_idx": 5028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1377eb3a-e568-4f10-ba07-d163c4a5707f": {"__data__": {"id_": "1377eb3a-e568-4f10-ba07-d163c4a5707f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a693fc0-804b-42eb-ad3c-ee6d48b609cc", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "198e1346661ae5cd4ddf8146ac50fe5d38779cfcad70c3abe1e2712a4d0f36a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26738c19-dae6-4c6f-96aa-284b1ae5c393", "node_type": "1", "metadata": {}, "hash": "9ad486139ea4b3bc3c59e7abf9b8af5e8ff7553015c99b27e5e6824d96d07d4c", "class_name": "RelatedNodeInfo"}}, "text": "def _reformat_query(query: str) -> str:\n    \"\"\"Reformat the query string for arxiv search, refer to\n    https://info.arxiv.org/help/api/user-manual.html.\"\"\"\n    delimiter_regex = (\n        \"(\"\n        + \"|\".join(\n            map(re.escape, LOGIC_OPERATORS + QUERY_PREFIX + SYMBOLS),\n        )\n        + \")\"\n    )\n\n    parts = re.split(delimiter_regex, query)\n\n    parts = [part.strip() for part in parts if part.strip()]\n\n    for i, part in enumerate(parts):\n        if part not in LOGIC_OPERATORS + QUERY_PREFIX + SYMBOLS:\n            # Add double quotes if it does not contain double quotes\n            part = part.replace('\"', \"%22\").replace(\" \", \"+\")\n\n            if not part.startswith(\"%22\"):\n                part = f\"%22{part}\"\n            if not part.endswith(\"%22\"):\n                part = f\"{part}%22\"\n            parts[i] = part\n        elif part in SYMBOLS:\n            parts[i] = part.replace(\"(\", \"%28\").replace(\")\", \"%29\")\n        elif part in LOGIC_OPERATORS:\n            parts[i] = f\"+{part}+\"\n\n    refined_query = \"\".join(parts)\n\n    return refined_query", "start_char_idx": 5031, "end_char_idx": 6103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26738c19-dae6-4c6f-96aa-284b1ae5c393": {"__data__": {"id_": "26738c19-dae6-4c6f-96aa-284b1ae5c393", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1377eb3a-e568-4f10-ba07-d163c4a5707f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cca774c059178cb1f1d86e870ca344b96758ea166128e510272aa4ed3124e84d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61be3a97-7653-41f8-847b-cc687ffe7483", "node_type": "1", "metadata": {}, "hash": "186767e9daf8e57b29a82fb4a37f8ebaa89f5f89edb6733a3e5577e0d940895e", "class_name": "RelatedNodeInfo"}}, "text": "def arxiv_search(\n    search_query: str,\n    id_list: List[str] = None,\n    start: int = 0,\n    max_results: Optional[int] = None,\n) -> ServiceResponse:", "start_char_idx": 6106, "end_char_idx": 6258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61be3a97-7653-41f8-847b-cc687ffe7483": {"__data__": {"id_": "61be3a97-7653-41f8-847b-cc687ffe7483", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26738c19-dae6-4c6f-96aa-284b1ae5c393", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "85de7ca16385a80641fcd25d208d22969a0b33850508f3d99b794e8950b295ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9679052-14ef-4c64-b556-f160a9ca90ed", "node_type": "1", "metadata": {}, "hash": "ebb7f3ec006ff272bb3bfb741d4b90835b0c76a81ad42b02d297f7de01c57d2e", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Search arXiv paper by a given query string.\n\n    Args:\n        search_query (`str`):\n            The query string, supporting prefixes \"all:\", \"ti:\", \"au:\",\n            \"abs:\", \"co:\", \"jr:\", \"cat:\", and \"rn:\", boolean operators \"AND\",\n            \"OR\" and \"ANDNOT\". For example, searching for papers with\n            title \"Deep Learning\" and author \"LeCun\" by a\n            search_query ti:\"Deep Learning\" AND au:\"LeCun\"\n        id_list (`List[str]`, defaults to `None`):\n            A list of arXiv IDs to search.\n        start (`int`, defaults to `0`):\n            The index of the first search result to return.\n        max_results (`Optional[int]`, defaults to `None`):\n            The maximum number of search results to return.\n\n    Returns:\n        `ServiceResponse`: A dictionary with two variables: `status` and\n        `content`. The `status` variable is from the ServiceExecStatus enum,\n        and `content` is a list of search results or error information,\n        which depends on the `status` variable.\n    \"\"\"\n\n    if feedparser is None:\n        raise ImportError(\n            \"The `feedparser` module is not installed. Please install it by \"\n            \"running `pip install feedparser`.\",\n        )\n\n    # construct url\n    search_query = _reformat_query(search_query)\n\n    parameters = {\"search_query\": search_query}\n\n    if id_list:\n        parameters[\"id_list\"] = \",\".join(id_list)\n\n    if start > 0:\n        parameters[\"start\"] = str(start)", "start_char_idx": 6263, "end_char_idx": 7730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9679052-14ef-4c64-b556-f160a9ca90ed": {"__data__": {"id_": "e9679052-14ef-4c64-b556-f160a9ca90ed", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42955cec-d2e0-4d69-8b9d-80a38e335578", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c9c25be5bae8b91ddd22c7b58acddf7c459c7d8128926c355f0439eb46906622", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61be3a97-7653-41f8-847b-cc687ffe7483", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6302ada41613ab36d9c355989fb823c2d7ae812bdcf000b038391bdb4430e232", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d39ed756-b9c8-4fdc-9dea-5bfc84d33102", "node_type": "1", "metadata": {}, "hash": "139144c2d3c5df0ffb6df965e3f4f11e43bcc126080007427b71e19e97004240", "class_name": "RelatedNodeInfo"}}, "text": "if max_results:\n        parameters[\"max_results\"] = str(max_results)\n\n    parameters_str = \"&\".join([f\"{k}={v}\" for k, v in parameters.items()])\n\n    url = ARXIV_SEARCH_URL.format(parameters_str=parameters_str)\n\n    try:\n        logger.debug(f\"Searching arXiv by url: {url}\")\n\n        with urllib.request.urlopen(url) as data:\n            # Parse the results by feedparser\n            feedparser_dict = feedparser.parse(data.read().decode(\"utf-8\"))\n\n        # Remove unnecessary information\n        results = _clean_arxiv_search_results(feedparser_dict)\n\n        if data.code == 200:\n            # Return the searching results\n            return ServiceResponse(\n                status=ServiceExecStatus.SUCCESS,\n                content=results,\n            )\n        else:\n            return ServiceResponse(\n                status=ServiceExecStatus.ERROR,\n                content=f\"Error: {data.code}, {data}\",\n            )\n    except Exception as e:\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=f\"Error: {e}\",\n        )", "start_char_idx": 7736, "end_char_idx": 8810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d39ed756-b9c8-4fdc-9dea-5bfc84d33102": {"__data__": {"id_": "d39ed756-b9c8-4fdc-9dea-5bfc84d33102", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9679052-14ef-4c64-b556-f160a9ca90ed", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4c1286a3caf14f868fa97252d58d010b5554e46b5dc7703d66428a77beb46f66", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b3eb30c-5af4-4311-8e34-e725504468b9", "node_type": "1", "metadata": {}, "hash": "37ebf92582c069086f6b3f96eea960cf39a5b7980de3686d49d36d34bc113db4", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Search question in the web\"\"\"\nfrom typing import Any\n\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.utils.common import requests_get\nfrom agentscope.service.service_status import ServiceExecStatus", "start_char_idx": 0, "end_char_idx": 257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b3eb30c-5af4-4311-8e34-e725504468b9": {"__data__": {"id_": "9b3eb30c-5af4-4311-8e34-e725504468b9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d39ed756-b9c8-4fdc-9dea-5bfc84d33102", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2ac4534855eefd7cf53b49709dabd1006098d24300c3efbbd5feff083b005e43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd5dd31a-159f-416d-827b-d96d6a6298a9", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def bing_search(\n    question: str,\n    api_key: str,\n    num_results: int = 10,\n    **kwargs: Any,\n) -> ServiceResponse:", "start_char_idx": 260, "end_char_idx": 381, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd5dd31a-159f-416d-827b-d96d6a6298a9": {"__data__": {"id_": "dd5dd31a-159f-416d-827b-d96d6a6298a9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b3eb30c-5af4-4311-8e34-e725504468b9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1ba43621bc1713234c97ba20036d015d23b5e9483b52d684cd832ca3e46c1071", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efc4d36b-d53d-47aa-810f-e5a14df81b48", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efc4d36b-d53d-47aa-810f-e5a14df81b48": {"__data__": {"id_": "efc4d36b-d53d-47aa-810f-e5a14df81b48", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd5dd31a-159f-416d-827b-d96d6a6298a9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b4d8753-9cf3-4448-b3d6-61145aa51fa4", "node_type": "1", "metadata": {}, "hash": "6184102c6a58bbde90c7537ab95ec03786ef5dd1e27c844d695e36b2956a2d84", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b4d8753-9cf3-4448-b3d6-61145aa51fa4": {"__data__": {"id_": "8b4d8753-9cf3-4448-b3d6-61145aa51fa4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efc4d36b-d53d-47aa-810f-e5a14df81b48", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7b8886e-1788-4201-afb6-c9563d54b527", "node_type": "1", "metadata": {}, "hash": "0bb6bd2a5c05727a191da5c60d7a8c3f066c605817df4f40e0fd40f13fc417ed", "class_name": "RelatedNodeInfo"}}, "text": "# Bing Search API endpoint\n    bing_search_url = \"https://api.bing.microsoft.com/v7.0/search\"\n\n    params = {\"q\": question, \"count\": num_results}\n    if kwargs:\n        params.update(**kwargs)\n\n    headers = {\"Ocp-Apim-Subscription-Key\": api_key}\n\n    search_results = requests_get(\n        bing_search_url,\n        params,\n        headers,\n    )\n\n    if isinstance(search_results, str):\n        return ServiceResponse(ServiceExecStatus.ERROR, search_results)\n\n    # Retrieve the top search result links\n    results = search_results.get(\"webPages\", {}).get(\"value\", [])\n\n    # Return all snippet\n    return ServiceResponse(\n        ServiceExecStatus.SUCCESS,\n        [\n            # We changed the keywords to be consistent with the\n            # Google search results format.\n            {\n                \"title\": result[\"name\"],\n                \"link\": result[\"url\"],\n                \"snippet\": result[\"snippet\"],\n            }\n            for result in results\n        ],\n    )", "start_char_idx": 3179, "end_char_idx": 4160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7b8886e-1788-4201-afb6-c9563d54b527": {"__data__": {"id_": "e7b8886e-1788-4201-afb6-c9563d54b527", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b4d8753-9cf3-4448-b3d6-61145aa51fa4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8028190228ddb0205fd39e0bc61af9adde601b22c574b4d7d469c8a7cdc0c2a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55fbeec0-7f39-482e-99e7-f6cbc6e9c156", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "def google_search(\n    question: str,\n    api_key: str,\n    cse_id: str,\n    num_results: int = 10,\n    **kwargs: Any,\n) -> ServiceResponse:", "start_char_idx": 4163, "end_char_idx": 4303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55fbeec0-7f39-482e-99e7-f6cbc6e9c156": {"__data__": {"id_": "55fbeec0-7f39-482e-99e7-f6cbc6e9c156", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7b8886e-1788-4201-afb6-c9563d54b527", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "43d0a56a62d093051ab8db01a5ab4d5a55d80edd45ed251601621696e8469c09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23e0b4bb-269f-4e67-a125-0431bf576143", "node_type": "1", "metadata": {}, "hash": "801bf27c5ccedae98eda23e5313a7a613ab00cbeb758269c02fe21ab97ea763b", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23e0b4bb-269f-4e67-a125-0431bf576143": {"__data__": {"id_": "23e0b4bb-269f-4e67-a125-0431bf576143", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55fbeec0-7f39-482e-99e7-f6cbc6e9c156", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384", "node_type": "1", "metadata": {}, "hash": "b7d6369ffc161c86a8bd4c6dcc9a7d7b9b8e658a0694f9f4e4978761be7ff744", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"", "start_char_idx": 24, "end_char_idx": 27, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384": {"__data__": {"id_": "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29748c35457c095ab1d32bde732f91f64d12f49fc8bd91d213844352d4fd01b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23e0b4bb-269f-4e67-a125-0431bf576143", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2ae1a50-263a-44b4-b664-c8beb8a9421a", "node_type": "1", "metadata": {}, "hash": "c58ff299280723e370cfe137de618ca7a468d78fb1e482bdba69b60426bea5ba", "class_name": "RelatedNodeInfo"}}, "text": "# Google Search API endpoint\n    google_search_url = \"https://www.googleapis.com/customsearch/v1\"\n\n    # Define the query parameters\n    params = {\n        \"q\": question,\n        \"key\": api_key,\n        \"cx\": cse_id,\n        \"num\": num_results,\n    }\n    if kwargs:\n        params.update(**kwargs)\n\n    search_results = requests_get(google_search_url, params)\n\n    if isinstance(search_results, str):\n        return ServiceResponse(ServiceExecStatus.ERROR, search_results)\n\n    # Retrieve the top search result links\n    results = search_results.get(\"items\", [])\n\n    # Return all snippet\n    return ServiceResponse(\n        ServiceExecStatus.SUCCESS,\n        [\n            {\n                \"title\": result[\"title\"],\n                \"link\": result[\"link\"],\n                \"snippet\": result[\"snippet\"],\n            }\n            for result in results\n        ],\n    )", "start_char_idx": 5842, "end_char_idx": 6710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2ae1a50-263a-44b4-b664-c8beb8a9421a": {"__data__": {"id_": "b2ae1a50-263a-44b4-b664-c8beb8a9421a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "cf27e23f59bc83ea335d6a8ef2adad900d4dbe59e7d2d9aa5958e67070ffd17b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d112ebe1-a5a1-46b3-ae9e-6398ac77991a", "node_type": "1", "metadata": {}, "hash": "d6b0b18e6eb450cc0248286f2dba0ac736149892e64deb38f4c40bf7a77f95e9", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"parsing and digesting the web pages\"\"\"\nimport json\nfrom urllib.parse import urlparse\nfrom typing import Optional, Callable, Sequence, Any\nimport requests\nfrom loguru import logger\n\n\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\nfrom agentscope.models.model import ModelWrapperBase\nfrom agentscope.service import summarization\n\n\nDEFAULT_WEB_SYS_PROMPT = (\n    \"You're a web page analyser. You job is to extract important\"\n    \"and useful information from html or webpage description.\\n\"\n)\n\n\ndef is_valid_url(url: str) -> bool:\n    \"\"\"\n    Use urlparse to check if a URL is valid\n    Args:\n        url (str): string to be checked\n\n    Returns:\n        bool: True if url is valid, False otherwise\n    \"\"\"\n    try:\n        result = urlparse(url)\n        # Check if the URL has both a scheme\n        # (e.g., \"http\" or \"https\") and a netloc (domain).\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False  # A ValueError indicates that the URL is not valid.", "start_char_idx": 0, "end_char_idx": 1102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d112ebe1-a5a1-46b3-ae9e-6398ac77991a": {"__data__": {"id_": "d112ebe1-a5a1-46b3-ae9e-6398ac77991a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2ae1a50-263a-44b4-b664-c8beb8a9421a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9ea9ad02402207be39aefa1ee0b58add5e678646f2264eb69d117ba8a0514e26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6aed3507-2b61-456d-9257-30e83a58cb33", "node_type": "1", "metadata": {}, "hash": "73307eb3273b3973954e858d5cbd78cd0d03804900dccb40ef3a143b30081954", "class_name": "RelatedNodeInfo"}}, "text": "def load_web(\n    url: str,\n    keep_raw: bool = True,\n    html_selected_tags: Optional[Sequence[str]] = None,\n    self_parse_func: Optional[Callable[[requests.Response], Any]] = None,\n    timeout: int = 5,\n) -> ServiceResponse:", "start_char_idx": 1105, "end_char_idx": 1333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6aed3507-2b61-456d-9257-30e83a58cb33": {"__data__": {"id_": "6aed3507-2b61-456d-9257-30e83a58cb33", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d112ebe1-a5a1-46b3-ae9e-6398ac77991a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b944880b7dc8da8b744c655079566cd117aa2cd942cfe3863eaac60305fbc7eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97192628-0e20-49ec-9e51-4883c77e2d92", "node_type": "1", "metadata": {}, "hash": "eac866b788af41cd6b4b4bae8aacbb5cd2cac604afd906620330b5da45774313", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Function for parsing and digesting the web page.\n\n    Args:\n        url (str): the url of the web page\n        keep_raw (bool):\n            Whether to keep raw HTML. If True, the content is\n            stored with key \"raw\".\n        html_selected_tags (Optional[Sequence[str]]):\n            the text in elements of `html_selected_tags` will\n            be extracted and stored with \"html_to_text\"\n            key in return.\n        self_parse_func (Optional[Callable]):\n            if \"self_parse_func\" is not None, then the\n            function will be invoked with the\n            requests.Response as input.\n            The result is stored with `self_define_func`\n            key\n        timeout (int): timeout parameter for requests.\n\n    Returns:\n        `ServiceResponse`: If successful, `ServiceResponse` object is returned\n        with `content` field is a dict, where keys are subset of:\n\n            \"raw\": exists if `keep_raw` is True, store raw HTML content`;\n\n            \"self_define_func\": exists if `self_parse_func` is provided,\n            store the return of self_define_func;\n\n            \"html_to_text\": exists if `html_selected_tags` is provided\n            and not empty;\n\n            \"json\": exists if url links to a json webpage, then it is\n            parsed as json.\n\n         For example, `ServiceResponse.content` field is\n\n        .. code-block:: python\n\n            {\n                \"raw\": xxxxx,\n                \"selected_tags_text\": xxxxx\n            }\n    \"\"\"", "start_char_idx": 1338, "end_char_idx": 2836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97192628-0e20-49ec-9e51-4883c77e2d92": {"__data__": {"id_": "97192628-0e20-49ec-9e51-4883c77e2d92", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6aed3507-2b61-456d-9257-30e83a58cb33", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8fd7ef2104a720576d8638b2e95ae486babe21f6d2f56f2a66eb5edbec01417c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69941be9-bc1f-4653-9b9b-49ad04715bd2", "node_type": "1", "metadata": {}, "hash": "42db46db08dcc65248f573c88e883ffb73d1835cac444d1cbd3cbcc6329b8a43", "class_name": "RelatedNodeInfo"}}, "text": "header = {\n        \"Accept-Language\": \"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\",\n        \"Cache-Control\": \"max-age=0\",\n        \"Upgrade-Insecure-Requests\": \"1\",\n        \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64)\"\n        \" AppleWebKit/537.36 (KHTML, like Gecko) \",\n    }", "start_char_idx": 2841, "end_char_idx": 3123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69941be9-bc1f-4653-9b9b-49ad04715bd2": {"__data__": {"id_": "69941be9-bc1f-4653-9b9b-49ad04715bd2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97192628-0e20-49ec-9e51-4883c77e2d92", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3b3c899494d34a58a69ada49ef7b27e886c2886eb92cf4d7fbd366eb9057a7e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d00acdb-f66b-459c-9566-bcd91707a702", "node_type": "1", "metadata": {}, "hash": "ec1518fca4117d5878c9d445d29e02a77268a1a35179907855dddd5b852a8561", "class_name": "RelatedNodeInfo"}}, "text": "try:", "start_char_idx": 815, "end_char_idx": 819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d00acdb-f66b-459c-9566-bcd91707a702": {"__data__": {"id_": "7d00acdb-f66b-459c-9566-bcd91707a702", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69941be9-bc1f-4653-9b9b-49ad04715bd2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9f5df78df82e41bcb7d0da9296ff94821284d249fb05aaf39dfd63e969cef4c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e88a6fe2-ccf0-4086-81dc-0561eeee43d8", "node_type": "1", "metadata": {}, "hash": "3a571fc516b922ed8109556ae9b853a282af012ee2f34eb79c5cc5e71d6c3180", "class_name": "RelatedNodeInfo"}}, "text": "response = requests.get(url=url, headers=header, timeout=timeout)", "start_char_idx": 3141, "end_char_idx": 3206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e88a6fe2-ccf0-4086-81dc-0561eeee43d8": {"__data__": {"id_": "e88a6fe2-ccf0-4086-81dc-0561eeee43d8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d00acdb-f66b-459c-9566-bcd91707a702", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ac2c647964a95fed40ff13ae42b91072a36ac6f97fb6a7fe1558b127253750bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a11d54b-cc31-48bb-83ee-d86ca9457086", "node_type": "1", "metadata": {}, "hash": "95fede79525ca37cac8bd60ae66a1ea28fd182bee9ae18b9ce8cb309d7a3e3b0", "class_name": "RelatedNodeInfo"}}, "text": "if response.status_code == 200:", "start_char_idx": 3216, "end_char_idx": 3247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a11d54b-cc31-48bb-83ee-d86ca9457086": {"__data__": {"id_": "9a11d54b-cc31-48bb-83ee-d86ca9457086", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e88a6fe2-ccf0-4086-81dc-0561eeee43d8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7857ee73a0f5eec1d5710262f5bbb44e2aed7fc7ef9317f72bcdd4693614b594", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6cf8c902-6095-4d8b-bfc4-cccd4145f643", "node_type": "1", "metadata": {}, "hash": "1f47443790f8b966d383981c4680915c1925366ee9c0c31467a669f17a8841d4", "class_name": "RelatedNodeInfo"}}, "text": "results = {}\n            if keep_raw:\n                results[\"raw\"] = response.content\n\n            if self_parse_func:\n                results[\"self_define_func\"] = self_parse_func(response)\n\n            content_type = response.headers[\"Content-Type\"].lower()\n            if \"html\" in content_type and html_selected_tags:\n                html_clean_text = parse_html_to_text(\n                    response.text,\n                    html_selected_tags,\n                )\n                results[\"html_to_text\"] = html_clean_text\n            elif \"pdf\" in content_type:\n                # TODO: support pdf in the future\n                logger.warning(\n                    \"Current version does not parse url with pdf \"\n                    \"Content-Types\",\n                )\n            elif \"json\" in content_type:\n                results[\"json\"] = json.loads(response.text)\n            elif \"image\" in content_type:\n                # TODO: to support image (gif, jpeg, png) data\n                logger.warning(\n                    \"Current implementation returns binary \"\n                    \"response.content for url with image Content-Types\",\n                )\n            else:\n                raise NotImplementedError(\n                    f\"Unsupported content type ({content_type}) \"\n                    f\"with url: ({url})\",\n                )\n\n            return ServiceResponse(\n                ServiceExecStatus.SUCCESS,\n                content=results,\n            )", "start_char_idx": 3260, "end_char_idx": 4736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cf8c902-6095-4d8b-bfc4-cccd4145f643": {"__data__": {"id_": "6cf8c902-6095-4d8b-bfc4-cccd4145f643", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a11d54b-cc31-48bb-83ee-d86ca9457086", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "594ea356efb763d950922fda37b42aa04537da2b5d4fb7f9c281edfd74da15e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "48d9bffb-5ae1-4c46-ac9e-2fd18892b341", "node_type": "1", "metadata": {}, "hash": "45532073cf4fe18346ce4e2ec55d4ec9bf6f04b820cb63349ddfd50ad9604a37", "class_name": "RelatedNodeInfo"}}, "text": "else:\n            logger.warning(\n                f\"Fail to load web page, \"\n                f\"status code {response.status_code}\",\n            )\n            return ServiceResponse(\n                ServiceExecStatus.ERROR,\n                content=\"\",\n            )", "start_char_idx": 4745, "end_char_idx": 5009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48d9bffb-5ae1-4c46-ac9e-2fd18892b341": {"__data__": {"id_": "48d9bffb-5ae1-4c46-ac9e-2fd18892b341", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6cf8c902-6095-4d8b-bfc4-cccd4145f643", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2b5fcd709d944b9744e5ff81c462cfd779b3f96876a641da10f1b30794bc1503", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2665c99f-7999-4d11-8301-7326bfe1bd9e", "node_type": "1", "metadata": {}, "hash": "bf7a8b76bc9e3fca70855792842ac77324b8d8a0c6b41309c93c780fdac31f6c", "class_name": "RelatedNodeInfo"}}, "text": "except Exception as e:\n        logger.warning(e)\n        return ServiceResponse(ServiceExecStatus.ERROR, content=\"\")", "start_char_idx": 5014, "end_char_idx": 5130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2665c99f-7999-4d11-8301-7326bfe1bd9e": {"__data__": {"id_": "2665c99f-7999-4d11-8301-7326bfe1bd9e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48d9bffb-5ae1-4c46-ac9e-2fd18892b341", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b2f9956ccb42e2bf2e903ea345c102a04c301074b598d3dff5115b610aa0117d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7fa9a414-3284-47f2-bc1d-43b39b201b0e", "node_type": "1", "metadata": {}, "hash": "8acab0eed9cd956cec24b47aae767ccbff48f269ec8c02a28fac06ecdd0e21c6", "class_name": "RelatedNodeInfo"}}, "text": "def parse_html_to_text(\n    html_text: str,\n    html_selected_tags: Optional[Sequence[str]] = None,\n) -> str:", "start_char_idx": 5133, "end_char_idx": 5242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fa9a414-3284-47f2-bc1d-43b39b201b0e": {"__data__": {"id_": "7fa9a414-3284-47f2-bc1d-43b39b201b0e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2665c99f-7999-4d11-8301-7326bfe1bd9e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "49355c32a13180c5887ce0ed88ccf50cd06ac777e883e2a959bb11d468c502f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bed6c6e2-434b-4e0c-8568-649cf2d15d3d", "node_type": "1", "metadata": {}, "hash": "20c0780f23c0d60c5e8af311bbe9508b321b510ba9397b53828b860a2d49ba86", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"\n    Parse the obtained HTML file.\n\n    Args:\n        html_text (str):\n            HTML source code\n        html_selected_tags (Optional[Sequence[str]]):\n            the text in elements of `html_selected_tags` will\n            be extracted and returned.\n\n    Returns:\n        `ServiceResponse`: If successful, `ServiceResponse` object is returned\n        with `content` field is processed text content of the selected tags,\n    \"\"\"", "start_char_idx": 5247, "end_char_idx": 5682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bed6c6e2-434b-4e0c-8568-649cf2d15d3d": {"__data__": {"id_": "bed6c6e2-434b-4e0c-8568-649cf2d15d3d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7fa9a414-3284-47f2-bc1d-43b39b201b0e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ec5c647924a0991bebee183c17a170fdbd43469c36e532afe53999319f6bb080", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "656ca51f-08ca-4310-97ed-db33c00db775", "node_type": "1", "metadata": {}, "hash": "b80375e2cb37049dd1b95e21fd3895729e6eba0672dfe06fc06c727a0fc3c866", "class_name": "RelatedNodeInfo"}}, "text": "if html_selected_tags:\n        logger.info(\n            f\"extracting text information from tags: \" f\"{html_selected_tags}\",\n        )\n        try:\n            from bs4 import BeautifulSoup, NavigableString, Tag\n        except ImportError as exc:\n            raise ImportError(\n                \"BeautifulSoup4 is required for processing the \"\n                \"web page without model.\"\n                \"Please install with `pip install bs4` .\",\n            ) from exc\n\n        doc = BeautifulSoup(html_text, \"html.parser\")\n\n        def get_navigable_strings(\n            e: Tag,\n        ) -> str:\n            # pylint: disable=cell-var-from-loop\n            text = \"\"\n            for child in e.children:\n                if isinstance(child, Tag):\n                    # pylint: disable=cell-var-from-loop\n                    text += get_navigable_strings(child).strip(\" \\n\\t\")\n                elif isinstance(child, NavigableString):\n                    if (e.name == \"a\") and (href := e.get(\"href\")):\n                        if is_valid_url(href):\n                            text += f\"[{child.strip()}]({href})\"\n                    else:\n                        text += child.text\n            return \" \".join(text.split())\n\n        text_parts = \"\"\n        for element in doc.find_all(recursive=True):\n            if element.name in html_selected_tags:\n                text_parts += get_navigable_strings(element).strip(\" \\n\\t\")\n                element.decompose()\n    else:\n        text_parts = \"\"", "start_char_idx": 5687, "end_char_idx": 7184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "656ca51f-08ca-4310-97ed-db33c00db775": {"__data__": {"id_": "656ca51f-08ca-4310-97ed-db33c00db775", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bed6c6e2-434b-4e0c-8568-649cf2d15d3d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "30ccab66d9cbe766b0b558b45f154733d72a795eb10404753261434357b375f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25d6bc19-802d-49b9-b23e-6473c75088ac", "node_type": "1", "metadata": {}, "hash": "6209f233a726580be648fbc3ea9f639c6f2081930607b8f0224519c33cdf037e", "class_name": "RelatedNodeInfo"}}, "text": "return text_parts", "start_char_idx": 7190, "end_char_idx": 7207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25d6bc19-802d-49b9-b23e-6473c75088ac": {"__data__": {"id_": "25d6bc19-802d-49b9-b23e-6473c75088ac", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6cf657cbe6a2a5d1e62ef76960ffc812e484173b577359653481f759a4eccbeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "656ca51f-08ca-4310-97ed-db33c00db775", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ca6da9a66614b4f1a15fc3becf4a5389d0adaa937ac6b630fd443034c5e4c5c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e0508bd-268c-434a-8e51-1eb12ebc3e65", "node_type": "1", "metadata": {}, "hash": "5109f9df2aee21dee86f6c9c76303e5e04d755767252dd05e71c369989f33989", "class_name": "RelatedNodeInfo"}}, "text": "def digest_webpage(\n    web_text_or_url: str,\n    model: ModelWrapperBase = None,\n    html_selected_tags: Sequence[str] = (\"h\", \"p\", \"li\", \"div\", \"a\"),\n    digest_prompt: str = DEFAULT_WEB_SYS_PROMPT,\n) -> ServiceResponse:\n    \"\"\"\n    Args:\n        web_text_or_url (str): preprocessed web text or url to the web page\n        model (ModelWrapperBase): the model to digest the web content\n        html_selected_tags (Sequence[str]):\n            the text in elements of `html_selected_tags` will\n            be extracted and feed to the model\n        digest_prompt (str): system prompt for the model to digest\n            the web content\n\n    Returns:\n        `ServiceResponse`: If successful, `ServiceResponse` object is returned\n        with `content` field filled with the model output.\n    \"\"\"\n    if is_valid_url(web_text_or_url):\n        # if an url is provided, then\n        # load the content of the url first\n        if html_selected_tags is None or len(html_selected_tags) == 0:\n            html_selected_tags = [\"h\", \"p\", \"li\", \"div\", \"a\"]\n        response = load_web(\n            url=web_text_or_url,\n            html_selected_tags=html_selected_tags,\n        )\n        if response.status == ServiceExecStatus.SUCCESS:\n            web_text = response.content[\"html_to_text\"]\n        else:\n            return response\n    else:\n        web_text = web_text_or_url\n    return summarization(\n        model=model,\n        text=web_text,\n        system_prompt=digest_prompt,\n    )", "start_char_idx": 7210, "end_char_idx": 8693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e0508bd-268c-434a-8e51-1eb12ebc3e65": {"__data__": {"id_": "6e0508bd-268c-434a-8e51-1eb12ebc3e65", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 315, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4bd5c25-8f6f-4d11-9c2d-b2353adae871", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 315, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "73ac5cdebe261f3d0940a918b0bd5add26026e783a1fa1bfed0be9ce683c643b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25d6bc19-802d-49b9-b23e-6473c75088ac", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0ccf2ccb1e63a063a07c56889b059118bdef7c6c83ba4854a7ab6a75e18d36eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cff56e72-e6b4-4ded-be81-433ba5558626", "node_type": "1", "metadata": {}, "hash": "d2bb5dc8561d7160059c604a5cc34facbe23599b911d5e6b482dbce6a36e001e", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Import modules in utils package.\"\"\"\nfrom .logging_utils import setup_logger\nfrom .monitor import MonitorBase\nfrom .monitor import QuotaExceededError\nfrom .monitor import MonitorFactory\n\n__all__ = [\n    \"setup_logger\",\n    \"MonitorBase\",\n    \"QuotaExceededError\",\n    \"MonitorFactory\",\n]", "start_char_idx": 0, "end_char_idx": 314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cff56e72-e6b4-4ded-be81-433ba5558626": {"__data__": {"id_": "cff56e72-e6b4-4ded-be81-433ba5558626", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52660b53fcdd02c3ed6fee393e2f34dfd3e272d854a0075cd7c5a794700ce58e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e0508bd-268c-434a-8e51-1eb12ebc3e65", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 315, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "292e7f32659b0a91c0655ad333df1bf9b73bc5dacf63ef976dd11cb8a3ed164b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f", "node_type": "1", "metadata": {}, "hash": "0c0cd60697afb772495fcc7fb13080e0dadb36115d03f7c57c7b157cbc62db5a", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Common utils.\"\"\"\n\nimport contextlib\nimport os\nimport re\nimport signal\nimport sys\nimport tempfile\nimport threading\nfrom typing import Any, Generator, Optional, Union\nfrom loguru import logger\nimport requests\n\nfrom agentscope.service.service_response import ServiceResponse\nfrom agentscope.service.service_status import ServiceExecStatus\n\n\n@contextlib.contextmanager\ndef timer(seconds: Optional[Union[int, float]] = None) -> Generator:\n    \"\"\"\n    A context manager that limits the execution time of a code block to a\n    given number of seconds.\n    The implementation of this contextmanager are borrowed from\n    https://github.com/openai/human-eval/blob/master/human_eval/execution.py\n\n    Note:\n        This function only works in Unix and MainThread,\n        since `signal.setitimer` is only available in Unix.\n\n    \"\"\"\n    if (\n        seconds is None\n        or sys.platform == \"win32\"\n        or threading.currentThread().name  # pylint: disable=W4902\n        != \"MainThread\"\n    ):\n        yield\n        return\n\n    def signal_handler(*args: Any, **kwargs: Any) -> None:\n        raise TimeoutError(\"timed out\")\n\n    signal.setitimer(signal.ITIMER_REAL, seconds)\n    signal.signal(signal.SIGALRM, signal_handler)\n\n    try:\n        # Enter the context and execute the code block.\n        yield\n    finally:\n        signal.setitimer(signal.ITIMER_REAL, 0)", "start_char_idx": 0, "end_char_idx": 1387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f": {"__data__": {"id_": "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52660b53fcdd02c3ed6fee393e2f34dfd3e272d854a0075cd7c5a794700ce58e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cff56e72-e6b4-4ded-be81-433ba5558626", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9004db446932252afdfa638f171b5d12ce02ba6ae3fef587bd82eba493aa95d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7bcc3f52-12da-4382-8782-e1a1b4f372ae", "node_type": "1", "metadata": {}, "hash": "1967755ffdbec2a088a578f1b411a08d40af9736f30fe22c09dc47d94942c6be", "class_name": "RelatedNodeInfo"}}, "text": "@contextlib.contextmanager\ndef create_tempdir() -> Generator:\n    \"\"\"\n    A context manager that creates a temporary directory and changes the\n    current working directory to it.\n    The implementation of this contextmanager are borrowed from\n    https://github.com/openai/human-eval/blob/master/human_eval/execution.py\n    \"\"\"\n    with tempfile.TemporaryDirectory() as dirname:\n        with chdir(dirname):\n            yield dirname\n\n\n@contextlib.contextmanager\ndef chdir(path: str) -> Generator:\n    \"\"\"\n    A context manager that changes the current working directory to the\n    given path.\n    The implementation of this contextmanager are borrowed from\n    https://github.com/openai/human-eval/blob/master/human_eval/execution.py\n    \"\"\"\n    if path == \".\":\n        yield\n        return\n    cwd = os.getcwd()\n    os.chdir(path)\n    try:\n        yield\n    except BaseException as exc:\n        raise exc\n    finally:\n        os.chdir(cwd)", "start_char_idx": 1390, "end_char_idx": 2332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bcc3f52-12da-4382-8782-e1a1b4f372ae": {"__data__": {"id_": "7bcc3f52-12da-4382-8782-e1a1b4f372ae", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52660b53fcdd02c3ed6fee393e2f34dfd3e272d854a0075cd7c5a794700ce58e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3f955e2e02e2ae76203e383e0841d0bd0f4b111a2f3681fb5a957e67fd2a8b3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d", "node_type": "1", "metadata": {}, "hash": "5380c33be7a63450599cad45bc509c64744fd03393277e800bc9bd5334174a1e", "class_name": "RelatedNodeInfo"}}, "text": "def write_file(content: str, file_path: str) -> ServiceResponse:\n    \"\"\"\n    Write content to a file.\n\n    Args:\n        content (str): The content to be written to the file.\n        file_path (str): The path to the file where the content will be\n            written.\n\n    Returns:\n        ServiceResponse: where the boolean indicates the success of the\n        operation, and the str contains an empty string if successful or an\n        error message if any, including the error type.\n\n    This function attempts to open the file in write mode and write the\n    provided content to it. If the file does not exist, it will be created.\n    If the file exists, its content will be overwritten. If a\n    PermissionError occurs, indicating a lack of necessary permissions,\n    or an IOError occurs, signaling additional issues such as an invalid\n    file path or hardware-related I/O error, the function will catch the\n    exception and return `False` along with the error message.\n    \"\"\"\n    try:\n        with open(file_path, \"w\", encoding=\"utf-8\") as file:\n            file.write(content)\n        return ServiceResponse(\n            status=ServiceExecStatus.SUCCESS,\n            content=\"Success\",\n        )\n    except Exception as e:\n        error_message = f\"{e.__class__.__name__}: {e}\"\n        return ServiceResponse(\n            status=ServiceExecStatus.ERROR,\n            content=error_message,\n        )", "start_char_idx": 2335, "end_char_idx": 3744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d": {"__data__": {"id_": "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52660b53fcdd02c3ed6fee393e2f34dfd3e272d854a0075cd7c5a794700ce58e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7bcc3f52-12da-4382-8782-e1a1b4f372ae", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9427f9e3344432701a2911c92fac1b02975b8998edc82e09d5a6cb96cb00ad5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c392e880-95a2-4e65-a1b7-e4ed5b913433", "node_type": "1", "metadata": {}, "hash": "ea9c79993a1bdd6128efd81557d0de898d2be3d393ca49e02a19d3f43770a0f7", "class_name": "RelatedNodeInfo"}}, "text": "def requests_get(\n    url: str,\n    params: dict,\n    headers: Optional[dict] = None,\n) -> Union[dict, str]:\n    \"\"\"\n    Sends a GET request to the specified URL with the provided query parameters\n    and headers. Returns the JSON response as a dictionary.\n\n    This function handles the request, checks for errors, logs exceptions,\n        and parses the JSON response.\n\n    Args:\n        url (str): The URL to which the GET request is sent.\n        params (Dict): A dictionary containing query parameters to be included\n            in the request.\n        headers (Optional[Dict]): An optional dictionary of HTTP headers to\n            send with the request.\n\n    Returns:\n        Dict or str:\n        If the request is successful, returns a dictionary containing the\n        parsed JSON data.\n        If the request fails, returns the error string.\n    \"\"\"\n    # Make the request\n    try:\n        # Check if headers are provided, and include them if they are not None\n        if headers:\n            response = requests.get(url, params=params, headers=headers)\n        else:\n            response = requests.get(url, params=params)\n        # This will raise an exception for HTTP error codes\n        response.raise_for_status()\n    except requests.RequestException as e:\n        logger.error(e)\n        return str(e)\n    # Parse the JSON response\n    search_results = response.json()\n    return search_results", "start_char_idx": 3747, "end_char_idx": 5158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c392e880-95a2-4e65-a1b7-e4ed5b913433": {"__data__": {"id_": "c392e880-95a2-4e65-a1b7-e4ed5b913433", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "52660b53fcdd02c3ed6fee393e2f34dfd3e272d854a0075cd7c5a794700ce58e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "38d8b5265af3ec9e8e2ec298b7940b384aecc0c99a76a8af037cad74b7b01e47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7af3d7ab-1113-43a6-8189-0df0754c429e", "node_type": "1", "metadata": {}, "hash": "efa36e20220881cf1e5f7453e6a101f76d606c643dd01576583198cada3dd211", "class_name": "RelatedNodeInfo"}}, "text": "def if_change_database(sql_query: str) -> bool:\n    \"\"\"Check whether SQL query only contains SELECT query\"\"\"\n    # Compile the regex pattern outside the function for better performance\n    pattern_unsafe_sql = re.compile(\n        r\"\\b(INSERT|UPDATE|DELETE|REPLACE|CREATE|ALTER|DROP|TRUNCATE|USE)\\b\",\n        re.IGNORECASE,\n    )\n\n    # Remove SQL comments\n    sql_query = re.sub(r\"--.*?$\", \"\", sql_query, flags=re.MULTILINE)\n    # Remove /* */ comments\n    sql_query = re.sub(r\"/\\*.*?\\*/\", \"\", sql_query, flags=re.DOTALL)\n    # Matching non-SELECT statements with regular expressions\n    if pattern_unsafe_sql.search(sql_query):\n        return False\n    return True", "start_char_idx": 5161, "end_char_idx": 5826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7af3d7ab-1113-43a6-8189-0df0754c429e": {"__data__": {"id_": "7af3d7ab-1113-43a6-8189-0df0754c429e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c392e880-95a2-4e65-a1b7-e4ed5b913433", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "68b7bafde139c194fa0fc9bd89c0afded76ae49d77d832b721e0d8f8eb72c555", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b03b7258-292e-44d5-bf59-a9a7ecfd28b4", "node_type": "1", "metadata": {}, "hash": "ea9db2256138f48e1f52821cec49438a56bde5d0a50952805f924b06eb44093f", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Logging utilities.\"\"\"\nimport json\nimport os\nimport sys\nfrom typing import Optional, Literal, Union, Any\n\nfrom loguru import logger\n\nfrom agentscope.web.studio.utils import (\n    generate_image_from_name,\n    send_msg,\n    get_reset_msg,\n    thread_local_data,\n)\n\nLOG_LEVEL = Literal[\n    \"TRACE\",\n    \"DEBUG\",\n    \"INFO\",\n    \"SUCCESS\",\n    \"WARNING\",\n    \"ERROR\",\n    \"CRITICAL\",\n]\n\nLEVEL_CHAT_LOG = \"CHAT_LOG\"\nLEVEL_CHAT_SAVE = \"CHAT_SAVE\"\n\n_SPEAKER_COLORS = [\n    (\"<blue>\", \"</blue>\"),\n    (\"<cyan>\", \"</cyan>\"),\n    (\"<green>\", \"</green>\"),\n    (\"<magenta>\", \"</magenta>\"),\n    (\"<red>\", \"</red>\"),\n    (\"<white>\", \"</white>\"),\n    (\"<yellow>\", \"</yellow>\"),\n]\n\n_SPEAKER_TO_COLORS = {}", "start_char_idx": 0, "end_char_idx": 717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b03b7258-292e-44d5-bf59-a9a7ecfd28b4": {"__data__": {"id_": "b03b7258-292e-44d5-bf59-a9a7ecfd28b4", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7af3d7ab-1113-43a6-8189-0df0754c429e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b4813a6b2010b71ae6bc852441fd334c09164f889b53e15ab291c73ebe22c274", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6cc1b16a-c565-428d-8b21-2738a9857024", "node_type": "1", "metadata": {}, "hash": "966ffe4c264af5bff5758fa156dc8ef5a606dd253e8527ab485f9f1aa6a8e3b4", "class_name": "RelatedNodeInfo"}}, "text": "def _get_speaker_color(speaker: str) -> tuple[str, str]:\n    \"\"\"Get the color markers for a speaker. If the speaker is new, assign a\n    new color. Otherwise, return the color that was assigned to the speaker.\n\n    Args:\n        speaker (`str`):\n            The speaker to be assigned a color.\n\n    Returns:\n        `tuple[str, str]`: A color marker tuple, e.g. (\"<blue>\", \"</blue>\").\n    \"\"\"\n    global _SPEAKER_COLORS, _SPEAKER_TO_COLORS\n    if speaker in _SPEAKER_TO_COLORS:\n        return _SPEAKER_TO_COLORS[speaker]\n    else:\n        markers = _SPEAKER_COLORS[\n            (len(_SPEAKER_TO_COLORS) + 1)\n            % len(\n                _SPEAKER_COLORS,\n            )\n        ]\n        # Record the color for this speaker\n        _SPEAKER_TO_COLORS[speaker] = markers\n        return markers\n\n\n# add chat function for logger", "start_char_idx": 720, "end_char_idx": 1549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cc1b16a-c565-428d-8b21-2738a9857024": {"__data__": {"id_": "6cc1b16a-c565-428d-8b21-2738a9857024", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b03b7258-292e-44d5-bf59-a9a7ecfd28b4", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "5db21588c3e4492fadbcc160e75e8e8fba50cd8c9da6fa6b6f2d017063576047", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "43966591-a7be-468b-ad95-53569d2cadb5", "node_type": "1", "metadata": {}, "hash": "ea04a8d43c14c6e2b3c6f79638c87a5acb2a380420acaed3102ccab2b60e7067", "class_name": "RelatedNodeInfo"}}, "text": "def _chat(\n    message: Union[str, dict],\n    *args: Any,\n    disable_studio: bool = False,\n    **kwargs: Any,\n) -> None:", "start_char_idx": 1550, "end_char_idx": 1671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43966591-a7be-468b-ad95-53569d2cadb5": {"__data__": {"id_": "43966591-a7be-468b-ad95-53569d2cadb5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6cc1b16a-c565-428d-8b21-2738a9857024", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "39ad47aca79955ef1d2273caa2786cca2941c855358a0e0378607b3f3a97ccba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "feb2d536-693d-4584-ab16-e91d3388c3f9", "node_type": "1", "metadata": {}, "hash": "c0c644e3ac9fc752e3a7c803de3775da487ba382f00ab509ebb7be681ab409b1", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Log a chat message with the format of\"<speaker>: <content>\".\n\n    Args:\n        message (`Union[str, dict]`):\n            The message to be logged. If it is a string, it will be logged\n            directly. If it's a dict, it should have \"name\"(or \"role\") and\n            \"content\" keys, and the message will be logged as \"<name/role>:\n            <content>\".\n    \"\"\"\n    # Save message into file, add default to ignore not serializable objects\n    logger.log(\n        LEVEL_CHAT_SAVE,\n        json.dumps(message, ensure_ascii=False, default=lambda _: None),\n        *args,\n        **kwargs,\n    )\n\n    # Print message in terminal with specific format", "start_char_idx": 1676, "end_char_idx": 2330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "feb2d536-693d-4584-ab16-e91d3388c3f9": {"__data__": {"id_": "feb2d536-693d-4584-ab16-e91d3388c3f9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43966591-a7be-468b-ad95-53569d2cadb5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "75df2023d95dc3ee321451eac5848cf6b37ca67c04976089188526e1268c6197", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56809e29-93db-4a10-8c55-ee99a884040a", "node_type": "1", "metadata": {}, "hash": "65eb6a01bc72b56d2d00ba876865c8208218516b719f5bc21908cdfb1b8ff3a3", "class_name": "RelatedNodeInfo"}}, "text": "if isinstance(message, dict):\n        contain_name_or_role = \"name\" in message or \"role\" in message\n        contain_content = \"content\" in message\n        contain_url = message.get(\"url\", None) is not None\n\n        # print content if contain name or role and contain content\n        if contain_name_or_role:\n            speaker = message.get(\"name\", None) or message.get(\"role\", None)\n            (m1, m2) = _get_speaker_color(speaker)\n\n            print_str = []\n            if contain_content:\n                print_str.append(\n                    f\"{m1}<b>{speaker}</b>{m2}: {message['content']}\",\n                )\n\n            if contain_url:\n                print_str.append(f\"{m1}<b>{speaker}</b>{m2}: {message['url']}\")\n\n            if len(print_str) > 0:\n                print_str = (\n                    \"\\n\".join(print_str).replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n                )\n                logger.log(LEVEL_CHAT_LOG, print_str, *args, **kwargs)\n\n                if hasattr(thread_local_data, \"uid\") and not disable_studio:\n                    log_studio(message, thread_local_data.uid, **kwargs)\n                return\n\n    message = str(message).replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n    logger.log(LEVEL_CHAT_LOG, message, *args, **kwargs)", "start_char_idx": 2335, "end_char_idx": 3593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56809e29-93db-4a10-8c55-ee99a884040a": {"__data__": {"id_": "56809e29-93db-4a10-8c55-ee99a884040a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "feb2d536-693d-4584-ab16-e91d3388c3f9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8992ee0772a6e567d7a8dcf4a4eab15eca19f22f43032f4f1f71b662c0f37d84", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3780f5c9-4425-40db-aa26-4ae34e471d1f", "node_type": "1", "metadata": {}, "hash": "25e87d1140e2d3314445cdbce887da96f830a2ee44672bf4aeb616873964f070", "class_name": "RelatedNodeInfo"}}, "text": "def log_studio(message: dict, uid: str, **kwargs: Any) -> None:", "start_char_idx": 3596, "end_char_idx": 3659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3780f5c9-4425-40db-aa26-4ae34e471d1f": {"__data__": {"id_": "3780f5c9-4425-40db-aa26-4ae34e471d1f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56809e29-93db-4a10-8c55-ee99a884040a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a8e0c941ce738b111a22825df5f8a2ce9fdf8d72d31cf5a8b39904308c3a9562", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ecf026ef-ee2a-4451-9fa9-55ede7719dec", "node_type": "1", "metadata": {}, "hash": "03ae26408e3793d9e766d5e744f3b978cb535b08958979b5a25a49692042c247", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Send chat message to studio.\n\n    Args:\n        message (`dict`):\n            The message to be logged. It should have \"name\"(or \"role\") and\n            \"content\" keys, and the message will be logged as \"<name/role>:\n            <content>\".\n        uid (`str`):\n            The local value 'uid' of the thread.\n    \"\"\"", "start_char_idx": 3664, "end_char_idx": 3985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ecf026ef-ee2a-4451-9fa9-55ede7719dec": {"__data__": {"id_": "ecf026ef-ee2a-4451-9fa9-55ede7719dec", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3780f5c9-4425-40db-aa26-4ae34e471d1f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "281965e511e79aa4bc60119029c21088852399ced3ab870ff237df78c3302518", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9", "node_type": "1", "metadata": {}, "hash": "11a852dc3588cac07e9b6d1aefc0fd080505daa5f7984a103b979faa921e5025", "class_name": "RelatedNodeInfo"}}, "text": "if uid:", "start_char_idx": 3990, "end_char_idx": 3997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9": {"__data__": {"id_": "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ecf026ef-ee2a-4451-9fa9-55ede7719dec", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "48ef68552d8b91e7e96af4f84e944151049edacd7ab67dab60f0da6cbd655d0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e66e1018-aeb8-4863-898b-c3a9651dfaa0", "node_type": "1", "metadata": {}, "hash": "8ead99548b3ad0af011484d3dab28ed198edde5e5f5cdf2803dc84d0cbe235a1", "class_name": "RelatedNodeInfo"}}, "text": "get_reset_msg(uid=uid)\n        name = message.get(\"name\", \"default\") or message.get(\"role\", \"default\")\n        avatar = kwargs.get(\"avatar\", None) or generate_image_from_name(\n            message[\"name\"],\n        )\n\n        msg = message[\"content\"]\n        flushing = True\n        if \"url\" in message and message[\"url\"]:\n            flushing = False\n            if isinstance(message[\"url\"], str):\n                message[\"url\"] = [message[\"url\"]]\n            for i in range(len(message[\"url\"])):\n                msg += \"\\n\" + f\"\"\"<img src=\"{message['url'][i]}\"/>\"\"\"\n        if \"audio_path\" in message and message[\"audio_path\"]:\n            flushing = False\n            if isinstance(message[\"audio_path\"], str):\n                message[\"audio_path\"] = [message[\"audio_path\"]]\n            for i in range(len(message[\"audio_path\"])):\n                msg += (\n                    \"\\n\"\n                    + f\"\"\"<audio src=\"{message['audio_path'][i]}\"\n                controls/></audio>\"\"\"\n                )\n        if \"video_path\" in message and message[\"video_path\"]:\n            flushing = False\n            if isinstance(message[\"video_path\"], str):\n                message[\"video_path\"] = [message[\"video_path\"]]\n            for i in range(len(message[\"video_path\"])):\n                msg += (\n                    \"\\n\"\n                    + f\"\"\"<video src=\"{message['video_path'][i]}\"\n                controls/></video>\"\"\"\n                )", "start_char_idx": 4006, "end_char_idx": 5448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e66e1018-aeb8-4863-898b-c3a9651dfaa0": {"__data__": {"id_": "e66e1018-aeb8-4863-898b-c3a9651dfaa0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "420e6489fa08020514f0d41841b340f1a301951631e3e5b51358e9833275b060", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a6070f35-f8bc-4183-a0d0-09cd5106c111", "node_type": "1", "metadata": {}, "hash": "d304f7e2369eaa3334c7f272c766d2f26bffeaa6e27da351ff051a292ce683e2", "class_name": "RelatedNodeInfo"}}, "text": "send_msg(\n            msg,\n            role=name,\n            uid=uid,\n            flushing=flushing,\n            avatar=avatar,\n        )", "start_char_idx": 5458, "end_char_idx": 5596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6070f35-f8bc-4183-a0d0-09cd5106c111": {"__data__": {"id_": "a6070f35-f8bc-4183-a0d0-09cd5106c111", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e66e1018-aeb8-4863-898b-c3a9651dfaa0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "315937665994f8a9278e2bda4674c2dd3ac540f5fad13e600fd05c3a92fe88c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2088848a-d530-4884-b5cd-ff4c63905f3d", "node_type": "1", "metadata": {}, "hash": "2af7fe909a426601b990d234aaa153ba8da823c00d7303b0926ec5cfef8e5aab", "class_name": "RelatedNodeInfo"}}, "text": "def _level_format(record: dict) -> str:\n    \"\"\"Format the log record.\"\"\"\n    if record[\"level\"].name == LEVEL_CHAT_LOG:\n        return record[\"message\"] + \"\\n\"\n    else:\n        return (\n            \"<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{\"\n            \"level: <8}</level> | <cyan>{name}</cyan>:<cyan>{\"\n            \"function}</cyan>:<cyan>{line}</cyan> - <level>{\"\n            \"message}</level>\\n\"\n        )", "start_char_idx": 5599, "end_char_idx": 6024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2088848a-d530-4884-b5cd-ff4c63905f3d": {"__data__": {"id_": "2088848a-d530-4884-b5cd-ff4c63905f3d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6070f35-f8bc-4183-a0d0-09cd5106c111", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "3c3ffa6b8101eaae10afb21276ff216dc0852c5db4ba730b5967fc7927cd9036", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76004fe4-9511-46f9-bd52-82e81f81a76e", "node_type": "1", "metadata": {}, "hash": "64254a3d67753b2157afdc03350caf8a10c19197bcf7cc2a4ffa3b8a368d3afc", "class_name": "RelatedNodeInfo"}}, "text": "def setup_logger(\n    path_log: Optional[str] = None,\n    level: LOG_LEVEL = \"INFO\",\n) -> None:", "start_char_idx": 6027, "end_char_idx": 6122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76004fe4-9511-46f9-bd52-82e81f81a76e": {"__data__": {"id_": "76004fe4-9511-46f9-bd52-82e81f81a76e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2088848a-d530-4884-b5cd-ff4c63905f3d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4520168312f1fad171587f42da2e09ca1be3f35046dd87d12f759ae80ae8f58c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "804dfb73-92b1-4d7b-af32-ff1b357ae848", "node_type": "1", "metadata": {}, "hash": "1086b60a57df23db92c3fe032f3bd16b606b67ca44fd17331e9e2f2e9d6a5ee9", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"Setup `loguru.logger` and redirect stderr to logging.\n\n    Args:\n        path_log (`str`, defaults to `\"\"`):\n            The directory of log files.\n        level (`str`, defaults to `\"INFO\"`):\n            The logging level, which is one of the following: `\"TRACE\"`,\n            `\"DEBUG\"`, `\"INFO\"`, `\"SUCCESS\"`, `\"WARNING\"`, `\"ERROR\"`,\n            `\"CRITICAL\"`.\n    \"\"\"\n    # avoid reinit in subprocess\n    if not hasattr(logger, \"chat\"):\n        # add chat function for logger\n        logger.level(LEVEL_CHAT_LOG, no=21)\n        logger.level(LEVEL_CHAT_SAVE, no=0)\n        logger.chat = _chat\n\n        # set logging level\n        logger.remove()\n        # standard output for all logging except chat\n        logger.add(\n            sys.stdout,\n            filter=lambda record: record[\"level\"].name != LEVEL_CHAT_SAVE,\n            format=_level_format,\n            enqueue=True,\n            level=level,\n        )", "start_char_idx": 6127, "end_char_idx": 7046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "804dfb73-92b1-4d7b-af32-ff1b357ae848": {"__data__": {"id_": "804dfb73-92b1-4d7b-af32-ff1b357ae848", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "14007fb6ce5caa3267dbdc4d23237c7ed58b2c794f34d1d7726e963fd84c9f04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76004fe4-9511-46f9-bd52-82e81f81a76e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9a53736812535c8a5b8af37c04f82b51b49499b438141de43ba02424c794992e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37b97ad3-b2ce-4f4c-a125-4452bf591c31", "node_type": "1", "metadata": {}, "hash": "0dd95c5fc382566e35084882554f50c11edb6184beb6212932fa14602defb840", "class_name": "RelatedNodeInfo"}}, "text": "if path_log is not None:\n        os.makedirs(path_log, exist_ok=True)\n        path_log_file = os.path.join(path_log, \"logging.log\")\n        path_chat_file = os.path.join(\n            path_log,\n            \"logging.chat\",\n        )\n\n        # save all logging into file\n        logger.add(\n            path_log_file,\n            filter=lambda record: record[\"level\"].name != LEVEL_CHAT_SAVE,\n            format=_level_format,\n            enqueue=True,\n            level=level,\n        )\n\n        logger.add(\n            path_chat_file,\n            filter=lambda record: record[\"level\"].name == LEVEL_CHAT_SAVE,\n            format=\"{message}\",\n            enqueue=True,\n            level=LEVEL_CHAT_SAVE,\n        )", "start_char_idx": 7052, "end_char_idx": 7764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37b97ad3-b2ce-4f4c-a125-4452bf591c31": {"__data__": {"id_": "37b97ad3-b2ce-4f4c-a125-4452bf591c31", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "804dfb73-92b1-4d7b-af32-ff1b357ae848", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7b8a037ccdf2d9518a4c0f25cbcf9d8d4ce0e9d47a61a994024a04e4e2104b2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d6dbef0-5517-456b-9e45-4151b6933b92", "node_type": "1", "metadata": {}, "hash": "ad018889d201cb4aa63c45d8deede0625e18371f1b649a6117116895118f0ae2", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Monitor for agentscope \"\"\"\n\nimport re\nimport sqlite3\nfrom abc import ABC\nfrom abc import abstractmethod\nfrom contextlib import contextmanager\nfrom typing import Optional, Generator\nfrom loguru import logger\n\nfrom agentscope.constants import (\n    _DEFAULT_MONITOR_TABLE_NAME,\n    _DEFAULT_SQLITE_DB_PATH,\n)", "start_char_idx": 0, "end_char_idx": 334, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d6dbef0-5517-456b-9e45-4151b6933b92": {"__data__": {"id_": "3d6dbef0-5517-456b-9e45-4151b6933b92", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37b97ad3-b2ce-4f4c-a125-4452bf591c31", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a24578de5553d2d52b63d420f4ef349ca6f71a13ffe6ae273c78ff1752084838", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9", "node_type": "1", "metadata": {}, "hash": "8f019e4aa9ce0b876451a98361bb1c311e7555642a4f2d84eaa6e2d94e65338f", "class_name": "RelatedNodeInfo"}}, "text": "class MonitorBase(ABC):", "start_char_idx": 337, "end_char_idx": 360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9": {"__data__": {"id_": "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d6dbef0-5517-456b-9e45-4151b6933b92", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4361a4f31fe5f3ac98c8a38bf79408dced21f7e5a7a5572ab0e0801e3a04b4f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "edd3eea1-0648-4eb2-bb44-3e050cb566ac", "node_type": "1", "metadata": {}, "hash": "bc7ed7de0eed2fdabbd8ff74440311204a0714e019b99ce909f4eaccb3ecd9bb", "class_name": "RelatedNodeInfo"}}, "text": "r\"\"\"Base interface of Monitor\"\"\"\n\n    @abstractmethod\n    def register(\n        self,\n        metric_name: str,\n        metric_unit: Optional[str] = None,\n        quota: Optional[float] = None,\n    ) -> bool:\n        \"\"\"Register a metric to the monitor with value initialized to 0.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric, must be unique.\n            metric_unit (`Optional[str]`):\n                Unit of the metric.\n            quota (`Optional[str]`):\n                The quota of the metric. An alert is triggered when metrics\n                accumulate above this value.\n\n        Returns:\n            `bool`: whether the operation success.\n        \"\"\"\n\n    @abstractmethod\n    def exists(self, metric_name: str) -> bool:\n        \"\"\"Determine whether a metric exists in the monitor.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `bool`: Whether the metric exists.\n        \"\"\"\n\n    @abstractmethod\n    def add(self, metric_name: str, value: float) -> bool:\n        \"\"\"Add value to a specific metric.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n            value (`float`):\n                Increased value.\n\n        Returns:\n            `bool`: whether the operation success.\n        \"\"\"", "start_char_idx": 365, "end_char_idx": 1705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edd3eea1-0648-4eb2-bb44-3e050cb566ac": {"__data__": {"id_": "edd3eea1-0648-4eb2-bb44-3e050cb566ac", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f98bb352be4db3cdf296cdf91d25b3e8a063a641d4cd1fda887149d77d6db8f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12312271-e20e-45e8-9568-70be0ceb63bd", "node_type": "1", "metadata": {}, "hash": "79c4307ef081f2345769dfb471a53a15548c24f950da9b5d025f4db442304623", "class_name": "RelatedNodeInfo"}}, "text": "def update(self, values: dict, prefix: Optional[str] = None) -> None:\n        \"\"\"Update multiple metrics at once.\"\"\"\n        for k, v in values:\n            self.add(get_full_name(prefix=prefix, name=k), v)\n\n    @abstractmethod\n    def clear(self, metric_name: str) -> bool:\n        \"\"\"Clear the values of a specific metric.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `bool`: whether the operation success.\n        \"\"\"\n\n    @abstractmethod\n    def remove(self, metric_name: str) -> bool:\n        \"\"\"Remove a specific metric from the monitor.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `bool`: Whether the operation success.\n        \"\"\"\n\n    @abstractmethod\n    def get_value(self, metric_name: str) -> Optional[float]:\n        \"\"\"Get the value of a specific metric.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `Optional[float]`: the value of the metric.\n        \"\"\"\n\n    @abstractmethod\n    def get_unit(self, metric_name: str) -> Optional[str]:\n        \"\"\"Get the unit of a specific metric.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `Optional[str]`: The unit of the metric.\n        \"\"\"", "start_char_idx": 1711, "end_char_idx": 3081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12312271-e20e-45e8-9568-70be0ceb63bd": {"__data__": {"id_": "12312271-e20e-45e8-9568-70be0ceb63bd", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "edd3eea1-0648-4eb2-bb44-3e050cb566ac", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4ca170bae745e0f2f76748c94461a21b98237031648abcf610be56454cebeb9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a932b89e-f63d-418e-9868-5072bf545742", "node_type": "1", "metadata": {}, "hash": "1d20137bfe7e5c1a1d1e9a5265bae1c1908801c3c0579a5f0613aaf6119ec571", "class_name": "RelatedNodeInfo"}}, "text": "@abstractmethod\n    def get_quota(self, metric_name: str) -> Optional[float]:\n        \"\"\"Get the quota of a specific metric.\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `Optional[float]`: The quota of the metric.\n        \"\"\"\n\n    @abstractmethod\n    def set_quota(self, metric_name: str, quota: float) -> bool:\n        \"\"\"Set the quota of a specific metric\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n            quota (`float`):\n                New quota of the metric.\n\n        Returns:\n            `bool`: whether the operation success.\n        \"\"\"\n\n    @abstractmethod\n    def get_metric(self, metric_name: str) -> Optional[dict]:\n        \"\"\"Get the specific metric\n\n        Args:\n            metric_name (`str`):\n                Name of the metric.\n\n        Returns:\n            `Optional[dict]`: A dictionary of metric with following format::\n\n                {\n                    metric_value: [float],\n                    metric_unit: [str],\n                    quota: [float]\n                }\n        \"\"\"", "start_char_idx": 3087, "end_char_idx": 4212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a932b89e-f63d-418e-9868-5072bf545742": {"__data__": {"id_": "a932b89e-f63d-418e-9868-5072bf545742", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12312271-e20e-45e8-9568-70be0ceb63bd", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "44109f3b5a42a8c7b0a1330eefa6084ecbb33f582cb88c383bcd623bcf3d46fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efb48786-3a84-40d9-b90a-b6226685f95a", "node_type": "1", "metadata": {}, "hash": "c804b7f279081394e7a141477c9c2f7f74c826d5a53dac6e200da774b62176cd", "class_name": "RelatedNodeInfo"}}, "text": "@abstractmethod\n    def get_metrics(self, filter_regex: Optional[str] = None) -> dict:\n        \"\"\"Get a dictionary of metrics.\n\n        Args:\n            filter_regex (`Optional[str]`):\n                Regular expression for filtering metric names, get all\n                metrics if not provided.\n\n        Returns:\n            `dict`: a dictionary of metric with following format::\n\n                {\n                    metric_name_A: {\n                        metric_value: [float],\n                        metric_unit: [str],\n                        quota: [float]\n                    },\n                    metric_name_B: {\n                        ...\n                    },\n                    ...\n                }\n        \"\"\"\n\n    @abstractmethod\n    def register_budget(\n        self,\n        model_name: str,\n        value: float,\n        prefix: Optional[str] = \"local\",\n    ) -> bool:\n        \"\"\"Register model call budget to the monitor, the monitor will raise\n        QuotaExceededError, when budget is exceeded.\n\n        Args:\n            model_name (`str`): model that requires budget.\n            value (`float`): the budget value.\n            prefix (`Optional[str]`, default `None`): used to distinguish\n                multiple budget registrations. For multiple registrations with\n                the same `prefix`, only the first time will take effect.\n\n        Returns:\n            `bool`: whether the operation success.\n        \"\"\"", "start_char_idx": 4218, "end_char_idx": 5673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efb48786-3a84-40d9-b90a-b6226685f95a": {"__data__": {"id_": "efb48786-3a84-40d9-b90a-b6226685f95a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a932b89e-f63d-418e-9868-5072bf545742", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "a6f347f74824b6715d5509166c93d680b1e1383b291321de9fad10be3683bbe0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f", "node_type": "1", "metadata": {}, "hash": "b2dfccd634edc242f304c71e1ade79c0ddd989adbd1f619b87dc499db0282f70", "class_name": "RelatedNodeInfo"}}, "text": "def get_full_name(name: str, prefix: Optional[str] = None) -> str:\n    \"\"\"Get the full name of a metric.\n\n    Args:\n        metric_name (`str`): name of a metric.\n        prefix (` Optional[str]`, default `None`): metric prefix.\n\n    Returns:\n        `str`: the full name of the metric\n    \"\"\"\n    if prefix is None:\n        return name\n    else:\n        return f\"{prefix}.{name}\"\n\n\nclass QuotaExceededError(Exception):\n    \"\"\"An Exception used to indicate that a certain metric exceeds quota\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n    ) -> None:\n        \"\"\"Init a QuotaExceedError instance.\n\n        Args:\n            name (`str`): name of the metric which exceeds quota.\n        \"\"\"\n        self.message = f\"Metric [{name}] exceeds quota.\"\n        self.name = name\n        super().__init__(self.message)\n\n\n@contextmanager\ndef sqlite_transaction(db_path: str, timeout: float = 30.0) -> Generator:\n    \"\"\"Get a sqlite transaction cursor.\n\n    Args:\n        db_path (`str`): path to the sqlite db file\n        timeout (`float`): timeout of the connection\n\n    Yields:\n        `Generator`: a cursor with transaction\n    \"\"\"\n    conn = sqlite3.connect(db_path, timeout=timeout)\n    cursor = conn.cursor()\n    try:\n        conn.execute(\"BEGIN\")\n        yield cursor\n        conn.commit()\n    except Exception as e:\n        conn.rollback()\n        raise e\n    finally:\n        cursor.close()\n        conn.close()", "start_char_idx": 5676, "end_char_idx": 7099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f": {"__data__": {"id_": "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efb48786-3a84-40d9-b90a-b6226685f95a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b93f2d36858ee1c751d53476910ae9130221a3141ca385e07d9279261a713435", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8827b22-784d-4aac-8166-ec21788a2373", "node_type": "1", "metadata": {}, "hash": "4681570f046aed05683d26996c255710184fddcc52d7ffd58309edb590248705", "class_name": "RelatedNodeInfo"}}, "text": "@contextmanager\ndef sqlite_cursor(db_path: str, timeout: float = 30.0) -> Generator:\n    \"\"\"Get a sqlite cursor.\n\n    Args:\n        db_path (`str`): path to the sqlite db file\n        timeout (`float`): timeout of the connection\n\n    Yields:\n        `Generator`: a cursor\n    \"\"\"\n    conn = sqlite3.connect(db_path, timeout=timeout)\n    cursor = conn.cursor()\n    try:\n        yield cursor\n    finally:\n        cursor.close()\n        conn.close()", "start_char_idx": 7102, "end_char_idx": 7548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8827b22-784d-4aac-8166-ec21788a2373": {"__data__": {"id_": "f8827b22-784d-4aac-8166-ec21788a2373", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f08724998030fe7bad6359177d0ef449c4543030e00d56651076d29d16f0494", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7634b5d-54db-412b-96c7-8a48464b5d5b", "node_type": "1", "metadata": {}, "hash": "66a75291f38487df80c05f3d11b722c604156e0325a8873e51fdfe124acab1cd", "class_name": "RelatedNodeInfo"}}, "text": "class SqliteMonitor(MonitorBase):", "start_char_idx": 7551, "end_char_idx": 7584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7634b5d-54db-412b-96c7-8a48464b5d5b": {"__data__": {"id_": "e7634b5d-54db-412b-96c7-8a48464b5d5b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8827b22-784d-4aac-8166-ec21788a2373", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "273e7474b758ddbdf0cf8a49c74ee5c3a30cba70ceae0910b59c8b209003e345", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2f0af91-762f-4e82-93c4-ad4055e99af5", "node_type": "1", "metadata": {}, "hash": "9b41bed6f2b0ecdb53527da3bbd70e0aac31df90cc8d405b3eaa9bf614c17270", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"A monitor based on sqlite\"\"\"\n\n    def __init__(\n        self,\n        db_path: str,\n        table_name: str = _DEFAULT_MONITOR_TABLE_NAME,\n        drop_exists: bool = False,\n    ) -> None:\n        \"\"\"Initialize a SqliteMonitor.\n\n        Args:\n            db_path (`str`): path to the sqlite db file.\n            table_name (`str`, optional): the table name used by the monitor.\n                Defaults to _DEFAULT_MONITOR_TABLE_NAME.\n            drop_exists (bool, optional): whether to delete the original table\n            when the table already exists. Defaults to False.\n        \"\"\"\n        super().__init__()\n        self.db_path = db_path\n        self.table_name = table_name\n        self._create_monitor_table(drop_exists)\n        logger.info(\n            f\"SqliteMonitor initialization completed at [{self.db_path}]\",\n        )", "start_char_idx": 7589, "end_char_idx": 8428, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2f0af91-762f-4e82-93c4-ad4055e99af5": {"__data__": {"id_": "c2f0af91-762f-4e82-93c4-ad4055e99af5", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7634b5d-54db-412b-96c7-8a48464b5d5b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "776c7aaa4226227922b81e1ed0471a96daa5c7eb34b1b9eb28e77c1e1d9bc48b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7199408f-96a3-4c2f-b5f0-519c98515fe0", "node_type": "1", "metadata": {}, "hash": "feecf39cddd922a859b506b1cad0d0e61c88112947290f05b096ac29b401255e", "class_name": "RelatedNodeInfo"}}, "text": "def _create_monitor_table(self, drop_exists: bool = False) -> None:\n        \"\"\"Internal method to create a table in sqlite3.\"\"\"\n        with sqlite_transaction(self.db_path) as cursor:\n            if drop_exists:\n                cursor.execute(f\"DROP TABLE IF EXISTS {self.table_name};\")\n            cursor.execute(\n                f\"\"\"\n                CREATE TABLE IF NOT EXISTS {self.table_name} (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    name TEXT UNIQUE NOT NULL,\n                    value REAL NOT NULL,\n                    quota REAL,\n                    unit TEXT\n                );\"\"\",\n            )\n            cursor.execute(\n                f\"\"\"\n                CREATE TRIGGER IF NOT EXISTS {self.table_name}_quota_exceeded\n                BEFORE UPDATE ON {self.table_name}\n                FOR EACH ROW\n                WHEN OLD.quota is not NULL AND NEW.value > OLD.quota\n                BEGIN\n                    SELECT RAISE(FAIL, 'QuotaExceeded');\n                END;\n                \"\"\",\n            )\n        logger.info(f\"Init [{self.table_name}] as the monitor table\")\n        logger.info(\n            f\"Init [{self.table_name}_quota_exceeded] as the monitor trigger\",\n        )", "start_char_idx": 8434, "end_char_idx": 9669, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7199408f-96a3-4c2f-b5f0-519c98515fe0": {"__data__": {"id_": "7199408f-96a3-4c2f-b5f0-519c98515fe0", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2f0af91-762f-4e82-93c4-ad4055e99af5", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7bd4de54ca8b3c60b9bc2ad8fb42aa87365c7b607120f116335e8340db5ae0d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81047be7-1ac8-426c-b634-6b6ae53fcd81", "node_type": "1", "metadata": {}, "hash": "84ae1179c1f22fdc81461d7d8dbbcdcd82f68f49c92271997cc600ae24cd6e7c", "class_name": "RelatedNodeInfo"}}, "text": "def register(\n        self,\n        metric_name: str,\n        metric_unit: Optional[str] = None,\n        quota: Optional[float] = None,\n    ) -> bool:\n        with sqlite_transaction(self.db_path) as cursor:\n            if self._exists(cursor, metric_name):\n                return False\n            cursor.execute(\n                f\"\"\"\n                INSERT INTO {self.table_name} (name, value, quota, unit)\n                VALUES (?, ?, ?, ?)\n                \"\"\",\n                (metric_name, 0.0, quota, metric_unit),\n            )\n            logger.info(\n                f\"Register metric [{metric_name}] to SqliteMonitor with unit \"\n                f\"[{metric_unit}] and quota [{quota}]\",\n            )\n            return True\n\n    def _add(\n        self,\n        cursor: sqlite3.Cursor,\n        metric_name: str,\n        value: float,\n    ) -> None:\n        try:\n            cursor.execute(\n                f\"\"\"\n                    UPDATE {self.table_name}\n                    SET value = value + ?\n                    WHERE name = ?\n                \"\"\",\n                (value, metric_name),\n            )\n        except sqlite3.IntegrityError as e:\n            raise QuotaExceededError(metric_name) from e\n\n    def add(self, metric_name: str, value: float) -> bool:\n        with sqlite_transaction(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return False\n            self._add(cursor, metric_name, value)\n            return True", "start_char_idx": 9675, "end_char_idx": 11164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81047be7-1ac8-426c-b634-6b6ae53fcd81": {"__data__": {"id_": "81047be7-1ac8-426c-b634-6b6ae53fcd81", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7199408f-96a3-4c2f-b5f0-519c98515fe0", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "fb331ec1e2371b58f131bcc8ffff646f567d003e8edb1f95be4884b433831981", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b261b107-fe89-4f1d-ba77-402c707ff2fb", "node_type": "1", "metadata": {}, "hash": "f58a6915b79f2a60ca8040167b84e1772187d167a169a934d2e582c3a2d89c99", "class_name": "RelatedNodeInfo"}}, "text": "def clear(self, metric_name: str) -> bool:\n        with sqlite_transaction(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return False\n            cursor.execute(\n                f\"\"\"\n                UPDATE {self.table_name}\n                SET value = value + ?\n                WHERE name = ?\n            \"\"\",\n                (0.0, metric_name),\n            )\n            return True\n\n    def remove(self, metric_name: str) -> bool:\n        with sqlite_transaction(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return False\n            cursor.execute(\n                f\"\"\"\n                DELETE FROM {self.table_name}\n                WHERE name = ?\"\"\",\n                (metric_name,),\n            )\n        return True\n\n    def _get_metric(self, cursor: sqlite3.Cursor, metric_name: str) -> dict:\n        cursor.execute(\n            f\"\"\"\n            SELECT value, quota, unit FROM {self.table_name}\n            WHERE name = ?\"\"\",\n            (metric_name,),\n        )\n        row = cursor.fetchone()\n        if row:\n            value, quota, unit = row\n            return {\n                \"value\": value,\n                \"quota\": quota,\n                \"unit\": unit,\n            }\n        else:\n            raise RuntimeError(f\"Fail to get metric {metric_name}\")", "start_char_idx": 11170, "end_char_idx": 12532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b261b107-fe89-4f1d-ba77-402c707ff2fb": {"__data__": {"id_": "b261b107-fe89-4f1d-ba77-402c707ff2fb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81047be7-1ac8-426c-b634-6b6ae53fcd81", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bd480b2e6737e9045e64dece32c3f343a7db27bc69a41a6ea6036eeca3b3653f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aef46b02-3de2-4c5e-9eea-a304a2eefb1b", "node_type": "1", "metadata": {}, "hash": "a005fed690f1148dea17d8c269d3eb8863ac3963a5e8a575d787692771f38f5a", "class_name": "RelatedNodeInfo"}}, "text": "def get_value(self, metric_name: str) -> Optional[float]:\n        with sqlite_cursor(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return None\n            metric = self._get_metric(cursor, metric_name)\n            return metric[\"value\"]\n\n    def get_quota(self, metric_name: str) -> Optional[float]:\n        with sqlite_cursor(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return None\n            metric = self._get_metric(cursor, metric_name)\n            return metric[\"quota\"]\n\n    def set_quota(self, metric_name: str, quota: float) -> bool:\n        with sqlite_transaction(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return False\n            cursor.execute(\n                f\"\"\"\n                UPDATE {self.table_name}\n                SET quota = ?\n                WHERE name = ?\n            \"\"\",\n                (quota, metric_name),\n            )\n            return True\n\n    def get_unit(self, metric_name: str) -> Optional[str]:\n        with sqlite_cursor(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return None\n            metric = self._get_metric(cursor, metric_name)\n            return metric[\"unit\"]", "start_char_idx": 12538, "end_char_idx": 13851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aef46b02-3de2-4c5e-9eea-a304a2eefb1b": {"__data__": {"id_": "aef46b02-3de2-4c5e-9eea-a304a2eefb1b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b261b107-fe89-4f1d-ba77-402c707ff2fb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "1425203151c56507560f49b7ced786e878a872b6fe0395238ac34905515a8748", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a769308-4cde-414f-adbc-143ad4885b75", "node_type": "1", "metadata": {}, "hash": "f5a861466c5e42277f7ee82d03c1850819257a105edcc8b23dd9959c17eae273", "class_name": "RelatedNodeInfo"}}, "text": "def get_metric(self, metric_name: str) -> Optional[dict]:\n        with sqlite_cursor(self.db_path) as cursor:\n            if not self._exists(cursor, metric_name):\n                return None\n            return self._get_metric(cursor, metric_name)\n\n    def get_metrics(self, filter_regex: Optional[str] = None) -> dict:\n        with sqlite_cursor(self.db_path) as cursor:\n            cursor.execute(f\"SELECT * FROM {self.table_name}\")\n            rows = cursor.fetchall()\n            metrics = {\n                row[1]: {\n                    \"value\": row[2],\n                    \"quota\": row[3],\n                    \"unit\": row[4],\n                }\n                for row in rows\n            }\n        if filter_regex is None:\n            return metrics\n        else:\n            pattern = re.compile(filter_regex)\n            return {\n                key: value\n                for key, value in metrics.items()\n                if pattern.search(key)\n            }\n\n    def _exists(self, cursor: sqlite3.Cursor, name: str) -> bool:\n        cursor.execute(\n            f\"\"\"\n            SELECT 1 FROM {self.table_name}\n            WHERE name = ? LIMIT 1\n        \"\"\",\n            (name,),\n        )\n        return cursor.fetchone() is not None\n\n    def exists(self, metric_name: str) -> bool:\n        with sqlite_cursor(self.db_path) as cursor:\n            return self._exists(cursor, metric_name)", "start_char_idx": 13857, "end_char_idx": 15255, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a769308-4cde-414f-adbc-143ad4885b75": {"__data__": {"id_": "2a769308-4cde-414f-adbc-143ad4885b75", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aef46b02-3de2-4c5e-9eea-a304a2eefb1b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "833637ad4308b493d37630cb083c3b2f4c82bb413f6ce4462058299efdd05a82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14368bd1-361a-4e67-888f-a348882dabd9", "node_type": "1", "metadata": {}, "hash": "ced5ac9676ce6a15dd0a1a3ba6cecef13afe7c608c6300d15e510119c1a08b62", "class_name": "RelatedNodeInfo"}}, "text": "def update(self, values: dict, prefix: Optional[str] = None) -> None:\n        with sqlite_transaction(self.db_path) as cursor:\n            for metric_name, value in values.items():\n                self._add(\n                    cursor,\n                    get_full_name(\n                        name=metric_name,\n                        prefix=prefix,\n                    ),\n                    value,\n                )\n\n    def _create_update_cost_trigger(\n        self,\n        token_metric: str,\n        cost_metric: str,\n        unit_price: float,\n    ) -> None:\n        with sqlite_transaction(self.db_path) as cursor:\n            cursor.execute(\n                f\"\"\"\n                CREATE TRIGGER IF NOT EXISTS\n                \"{self.table_name}_{token_metric}_{cost_metric}_price\"\n                AFTER UPDATE OF value ON \"{self.table_name}\"\n                FOR EACH ROW\n                WHEN NEW.name = \"{token_metric}\"\n                BEGIN\n                    UPDATE {self.table_name}\n                    SET value = value + (NEW.value - OLD.value) * {unit_price}\n                    WHERE name = \"{cost_metric}\";\n                END;\n                \"\"\",\n            )", "start_char_idx": 15261, "end_char_idx": 16440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14368bd1-361a-4e67-888f-a348882dabd9": {"__data__": {"id_": "14368bd1-361a-4e67-888f-a348882dabd9", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a769308-4cde-414f-adbc-143ad4885b75", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "6af855c947c9afa85aa57d0cee534e2290414b1fde7d585f40f1fc28430bf78d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a83ed123-77fe-4377-a3f0-f6ca8919102d", "node_type": "1", "metadata": {}, "hash": "2f84e20182e2605cb7af5cafb8d4093cb0e78d03169166d67750c7c6945e4e2a", "class_name": "RelatedNodeInfo"}}, "text": "def register_budget(\n        self,\n        model_name: str,\n        value: float,\n        prefix: Optional[str] = None,\n    ) -> bool:\n        logger.info(f\"set budget {value} to {model_name}\")\n        pricing = _get_pricing()\n        if model_name in pricing:\n            budget_metric_name = get_full_name(\n                name=\"cost\",\n                prefix=prefix,\n            )\n            ok = self.register(\n                metric_name=budget_metric_name,\n                metric_unit=\"dollor\",\n                quota=value,\n            )\n            if not ok:\n                return False\n            for metric_name, unit_price in pricing[model_name].items():\n                token_metric_name = get_full_name(\n                    name=metric_name,\n                    prefix=prefix,\n                )\n                self.register(\n                    metric_name=token_metric_name,\n                    metric_unit=\"token\",\n                )\n                self._create_update_cost_trigger(\n                    token_metric_name,\n                    budget_metric_name,\n                    unit_price,\n                )\n            return True\n        else:\n            logger.warning(\n                f\"Calculate budgets for model [{model_name}] is not supported\",\n            )\n            return False", "start_char_idx": 16446, "end_char_idx": 17760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a83ed123-77fe-4377-a3f0-f6ca8919102d": {"__data__": {"id_": "a83ed123-77fe-4377-a3f0-f6ca8919102d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14368bd1-361a-4e67-888f-a348882dabd9", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "993813782517bc3132d4bdd6dc3062a2a09dbc6e48899989deadc76acb4fba25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d875fdba-e2f9-45c7-888b-0d01b7952f0b", "node_type": "1", "metadata": {}, "hash": "8fb0b5a080068e1391ee7bbd6cfe39879f998ce3f5741cf2d0bfd069f84cb10a", "class_name": "RelatedNodeInfo"}}, "text": "def _get_pricing() -> dict:\n    \"\"\"Get pricing as a dict\n\n    Returns:\n        `dict`: the dict with pricing information.\n    \"\"\"\n    # TODO: get pricing from files\n    return {\n        \"gpt-4-turbo\": {\n            \"prompt_tokens\": 0.00001,\n            \"completion_tokens\": 0.00003,\n        },\n        \"gpt-4\": {\n            \"prompt_tokens\": 0.00003,\n            \"completion_tokens\": 0.00006,\n        },\n        \"gpt-4-32k\": {\n            \"prompt_tokens\": 0.00006,\n            \"completion_tokens\": 0.00012,\n        },\n        \"gpt-3.5-turbo\": {\n            \"prompt_tokens\": 0.000001,\n            \"completion_tokens\": 0.000002,\n        },\n    }", "start_char_idx": 17763, "end_char_idx": 18406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d875fdba-e2f9-45c7-888b-0d01b7952f0b": {"__data__": {"id_": "d875fdba-e2f9-45c7-888b-0d01b7952f0b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "91f8565562dab4eee5c329e2d2c6e15a382f205863625115c8a1cba27ea08cb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a83ed123-77fe-4377-a3f0-f6ca8919102d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "945dd2b393f150e755f7ca585ae5be7b9f544eb447e5dd2d399f4c0a81b57b8c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84d88e28-f775-4c68-b260-e9c36cde7d9c", "node_type": "1", "metadata": {}, "hash": "8b7ad7619a5e93912e370beda508969490ff470e590592a1f52f2e4421bd723f", "class_name": "RelatedNodeInfo"}}, "text": "class MonitorFactory:\n    \"\"\"Factory of Monitor.\n\n    Get the singleton monitor using::\n\n        from agentscope.utils import MonitorFactory\n        monitor = MonitorFactory.get_monitor()\n    \"\"\"\n\n    _instance = None\n\n    @classmethod\n    def get_monitor(\n        cls,\n        impl_type: Optional[str] = None,\n        db_path: str = _DEFAULT_SQLITE_DB_PATH,\n    ) -> MonitorBase:\n        \"\"\"Get the monitor instance.\n\n        Args:\n            impl_type (`Optional[str]`, optional): the type of monitor,\n                currently supports `sqlite` only.\n            db_path (`Optional[str]`, optional): path to the sqlite db file.\n\n        Returns:\n            `MonitorBase`: the monitor instance.\n        \"\"\"\n        if cls._instance is None:\n            if impl_type is None or impl_type.lower() == \"sqlite\":\n                cls._instance = SqliteMonitor(db_path=db_path)\n            else:\n                raise NotImplementedError(\n                    \"Monitor with type [{type}] is not implemented.\",\n                )\n        return cls._instance  # type: ignore[return-value]\n\n    @classmethod\n    def flush(cls) -> None:\n        \"\"\"\n        Only for unittest usage. Don't use this function in your code.\n        Flush the monitor singleton.\n        \"\"\"\n        cls._instance = None", "start_char_idx": 18409, "end_char_idx": 19698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84d88e28-f775-4c68-b260-e9c36cde7d9c": {"__data__": {"id_": "84d88e28-f775-4c68-b260-e9c36cde7d9c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d875fdba-e2f9-45c7-888b-0d01b7952f0b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "328a1f3da2e3e0957dbc5e7e3b09cf6171d351da85326dea2b055d16b1de2dc3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf", "node_type": "1", "metadata": {}, "hash": "7f424fa7fd9ac59df15eb59a2982cd6ab3d0dccecedeeebb96bc7a7930783414", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Token utils.\"\"\"\nfrom typing import Union\nfrom loguru import logger\n\ntry:\n    import tiktoken\nexcept ImportError:\n    tiktoken = None\n\n# TODO: obtain from web API and store it in `~/.cache`\nOPENAI_MAX_LENGTH = {\n    \"update\": 20231212,\n    # gpt-4\n    \"gpt-4-1106-preview\": 128000,\n    \"gpt-4-vision-preview\": 128000,\n    \"gpt-4\": 8192,\n    \"gpt-4-32k\": 32768,\n    \"gpt-4-0613\": 8192,\n    \"gpt-4-32k-0613\": 32768,\n    \"gpt-4-0314\": 8192,  # legacy\n    \"gpt-4-32k-0314\": 32768,  # legacy\n    # gpt-3.5\n    \"gpt-3.5-turbo-1106\": 16385,\n    \"gpt-3.5-turbo\": 4096,\n    \"gpt-3.5-turbo-16k\": 16385,\n    \"gpt-3.5-turbo-instruct\": 4096,\n    \"gpt-3.5-turbo-0613\": 4096,  # legacy\n    \"gpt-3.5-turbo-16k-0613\": 16385,  # deprecated on June 13th 2024\n    \"gpt-3.5-turbo-0301\": 4096,  # deprecated on June 13th 2024\n    \"text-davinci-003\": 4096,  # deprecated on Jan 4th 2024\n    \"text-davinci-002\": 4096,  # deprecated on Jan 4th 2024\n    \"code-davinci-002\": 4096,  # deprecated on Jan 4th 2024\n    # gpt-3 legacy\n    \"text-curie-001\": 2049,\n    \"text-babbage-001\": 2049,\n    \"text-ada-001\": 2049,\n    \"davinci\": 2049,\n    \"curie\": 2049,\n    \"babbage\": 2049,\n    \"ada\": 2049,\n}", "start_char_idx": 0, "end_char_idx": 1192, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf": {"__data__": {"id_": "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84d88e28-f775-4c68-b260-e9c36cde7d9c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "13fc457beb3a391c90182f3e274972a49d9c50d587f46a88f4f569a82951a2da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67620278-8aa4-4281-ae68-32449995ae10", "node_type": "1", "metadata": {}, "hash": "52912b9ef6f2dae6832cde58da69dbd733de973553b9dd8674d1997ee022a23c", "class_name": "RelatedNodeInfo"}}, "text": "def get_openai_max_length(model_name: str) -> int:\n    \"\"\"Get the max length of the OpenAi models.\"\"\"\n    try:\n        return OPENAI_MAX_LENGTH[model_name]\n    except KeyError as exc:\n        raise KeyError(\n            f\"Model [{model_name}] not found in OPENAI_MAX_LENGTH. \"\n            f\"The last updated date is {OPENAI_MAX_LENGTH['update']}\",\n        ) from exc", "start_char_idx": 1195, "end_char_idx": 1561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67620278-8aa4-4281-ae68-32449995ae10": {"__data__": {"id_": "67620278-8aa4-4281-ae68-32449995ae10", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "491aa281445dab398d7122c4bd7dc225bbe2d096e17ef5c583c7ea55607672b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69f9a21a-c7d2-41b5-bbfb-825558e802ac", "node_type": "1", "metadata": {}, "hash": "9fe807f4ffb087422ea1ffe9cac160071bffcaade2b6b687cb2ff8d29746191b", "class_name": "RelatedNodeInfo"}}, "text": "def count_openai_token(content: Union[str, list], model: str) -> int:\n    \"\"\"Count token in format of OpenAI API\"\"\"\n    if isinstance(content, str):\n        content = [content]\n    try:\n        encoding = tiktoken.encoding_for_model(model)\n    except KeyError:\n        logger.warning(\n            \"Warning: model not found. Using cl100k_base encoding.\",\n        )\n        encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n    if model in [\n        \"text-davinci-003\",  # deprecated on Jan 4th 2024,\n        \"text-davinci-002\",  # deprecated on Jan 4th 2024\n        \"code-davinci-002\",  # deprecated on Jan 4th 2024\n        # gpt-3 legacy\n        \"text-curie-001\",\n        \"text-babbage-001\",\n        \"text-ada-001\",\n        \"davinci\",\n        \"curie\",\n        \"babbage\",\n        \"ada\",\n    ]:\n        num_tokens = 0\n        for message in content:\n            if isinstance(message, dict):\n                raise NotImplementedError(\n                    f\"\"\"count_openai_token() is not implemented for\n                    model {model}. See\n                    https://github.com/openai/openai-python for\n                    information on how messages are converted to tokens.\"\"\",\n                )\n            num_tokens += len(encoding.encode(message))\n        return num_tokens\n    return num_tokens_from_content(content, model)", "start_char_idx": 1564, "end_char_idx": 2894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69f9a21a-c7d2-41b5-bbfb-825558e802ac": {"__data__": {"id_": "69f9a21a-c7d2-41b5-bbfb-825558e802ac", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67620278-8aa4-4281-ae68-32449995ae10", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "163d6b87bd0fa6ebb95d5bde6050791cf0dd5f90cb4d016c1a7da3d3f8e631fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b6d8a9c0-3a5d-4856-891b-fac5620ce746", "node_type": "1", "metadata": {}, "hash": "3216dcbf3bcdebf3a8b70e9304eed0c261407cad554a89e2828f18c8e0fe6fa5", "class_name": "RelatedNodeInfo"}}, "text": "def num_tokens_from_content(content: list, model: str) -> int:", "start_char_idx": 2897, "end_char_idx": 2959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6d8a9c0-3a5d-4856-891b-fac5620ce746": {"__data__": {"id_": "b6d8a9c0-3a5d-4856-891b-fac5620ce746", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69f9a21a-c7d2-41b5-bbfb-825558e802ac", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b477abf4df5e1373e8926eb6fe0aa1911e1c553e64fb6071c1cbf5d53141d75b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1", "node_type": "1", "metadata": {}, "hash": "e5cb4c78d0b8941e8ec4da182387f615f3e6b2cc59e68445f76e2def58baffb8", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Count token in format of OpenAI Chat API\"\"\"\n    # modified from https://github.com/openai/openai-cookbook/blob/main\n    # /examples/How_to_count_tokens_with_tiktoken.ipynb\n    try:\n        encoding = tiktoken.encoding_for_model(model)\n    except KeyError:\n        logger.warning(\n            \"Warning: model not found. Using cl100k_base encoding.\",\n        )\n        encoding = tiktoken.get_encoding(\"cl100k_base\")", "start_char_idx": 2964, "end_char_idx": 3381, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1": {"__data__": {"id_": "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6d8a9c0-3a5d-4856-891b-fac5620ce746", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "32e63a9009a4deaf22d9fb8e691e5d406614caf907c250fda683da917bde1ed9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3620ed3-801c-4075-8886-78393cb7d731", "node_type": "1", "metadata": {}, "hash": "396ac66b8af7c82ccd8fc250ee61f6810f173f444c811527eb317776657bbbd0", "class_name": "RelatedNodeInfo"}}, "text": "if model in {\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-16k-0613\",\n        \"gpt-4-0314\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-32k-0613\",\n    }:\n        tokens_per_message = 3\n        tokens_per_name = 1\n    elif model == \"gpt-3.5-turbo-0301\":\n        # every message follows <|im_start|>{role/name}\\n{\n        # content}<|im_end|>\\n\n        tokens_per_message = 4\n        # if there's a name, the role is omitted\n        tokens_per_name = -1\n    elif \"gpt-3.5-turbo\" in model:\n        logger.warning(\n            \"Warning: gpt-3.5-turbo may update over time. \"\n            \"Returning num tokens assuming \"\n            \"gpt-3.5-turbo-0613.\",\n        )\n        return num_tokens_from_content(content, \"gpt-3.5-turbo-0613\")\n    elif \"gpt-4\" in model:\n        logger.warning(\n            \"Warning: gpt-4 may update over time. Returning \"\n            \"num tokens assuming gpt-4-0613.\",\n        )\n        return num_tokens_from_content(content, \"gpt-4-0613\")\n    else:\n        raise NotImplementedError(\n            f\"\"\"num_tokens_from_content() is not implemented for model\n             {model}. See\n             https://github.com/openai/openai-python\n             for information on how messages are converted to tokens.\"\"\",\n        )\n    num_tokens = 0", "start_char_idx": 3387, "end_char_idx": 4674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3620ed3-801c-4075-8886-78393cb7d731": {"__data__": {"id_": "d3620ed3-801c-4075-8886-78393cb7d731", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "4f94c7c2393ccfc16eebc724124ca5921c7435f286028a5ef47145e1867059e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9d0b4ad895de4b3615afbbca906d5009207a909cfe2d106f876a19c04233f8ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a", "node_type": "1", "metadata": {}, "hash": "f492244f3bb86de48977d02e2f497e6eb44683956e0778b21fc0773c174723cd", "class_name": "RelatedNodeInfo"}}, "text": "for message in content:\n        if isinstance(message, str):\n            num_tokens += len(encoding.encode(message))\n        else:\n            num_tokens += tokens_per_message\n            for key, value in message.items():\n                num_tokens += len(encoding.encode(value))\n                if key == \"name\":\n                    num_tokens += tokens_per_name\n    # every reply is primed with <|start|>assistant<|message|>\n    num_tokens += 3\n    return num_tokens", "start_char_idx": 4679, "end_char_idx": 5148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a": {"__data__": {"id_": "88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "97a3df0cd4bc30a5c87d064f73baa1f2e5b2019d41d0954fc0afff42b81cac14", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3620ed3-801c-4075-8886-78393cb7d731", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "62be6b0add5e53306370e6ee496961a877bea6d74caf68068635d89b024a2aac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c5dc676-f5fd-4793-81a1-aaf1df727bae", "node_type": "1", "metadata": {}, "hash": "af590ca6c71fb69e312a2cf009c6934d0287ed1b92a33adb9492a6e877da2630", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\" Tools for agentscope \"\"\"\nimport base64\nimport datetime\nimport json\nimport secrets\nimport string\nfrom typing import Any, Literal\n\nfrom urllib.parse import urlparse\n\nimport requests\nfrom loguru import logger\n\n\ndef _get_timestamp(\n    format_: str = \"%Y-%m-%d %H:%M:%S\",\n    time: datetime.datetime = None,\n) -> str:\n    \"\"\"Get current timestamp.\"\"\"\n    if time is None:\n        return datetime.datetime.now().strftime(format_)\n    else:\n        return time.strftime(format_)\n\n\ndef to_openai_dict(item: dict) -> dict:\n    \"\"\"Convert `Msg` to `dict` for OpenAI API.\"\"\"\n    clean_dict = {}\n\n    if \"name\" in item:\n        clean_dict[\"name\"] = item[\"name\"]\n\n    if \"role\" in item:\n        clean_dict[\"role\"] = item[\"role\"]\n    else:\n        clean_dict[\"role\"] = \"assistant\"\n\n    if \"content\" in item:\n        clean_dict[\"content\"] = _convert_to_str(item[\"content\"])\n    else:\n        logger.warning(\n            f\"Message {item} doesn't have `content` field for \" f\"OpenAI API.\",\n        )\n\n    return clean_dict\n\n\ndef to_dialog_str(item: dict) -> str:\n    \"\"\"Convert a dict into string prompt style.\"\"\"\n    speaker = item.get(\"name\", None) or item.get(\"role\", None)\n    content = item.get(\"content\", None)\n\n    if content is None:\n        return str(item)\n\n    if speaker is None:\n        return content\n    else:\n        return f\"{speaker}: {content}\"", "start_char_idx": 0, "end_char_idx": 1375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c5dc676-f5fd-4793-81a1-aaf1df727bae": {"__data__": {"id_": "6c5dc676-f5fd-4793-81a1-aaf1df727bae", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "97a3df0cd4bc30a5c87d064f73baa1f2e5b2019d41d0954fc0afff42b81cac14", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f664ebd71f761c6e10063347b1cede5997d3bab9d9d4bd0352539a35f453596d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f64d1c6-8982-47b5-94c9-6d45de3bae21", "node_type": "1", "metadata": {}, "hash": "96d3f3678a0e6b316900c3a45132eb0e93386fe256c9990aea8fc491bc13b19f", "class_name": "RelatedNodeInfo"}}, "text": "def _guess_type_by_extension(\n    url: str,\n) -> Literal[\"image\", \"audio\", \"video\", \"file\"]:\n    \"\"\"Guess the type of the file by its extension.\"\"\"\n    extension = url.split(\".\")[-1].lower()\n\n    if extension in [\n        \"bmp\",\n        \"dib\",\n        \"icns\",\n        \"ico\",\n        \"jfif\",\n        \"jpe\",\n        \"jpeg\",\n        \"jpg\",\n        \"j2c\",\n        \"j2k\",\n        \"jp2\",\n        \"jpc\",\n        \"jpf\",\n        \"jpx\",\n        \"apng\",\n        \"png\",\n        \"bw\",\n        \"rgb\",\n        \"rgba\",\n        \"sgi\",\n        \"tif\",\n        \"tiff\",\n        \"webp\",\n    ]:\n        return \"image\"\n    elif extension in [\n        \"amr\",\n        \"wav\",\n        \"3gp\",\n        \"3gpp\",\n        \"aac\",\n        \"mp3\",\n        \"flac\",\n        \"ogg\",\n    ]:\n        return \"audio\"\n    elif extension in [\n        \"mp4\",\n        \"webm\",\n        \"mkv\",\n        \"flv\",\n        \"avi\",\n        \"mov\",\n        \"wmv\",\n        \"rmvb\",\n    ]:\n        return \"video\"\n    else:\n        return \"file\"", "start_char_idx": 1378, "end_char_idx": 2356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f64d1c6-8982-47b5-94c9-6d45de3bae21": {"__data__": {"id_": "1f64d1c6-8982-47b5-94c9-6d45de3bae21", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "97a3df0cd4bc30a5c87d064f73baa1f2e5b2019d41d0954fc0afff42b81cac14", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c5dc676-f5fd-4793-81a1-aaf1df727bae", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "338dcc53f4b2427110a03d8ab9352d15a144e23b7d0e02b8a1aa472854a82497", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4729d973-49d8-4c43-ae4d-bdf0d2ce68af", "node_type": "1", "metadata": {}, "hash": "cdbd6342a29a32998417012b215ac3380590a184ed1828fda200c929169456d7", "class_name": "RelatedNodeInfo"}}, "text": "def _to_openai_image_url(url: str) -> str:\n    \"\"\"Convert an image url to openai format. If the given url is a local\n    file, it will be converted to base64 format. Otherwise, it will be\n    returned directly.\n\n    Args:\n        url (`str`):\n            The local or public url of the image.\n    \"\"\"\n    # See https://platform.openai.com/docs/guides/vision for details of\n    # support image extensions.\n    image_extensions = (\n        \".png\",\n        \".jpg\",\n        \".jpeg\",\n        \".gif\",\n        \".webp\",\n    )\n\n    parsed_url = urlparse(url)\n\n    # Checking for HTTP(S) image links\n    if parsed_url.scheme in [\"http\", \"https\"]:\n        lower_path = parsed_url.path.lower()\n        if lower_path.endswith(image_extensions):\n            return url\n\n    # Check if it is a local file\n    elif parsed_url.scheme == \"file\" or not parsed_url.scheme:\n        if parsed_url.path.lower().endswith(image_extensions):\n            with open(parsed_url.path, \"rb\") as image_file:\n                base64_image = base64.b64encode(image_file.read()).decode(\n                    \"utf-8\",\n                )\n            extension = parsed_url.path.lower().split(\".\")[-1]\n            mime_type = f\"image/{extension}\"\n            return f\"data:{mime_type};base64,{base64_image}\"\n\n    raise TypeError(f\"{url} should be end with {image_extensions}.\")", "start_char_idx": 2359, "end_char_idx": 3695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4729d973-49d8-4c43-ae4d-bdf0d2ce68af": {"__data__": {"id_": "4729d973-49d8-4c43-ae4d-bdf0d2ce68af", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "97a3df0cd4bc30a5c87d064f73baa1f2e5b2019d41d0954fc0afff42b81cac14", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f64d1c6-8982-47b5-94c9-6d45de3bae21", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "734e66e25fd4cbc5c2563e6bce1840e0c4c7d85936d160b5fec18f9db2d1df44", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b833f9c-9dd3-407a-a499-bf77c15823cb", "node_type": "1", "metadata": {}, "hash": "b866db9b57d803d8d054e6c0c662af82eda19952f3a41a28ce9bfa88e46a8bd8", "class_name": "RelatedNodeInfo"}}, "text": "def _download_file(url: str, path_file: str, max_retries: int = 3) -> bool:\n    \"\"\"Download file from the given url and save it to the given path.\n\n    Args:\n        url (`str`):\n            The url of the file.\n        path_file (`str`):\n            The path to save the file.\n        max_retries (`int`, defaults to `3`)\n            The maximum number of retries when fail to download the file.\n    \"\"\"\n    for n_retry in range(1, max_retries + 1):\n        response = requests.get(url, stream=True)\n        if response.status_code == requests.codes.ok:\n            with open(path_file, \"wb\") as file:\n                for chunk in response.iter_content(1024):\n                    file.write(chunk)\n            return True\n        else:\n            logger.warning(\n                f\"Failed to download file from {url} (status code: \"\n                f\"{response.status_code}). Retry {n_retry}/{max_retries}.\",\n            )\n    return False\n\n\ndef _generate_random_code(\n    length: int = 6,\n    uppercase: bool = True,\n    lowercase: bool = True,\n    digits: bool = True,\n) -> str:\n    \"\"\"Get random code.\"\"\"\n    characters = \"\"\n    if uppercase:\n        characters += string.ascii_uppercase\n    if lowercase:\n        characters += string.ascii_lowercase\n    if digits:\n        characters += string.digits\n    return \"\".join(secrets.choice(characters) for i in range(length))", "start_char_idx": 3698, "end_char_idx": 5073, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b833f9c-9dd3-407a-a499-bf77c15823cb": {"__data__": {"id_": "4b833f9c-9dd3-407a-a499-bf77c15823cb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "97a3df0cd4bc30a5c87d064f73baa1f2e5b2019d41d0954fc0afff42b81cac14", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4729d973-49d8-4c43-ae4d-bdf0d2ce68af", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "093fb995c477c8f0d151196d6286165c081374e99b39658e6ea7066ce16e5599", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f516259a-afa5-4f47-97c0-079708ee4ed7", "node_type": "1", "metadata": {}, "hash": "d3e8499bf021e7c72a6714e80f260d0584902ce6ea991319362221d403928c96", "class_name": "RelatedNodeInfo"}}, "text": "def _is_json_serializable(obj: Any) -> bool:\n    \"\"\"Check if the given object is json serializable.\"\"\"\n    try:\n        json.dumps(obj)\n        return True\n    except TypeError:\n        return False\n\n\ndef _convert_to_str(content: Any) -> str:\n    \"\"\"Convert the content to string.\n\n    Note:\n        For prompt engineering, simply calling `str(content)` or\n        `json.dumps(content)` is not enough.\n\n        - For `str(content)`, if `content` is a dictionary, it will turn double\n        quotes to single quotes. When this string is fed into prompt, the LLMs\n        may learn to use single quotes instead of double quotes (which\n        cannot be loaded by `json.loads` API).\n\n        - For `json.dumps(content)`, if `content` is a string, it will add\n        double quotes to the string. LLMs may learn to use double quotes to\n        wrap strings, which leads to the same issue as `str(content)`.\n\n        To avoid these issues, we use this function to safely convert the\n        content to a string used in prompt.\n\n    Args:\n        content (`Any`):\n            The content to be converted.\n\n    Returns:\n        `str`: The converted string.\n    \"\"\"\n\n    if isinstance(content, str):\n        return content\n    elif isinstance(content, (dict, list, int, float, bool, tuple)):\n        return json.dumps(content, ensure_ascii=False)\n    else:\n        return str(content)", "start_char_idx": 5076, "end_char_idx": 6452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f516259a-afa5-4f47-97c0-079708ee4ed7": {"__data__": {"id_": "f516259a-afa5-4f47-97c0-079708ee4ed7", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 116, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "417ace96-490f-48b0-9640-21f139dd9daa", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 116, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "206a70daef75fdb06b31778d722ab01f6ad950e091f88c978af7554cc083a049", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b833f9c-9dd3-407a-a499-bf77c15823cb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e62cae24e21f929c701bb31f168ef457fc7f7c7210b7e47d90255d2b6dfe852", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1f167bc-9c85-4e9c-942f-e68eb19eea32", "node_type": "1", "metadata": {}, "hash": "ae981a836bfcbeae9e1d50ff84469948c88adc3bb20ad5761653ae48fda27550", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"Import all modules in the web ui package.\"\"\"\n\nfrom ._app import init\n\n__all__ = [\"init\"]", "start_char_idx": 0, "end_char_idx": 115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1f167bc-9c85-4e9c-942f-e68eb19eea32": {"__data__": {"id_": "d1f167bc-9c85-4e9c-942f-e68eb19eea32", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c6edc716498c728fe9765347c54b12785e53ccf363da5f90afca68092c9bf323", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f516259a-afa5-4f47-97c0-079708ee4ed7", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 116, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "bf7e891b149542e52f0f8c2ce1289dc12702223fad56199c7c661a0e12a013ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "544f8ac9-7de8-4f52-a36e-6b5856eb6d94", "node_type": "1", "metadata": {}, "hash": "36c9a37476bafa6c9194918bce38b3339d4858387be33e5c23c38929c6925f1b", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"The main entry point of the web UI.\"\"\"\nimport json\nimport os\n\nfrom flask import Flask, jsonify, render_template, Response\nfrom flask_cors import CORS\nfrom flask_socketio import SocketIO\n\napp = Flask(__name__)\nsocketio = SocketIO(app)\nCORS(app)  # This will enable CORS for all routes\n\n\nPATH_SAVE = \"\"\n\n\n@app.route(\"/getProjects\", methods=[\"GET\"])\ndef get_projects() -> Response:\n    \"\"\"Get all the projects in the runs directory.\"\"\"\n    cfgs = []\n    for run_dir in os.listdir(PATH_SAVE):\n        print(run_dir)\n        path_cfg = os.path.join(PATH_SAVE, run_dir, \".config\")\n        if os.path.exists(path_cfg):\n            with open(path_cfg, \"r\", encoding=\"utf-8\") as file:\n                cfg = json.load(file)\n                cfg[\"dir\"] = run_dir\n                cfgs.append(cfg)\n\n    # Filter the same projects\n    project_names = list({_[\"project\"] for _ in cfgs})\n\n    return jsonify(\n        {\n            \"names\": project_names,\n            \"runs\": cfgs,\n        },\n    )\n\n\n@app.route(\"/\")\ndef home() -> str:\n    \"\"\"Render the home page.\"\"\"\n    return render_template(\"home.html\")", "start_char_idx": 0, "end_char_idx": 1116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "544f8ac9-7de8-4f52-a36e-6b5856eb6d94": {"__data__": {"id_": "544f8ac9-7de8-4f52-a36e-6b5856eb6d94", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c6edc716498c728fe9765347c54b12785e53ccf363da5f90afca68092c9bf323", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1f167bc-9c85-4e9c-942f-e68eb19eea32", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "29539bbb6ee8e825c10426d40fc068e16681951714f3564cae6dda13e60c4507", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37149201-188e-4bba-8e9e-e14881220793", "node_type": "1", "metadata": {}, "hash": "e259e1a54a44b7ec2ab837f17216c29e1372b7dfa57f0d9986861142bd0e1f5d", "class_name": "RelatedNodeInfo"}}, "text": "@app.route(\"/run/<run_dir>\")\ndef run_detail(run_dir: str) -> str:\n    \"\"\"Render the run detail page.\"\"\"\n    path_run = os.path.join(PATH_SAVE, run_dir)\n\n    # Find the logging and chat file by suffix\n    path_log = os.path.join(path_run, \"logging.log\")\n    path_dialog = os.path.join(path_run, \"logging.chat\")\n\n    if os.path.exists(path_log):\n        with open(path_log, \"r\", encoding=\"utf-8\") as file:\n            logging_content = [\"\".join(file.readlines())]\n    else:\n        logging_content = None\n\n    if os.path.exists(path_dialog):\n        with open(path_dialog, \"r\", encoding=\"utf-8\") as file:\n            dialog_content = file.readlines()\n        dialog_content = [json.loads(_) for _ in dialog_content]\n    else:\n        dialog_content = []\n\n    path_cfg = os.path.join(PATH_SAVE, run_dir, \".config\")\n    if os.path.exists(path_cfg):\n        with open(path_cfg, \"r\", encoding=\"utf-8\") as file:\n            cfg = json.load(file)\n    else:\n        cfg = {\n            \"project\": \"-\",\n            \"name\": \"-\",\n            \"id\": \"-\",\n            \"timestamp\": \"-\",\n        }\n\n    logging_and_dialog = {\n        \"config\": cfg,\n        \"logging\": logging_content,\n        \"dialog\": dialog_content,\n    }\n\n    return render_template(\"run.html\", runInfo=logging_and_dialog)\n\n\n@socketio.on(\"connect\")\ndef on_connect() -> None:\n    \"\"\"Execute when a client is connected.\"\"\"\n    print(\"Client connected\")", "start_char_idx": 1119, "end_char_idx": 2522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37149201-188e-4bba-8e9e-e14881220793": {"__data__": {"id_": "37149201-188e-4bba-8e9e-e14881220793", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c6edc716498c728fe9765347c54b12785e53ccf363da5f90afca68092c9bf323", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "544f8ac9-7de8-4f52-a36e-6b5856eb6d94", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "67f6bb2539fd0ba490a8a4979e18582f885beb2bc88919990fc7fe0b896b7b20", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c307adb0-525e-497c-8e25-55f445c6f5f3", "node_type": "1", "metadata": {}, "hash": "0f20d8f3ed2b94b7c5cb11bfc5df1716b0dc9084a2fb403830486a08388d20a4", "class_name": "RelatedNodeInfo"}}, "text": "@socketio.on(\"disconnect\")\ndef on_disconnect() -> None:\n    \"\"\"Execute when a client is disconnected.\"\"\"\n    print(\"Client disconnected\")\n\n\ndef init(\n    path_save: str,\n    host: str = \"127.0.0.1\",\n    port: int = 5000,\n    debug: bool = False,\n) -> None:\n    \"\"\"Start the web UI.\"\"\"\n    global PATH_SAVE\n\n    if not os.path.exists(path_save):\n        raise FileNotFoundError(f\"The path {path_save} does not exist.\")\n\n    PATH_SAVE = path_save\n    socketio.run(\n        app,\n        host=host,\n        port=port,\n        debug=debug,\n        allow_unsafe_werkzeug=True,\n    )", "start_char_idx": 2525, "end_char_idx": 3101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c307adb0-525e-497c-8e25-55f445c6f5f3": {"__data__": {"id_": "c307adb0-525e-497c-8e25-55f445c6f5f3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37149201-188e-4bba-8e9e-e14881220793", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "595d18425a768eeddcea15c22f2dc5d4e5e1e207aa795a92b7c95ef679d8e099", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "583dc71a-44d7-4f49-b374-7f894f9df73b", "node_type": "1", "metadata": {}, "hash": "d99dbe390710138f9af303b3f5527edb64819142ee12b30dffbe3a975f26fdc1", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"run web ui\"\"\"\nimport argparse\nimport os\nimport sys\nimport threading\nimport time\nfrom collections import defaultdict\nfrom typing import Optional, Callable\nimport traceback\n\ntry:\n    import gradio as gr\nexcept ImportError:\n    gr = None\n\ntry:\n    import modelscope_studio as mgr\nexcept ImportError:\n    mgr = None\n\nfrom agentscope.web.studio.utils import (\n    send_player_input,\n    get_chat_msg,\n    SYS_MSG_PREFIX,\n    ResetException,\n    check_uuid,\n    send_msg,\n    generate_image_from_name,\n    audio2text,\n    send_reset_msg,\n    thread_local_data,\n)\n\nMAX_NUM_DISPLAY_MSG = 20\nFAIL_COUNT_DOWN = 30\n\n\ndef init_uid_list() -> list:\n    \"\"\"Initialize an empty list for storing user IDs.\"\"\"\n    return []\n\n\nglb_history_dict = defaultdict(init_uid_list)\nglb_signed_user = []\n\n\ndef reset_glb_var(uid: str) -> None:\n    \"\"\"Reset global variables for a given user ID.\"\"\"\n    global glb_history_dict\n    glb_history_dict[uid] = init_uid_list()", "start_char_idx": 0, "end_char_idx": 966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "583dc71a-44d7-4f49-b374-7f894f9df73b": {"__data__": {"id_": "583dc71a-44d7-4f49-b374-7f894f9df73b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c307adb0-525e-497c-8e25-55f445c6f5f3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c99c02d12ffa97d646f467e3ddbad2f40cbb2530d066572d2b5d03174d0f6067", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bbea61af-1b00-44ab-9a3e-2c7c731a2021", "node_type": "1", "metadata": {}, "hash": "21111d8076600bf55bbc54bc643da26326824b07092a8c2a3fd0c3c64a4925a2", "class_name": "RelatedNodeInfo"}}, "text": "def get_chat(uid: str) -> list[list]:\n    \"\"\"Retrieve chat messages for a given user ID.\"\"\"\n    uid = check_uuid(uid)\n    global glb_history_dict\n    line = get_chat_msg(uid=uid)\n    # TODO: Optimize the display effect, currently there is a problem of\n    #  output display jumping\n    if line:\n        glb_history_dict[uid] += [line]\n    dial_msg = []\n    for line in glb_history_dict[uid]:\n        _, msg = line\n        if isinstance(msg, dict):\n            dial_msg.append(line)\n        else:\n            # User chat, format: (msg, None)\n            dial_msg.append(line)\n    return dial_msg[-MAX_NUM_DISPLAY_MSG:]\n\n\ndef send_audio(audio_term: str, uid: str) -> None:\n    \"\"\"Convert audio input to text and send as a chat message.\"\"\"\n    uid = check_uuid(uid)\n    content = audio2text(audio_path=audio_term)\n    send_player_input(content, uid=uid)\n    msg = f\"\"\"{content}\n    <audio src=\"{audio_term}\"></audio>\"\"\"\n    send_msg(msg, is_player=True, role=\"Me\", uid=uid, avatar=None)\n\n\ndef send_image(image_term: str, uid: str) -> None:\n    \"\"\"Send an image as a chat message.\"\"\"\n    uid = check_uuid(uid)\n    send_player_input(image_term, uid=uid)\n\n    msg = f\"\"\"<img src=\"{image_term}\"></img>\"\"\"\n    avatar = generate_image_from_name(\"Me\")\n    send_msg(msg, is_player=True, role=\"Me\", uid=uid, avatar=avatar)", "start_char_idx": 969, "end_char_idx": 2279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bbea61af-1b00-44ab-9a3e-2c7c731a2021": {"__data__": {"id_": "bbea61af-1b00-44ab-9a3e-2c7c731a2021", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "583dc71a-44d7-4f49-b374-7f894f9df73b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "73a65c64728a399ebb26ea0c9d6e0f8544b763237a5203e0f2c81b70879d7235", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3", "node_type": "1", "metadata": {}, "hash": "d8a54eada30e29de09d02a270b14bb12cf64397866dd9a5811c0b465cc4cc984", "class_name": "RelatedNodeInfo"}}, "text": "def send_message(msg: str, uid: str) -> str:\n    \"\"\"Send a generic message to the player.\"\"\"\n    uid = check_uuid(uid)\n    send_player_input(msg, uid=uid)\n    avatar = generate_image_from_name(\"Me\")\n    send_msg(msg, is_player=True, role=\"Me\", uid=uid, avatar=avatar)\n    return \"\"\n\n\ndef fn_choice(data: gr.EventData, uid: str) -> None:\n    \"\"\"Handle a selection event from the chatbot interface.\"\"\"\n    uid = check_uuid(uid)\n    # pylint: disable=protected-access\n    send_player_input(data._data[\"value\"], uid=uid)", "start_char_idx": 2282, "end_char_idx": 2798, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3": {"__data__": {"id_": "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bbea61af-1b00-44ab-9a3e-2c7c731a2021", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "04e7bf380c2041baf1b388dd7f3bbe0c484919e8d53e16bbb8ff798791d8b5c4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25682b46-b908-4ef7-b8b5-c21f06c394a2", "node_type": "1", "metadata": {}, "hash": "495476092f8983b69c92b5243be57e91412116c023dd1df7231ba3556882dcaa", "class_name": "RelatedNodeInfo"}}, "text": "def import_function_from_path(\n    module_path: str,\n    function_name: str,\n    module_name: Optional[str] = None,\n) -> Callable:", "start_char_idx": 2801, "end_char_idx": 2931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25682b46-b908-4ef7-b8b5-c21f06c394a2": {"__data__": {"id_": "25682b46-b908-4ef7-b8b5-c21f06c394a2", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2a9b3c6a6601aec72e7a37359832beee69d636b0dcb67ba1b533380cfcbc743f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ea3d157-6746-47f8-803a-8da2bbbd3e7d", "node_type": "1", "metadata": {}, "hash": "c65ad706cfef6293e062590d94cd076506acca23f158580991d6e52becf84b76", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Import a function from the given module path.\"\"\"\n    import importlib.util\n\n    script_dir = os.path.dirname(os.path.abspath(module_path))\n\n    # Temporarily add a script directory to sys.path\n    original_sys_path = sys.path[:]\n    sys.path.insert(0, script_dir)\n\n    try:\n        # If a module name is not provided, you can use the filename (\n        # without extension) as the module name\n        if module_name is None:\n            module_name = os.path.splitext(os.path.basename(module_path))[0]\n        # Creating module specifications and loading modules\n        spec = importlib.util.spec_from_file_location(\n            module_name,\n            module_path,\n        )\n        if spec is not None:\n            module = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(module)\n            # Getting a function from a module\n            function = getattr(module, function_name)\n        else:\n            raise ImportError(\n                f\"Could not find module spec for {module_name} at\"\n                f\" {module_path}\",\n            )\n    except AttributeError as exc:\n        raise AttributeError(\n            f\"The module '{module_name}' does not have a function named '\"\n            f\"{function_name}'. Please put your code in the main function, \"\n            f\"read README.md for details.\",\n        ) from exc\n    finally:\n        # Restore the original sys.path\n        sys.path = original_sys_path\n\n    return function", "start_char_idx": 2936, "end_char_idx": 4400, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ea3d157-6746-47f8-803a-8da2bbbd3e7d": {"__data__": {"id_": "0ea3d157-6746-47f8-803a-8da2bbbd3e7d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25682b46-b908-4ef7-b8b5-c21f06c394a2", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "19751c924c26987695bb7d8225b1fe3e795ef7e1b7166fb4c8f4e1205d9c5772", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95f95432-996e-4cfd-910f-14088f608eff", "node_type": "1", "metadata": {}, "hash": "3abeab346d22443fec40baed540a1749fc7a28b954475585cc1d06ab5e64a860", "class_name": "RelatedNodeInfo"}}, "text": "# pylint: disable=too-many-statements", "start_char_idx": 4403, "end_char_idx": 4440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95f95432-996e-4cfd-910f-14088f608eff": {"__data__": {"id_": "95f95432-996e-4cfd-910f-14088f608eff", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ea3d157-6746-47f8-803a-8da2bbbd3e7d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "b400d240b340a18a07a853b21f442d73425a525c2de54919a83f7112f1b7e5e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac330bac-217b-43c0-b9da-0a983b84b0fb", "node_type": "1", "metadata": {}, "hash": "9451c9d1ce11c3ec6045fe82e56d1dd7cd671961df395b2b6cf64aa346ccb4c3", "class_name": "RelatedNodeInfo"}}, "text": "def run_app() -> None:", "start_char_idx": 4441, "end_char_idx": 4463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac330bac-217b-43c0-b9da-0a983b84b0fb": {"__data__": {"id_": "ac330bac-217b-43c0-b9da-0a983b84b0fb", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95f95432-996e-4cfd-910f-14088f608eff", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "0ed45d888bdb793d578c8ce92a717d689a5294111f833844a9b6763ce426e7aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6bc34ab1-e39a-4401-b379-75248ddb2b1d", "node_type": "1", "metadata": {}, "hash": "575c03c70cd96312229d0d4fc22dd9df0e8c04f3c470895c47c40a7b956c8fd5", "class_name": "RelatedNodeInfo"}}, "text": "\"\"\"Entry point for the web UI application.\"\"\"\n    assert gr is not None, \"Please install [full] version of AgentScope.\"\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"script\", type=str, help=\"Script file to run\")\n    args = parser.parse_args()\n\n    # Make sure script_path is an absolute path\n    script_path = os.path.abspath(args.script)\n\n    # Get the directory where the script is located\n    script_dir = os.path.dirname(script_path)\n    # Save the current working directory\n    # Change the current working directory to the directory where\n    os.chdir(script_dir)\n\n    def start_game(uid: str) -> None:\n        \"\"\"Start the main game loop.\"\"\"\n        thread_local_data.uid = uid\n        main = import_function_from_path(script_path, \"main\")\n\n        while True:\n            try:\n                main()\n            except ResetException:\n                print(f\"Reset Successfully\uff1a{uid} \")\n            except Exception as e:\n                trace_info = \"\".join(\n                    traceback.TracebackException.from_exception(e).format(),\n                )\n                for i in range(FAIL_COUNT_DOWN, 0, -1):\n                    send_msg(\n                        f\"{SYS_MSG_PREFIX} error {trace_info}, reboot \"\n                        f\"in {i} seconds\",\n                        uid=uid,\n                    )\n                    time.sleep(1)\n            reset_glb_var(uid)", "start_char_idx": 4468, "end_char_idx": 5870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bc34ab1-e39a-4401-b379-75248ddb2b1d": {"__data__": {"id_": "6bc34ab1-e39a-4401-b379-75248ddb2b1d", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac330bac-217b-43c0-b9da-0a983b84b0fb", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "811d21e33da84e15a298dc79f7b3238474da287178f55f7ffe97c343009ee781", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4edcf930-8b82-48cd-93bb-54270f4f433e", "node_type": "1", "metadata": {}, "hash": "80138d564dfd3bb119932213102c5711fddf257f0eb670cb5c98f3ad112d0272", "class_name": "RelatedNodeInfo"}}, "text": "def check_for_new_session(uid: str) -> None:\n        \"\"\"\n        Check for a new user session and start a game thread if necessary.\n        \"\"\"\n        uid = check_uuid(uid)\n        if uid not in glb_signed_user:\n            glb_signed_user.append(uid)\n            print(\"==========Signed User==========\")\n            print(f\"Total number of users: {len(glb_signed_user)}\")\n            run_thread = threading.Thread(\n                target=start_game,\n                args=(uid,),\n            )\n            run_thread.start()", "start_char_idx": 5876, "end_char_idx": 6401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4edcf930-8b82-48cd-93bb-54270f4f433e": {"__data__": {"id_": "4edcf930-8b82-48cd-93bb-54270f4f433e", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6bc34ab1-e39a-4401-b379-75248ddb2b1d", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "f15cef1a9b8abcf7a4c5efe68e9845c0e11e6c5837ffa4775828a82ed6b3c806", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae2f71dd-3b50-4d96-a29f-7379f561cb3c", "node_type": "1", "metadata": {}, "hash": "d19c547db00d0254239af21641e0fb63a947f43e47cab499dc4730539b355dfd", "class_name": "RelatedNodeInfo"}}, "text": "with gr.Blocks() as demo:", "start_char_idx": 6407, "end_char_idx": 6432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae2f71dd-3b50-4d96-a29f-7379f561cb3c": {"__data__": {"id_": "ae2f71dd-3b50-4d96-a29f-7379f561cb3c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4edcf930-8b82-48cd-93bb-54270f4f433e", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8b2f414a3a6e8e1eb253a8778af1a69b899d2581747a13247304b43d12fa070f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "09946359-af37-4958-accd-651e7fb242b8", "node_type": "1", "metadata": {}, "hash": "2cb20f8d790bc5ff81e17da3b5878ac32a704e6bb3252423b7ae6199b5c4e1c6", "class_name": "RelatedNodeInfo"}}, "text": "warning_html_code = \"\"\"\n                        <div class=\"hint\" style=\"text-align:\n                        center;background-color: rgba(255, 255, 0, 0.15);\n                        padding: 10px; margin: 10px; border-radius: 5px;\n                        border: 1px solid #ffcc00;\">\n                        <p>If you want to start over, please click the\n                        <strong>reset</strong>\n                        button and <strong>refresh</strong> the page</p>\n                        </div>\n                        \"\"\"\n        gr.HTML(warning_html_code)\n        uuid = gr.Textbox(label=\"modelscope_uuid\", visible=False)\n\n        with gr.Row():\n            chatbot = mgr.Chatbot(\n                label=\"Dialog\",\n                show_label=False,\n                bubble_full_width=False,\n                visible=True,\n            )\n\n        with gr.Column():\n            user_chat_input = gr.Textbox(\n                label=\"user_chat_input\",\n                placeholder=\"Say something here\",\n                show_label=False,\n            )\n            send_button = gr.Button(value=\"\ud83d\udce3Send\")", "start_char_idx": 6441, "end_char_idx": 7545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09946359-af37-4958-accd-651e7fb242b8": {"__data__": {"id_": "09946359-af37-4958-accd-651e7fb242b8", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae2f71dd-3b50-4d96-a29f-7379f561cb3c", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "2af3e4b1916fec825293e6561f8e1c71e045364419486639868f4475a4614cba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba59611b-d33a-4b01-8aec-36f60f2f0323", "node_type": "1", "metadata": {}, "hash": "871bc956406af9434f5b15176d9746ca592b73b0a08096d834fe43b7931107ad", "class_name": "RelatedNodeInfo"}}, "text": "with gr.Row():\n            audio = gr.Accordion(\"Audio input\", open=False)\n            with audio:\n                audio_term = gr.Audio(\n                    visible=True,\n                    type=\"filepath\",\n                    format=\"wav\",\n                )\n                submit_audio_button = gr.Button(value=\"Send Audio\")\n            image = gr.Accordion(\"Image input\", open=False)\n            with image:\n                image_term = gr.Image(\n                    visible=True,\n                    height=300,\n                    interactive=True,\n                    type=\"filepath\",\n                )\n                submit_image_button = gr.Button(value=\"Send Image\")\n        with gr.Column():\n            reset_button = gr.Button(value=\"Reset\")\n\n        # submit message\n        send_button.click(\n            send_message,\n            [user_chat_input, uuid],\n            user_chat_input,\n        )\n        user_chat_input.submit(\n            send_message,\n            [user_chat_input, uuid],\n            user_chat_input,\n        )\n\n        submit_audio_button.click(\n            send_audio,\n            inputs=[audio_term, uuid],\n            outputs=[audio_term],\n        )\n\n        submit_image_button.click(\n            send_image,\n            inputs=[image_term, uuid],\n            outputs=[image_term],\n        )\n\n        reset_button.click(send_reset_msg, inputs=[uuid])\n\n        chatbot.custom(fn=fn_choice, inputs=[uuid])", "start_char_idx": 7554, "end_char_idx": 8997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba59611b-d33a-4b01-8aec-36f60f2f0323": {"__data__": {"id_": "ba59611b-d33a-4b01-8aec-36f60f2f0323", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "09946359-af37-4958-accd-651e7fb242b8", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "7acb599ecbbe59efe429f5dd69da21904bfa005efaffe365cda520e6e81f4bef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e146c8ab-2115-46c0-b015-86576d9ed762", "node_type": "1", "metadata": {}, "hash": "6ffbb37459bf4714dac0b2c0cee6aafdf8e1fdc18671fcf3df82527e15223ea4", "class_name": "RelatedNodeInfo"}}, "text": "demo.load(\n            check_for_new_session,\n            inputs=[uuid],\n            every=0.5,\n        )\n\n        demo.load(\n            get_chat,\n            inputs=[uuid],\n            outputs=[chatbot],\n            every=0.5,\n        )", "start_char_idx": 9007, "end_char_idx": 9245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e146c8ab-2115-46c0-b015-86576d9ed762": {"__data__": {"id_": "e146c8ab-2115-46c0-b015-86576d9ed762", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba59611b-d33a-4b01-8aec-36f60f2f0323", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "645a70ed30e44d374b4de8d1281a0c51ad305834843ad17a589d9efe062be124", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "414952b7-9d42-4ca5-a5ce-ef1319d3c83b", "node_type": "1", "metadata": {}, "hash": "cd8c4c34fd93692da2eb1be074db27e04bdbd8cb5e352dafc397f5fd3e258c51", "class_name": "RelatedNodeInfo"}}, "text": "demo.queue()\n    demo.launch()\n\n\nif", "start_char_idx": 9250, "end_char_idx": 9285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "414952b7-9d42-4ca5-a5ce-ef1319d3c83b": {"__data__": {"id_": "414952b7-9d42-4ca5-a5ce-ef1319d3c83b", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9972308e2d0a276060ffd69a7fa19e785da6e955a55698c39822fcbc8df38d27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e146c8ab-2115-46c0-b015-86576d9ed762", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ebeade083162756a3ce645c4f2c0765bac46c82520ce5e96efafbf917911018c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4134abfc-88f6-4d93-9b3c-8b0cd4690cf1", "node_type": "1", "metadata": {}, "hash": "c06f1d8a106a8db5eaf0299e7c67a9a90b3d07b2cd72e0fba2d6acd9b74e3797", "class_name": "RelatedNodeInfo"}}, "text": "__name__ == \"__main__\":\n    run_app()", "start_char_idx": 9286, "end_char_idx": 9323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4134abfc-88f6-4d93-9b3c-8b0cd4690cf1": {"__data__": {"id_": "4134abfc-88f6-4d93-9b3c-8b0cd4690cf1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "414952b7-9d42-4ca5-a5ce-ef1319d3c83b", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c00cbd44919d72566e9b4d05d57ddfbb9da924ffbf9b1a783997543ed09e82f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee2a8775-cf99-4311-9ea9-3521030aafaf", "node_type": "1", "metadata": {}, "hash": "2e3eb3331e5b4fac7433c5d44a2d2a420886f5ebc9b810a3a5525568d7888444", "class_name": "RelatedNodeInfo"}}, "text": "# -*- coding: utf-8 -*-\n\"\"\"web ui utils\"\"\"\nimport os\nimport threading\nfrom typing import Optional\nimport hashlib\nfrom multiprocessing import Queue\nfrom queue import Empty\nfrom collections import defaultdict\n\nfrom PIL import Image\n\nfrom dashscope.audio.asr import RecognitionCallback, Recognition\n\nSYS_MSG_PREFIX = \"\u3010SYSTEM\u3011\"\n\nthread_local_data = threading.local()\n\n\ndef init_uid_queues() -> dict:\n    \"\"\"Initializes and returns a dictionary of user-specific queues.\"\"\"\n    return {\n        \"glb_queue_chat_msg\": Queue(),\n        \"glb_queue_user_input\": Queue(),\n        \"glb_queue_reset_msg\": Queue(),\n    }\n\n\nglb_uid_dict = defaultdict(init_uid_queues)\n\n\nd", "start_char_idx": 0, "end_char_idx": 657, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee2a8775-cf99-4311-9ea9-3521030aafaf": {"__data__": {"id_": "ee2a8775-cf99-4311-9ea9-3521030aafaf", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4134abfc-88f6-4d93-9b3c-8b0cd4690cf1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "9e2c83385ff8ef6600ec993d6c1db8e52c2f1fc32aa0bd657f7c5f6d8e922939", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b968c84-01ed-45f2-9007-04b1b7cb2a4f", "node_type": "1", "metadata": {}, "hash": "41b66c6780523d292210cb05ec5d482e631aa8ff96427c8d1a3ebcb43907e57a", "class_name": "RelatedNodeInfo"}}, "text": "ef send_msg(\n    msg: str,\n    is_player: bool = False,\n    role: Optional[str] = None,\n    uid: Optional[str] = None,\n    flushing: bool = False,\n    avatar: Optional[str] = None,\n    msg_id: Optional[str] = None,\n) -> None:\n    \"\"\"Sends a message to the web UI.\"\"\"\n    global glb_uid_dict\n    glb_queue_chat_msg = glb_uid_dict[uid][\"glb_queue_chat_msg\"]\n    if is_player:\n        glb_queue_chat_msg.put(\n            [\n                {\n                    \"text\": msg,\n                    \"name\": role,\n                    \"flushing\": flushing,\n                    \"avatar\": avatar,\n                },\n                None,\n            ],\n        )\n    else:\n        glb_queue_chat_msg.put(\n            [\n                None,\n                {\n                    \"text\": msg,\n                    \"name\": role,\n                    \"flushing\": flushing,\n                    \"avatar\": avatar,\n                    \"id\": msg_id,\n                },\n            ],\n        )\n\n\ndef get_chat_msg(uid: Optional[str] = None) -> list:\n    \"\"\"Retrieves the next chat message from the queue, if available.\"\"\"\n    global glb_uid_dict\n    glb_queue_chat_msg = glb_uid_dict[uid][\"glb_queue_chat_msg\"]\n    if not glb_queue_chat_msg.empty():\n        line = glb_queue_chat_msg.get(block=False)\n        if line is not None:\n            return line\n    return []\n\n\nd", "start_char_idx": 657, "end_char_idx": 2005, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b968c84-01ed-45f2-9007-04b1b7cb2a4f": {"__data__": {"id_": "0b968c84-01ed-45f2-9007-04b1b7cb2a4f", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee2a8775-cf99-4311-9ea9-3521030aafaf", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "07f34d06bff7cdf11b6146d9de1d32d4a00eeef04a59a1772db3efafab7b08ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1", "node_type": "1", "metadata": {}, "hash": "7ef9048c3ab4ddd981cd977024e4da383c7641a875a616ce4e2974eb14404f9f", "class_name": "RelatedNodeInfo"}}, "text": "ef send_player_input(msg: str, uid: Optional[str] = None) -> None:\n    \"\"\"Sends player input to the web UI.\"\"\"\n    global glb_uid_dict\n    glb_queue_user_input = glb_uid_dict[uid][\"glb_queue_user_input\"]\n    glb_queue_user_input.put([None, msg])\n\n\ndef get_player_input(\n    timeout: Optional[int] = None,\n    uid: Optional[str] = None,\n) -> str:\n    \"\"\"Gets player input from the web UI or command line.\"\"\"\n    global glb_uid_dict\n    glb_queue_user_input = glb_uid_dict[uid][\"glb_queue_user_input\"]\n\n    if timeout:\n        try:\n            content = glb_queue_user_input.get(block=True, timeout=timeout)[1]\n        except Empty as exc:\n            raise TimeoutError(\"timed out\") from exc\n    else:\n        content = glb_queue_user_input.get(block=True)[1]\n    if content == \"**Reset**\":\n        glb_uid_dict[uid] = init_uid_queues()\n        raise ResetException\n    return content\n\n\ndef send_reset_msg(uid: Optional[str] = None) -> None:\n    \"\"\"Sends a reset message to the web UI.\"\"\"\n    uid = check_uuid(uid)\n    global glb_uid_dict\n    glb_queue_reset_msg = glb_uid_dict[uid][\"glb_queue_reset_msg\"]\n    glb_queue_reset_msg.put([None, \"**Reset**\"])\n\n\nd", "start_char_idx": 2005, "end_char_idx": 3162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1": {"__data__": {"id_": "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b968c84-01ed-45f2-9007-04b1b7cb2a4f", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "83606d64828c9790d131916e7b5b5d2756ca3d5160d2fd3b5ea39d28d8618f2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75182db6-ff49-4f8f-8d8a-03346b266235", "node_type": "1", "metadata": {}, "hash": "ae520ac94e9e2c0e277ccbe74ee3ebe4152781a83ade6ff86d81332b77a1d055", "class_name": "RelatedNodeInfo"}}, "text": "ef get_reset_msg(uid: Optional[str] = None) -> None:\n    \"\"\"Retrieves a reset message from the queue, if available.\"\"\"\n    global glb_uid_dict\n    glb_queue_reset_msg = glb_uid_dict[uid][\"glb_queue_reset_msg\"]\n    if not glb_queue_reset_msg.empty():\n        content = glb_queue_reset_msg.get(block=True)[1]\n        if content == \"**Reset**\":\n            glb_uid_dict[uid] = init_uid_queues()\n            raise ResetException\n\n\nclass ResetException(Exception):\n    \"\"\"Custom exception to signal a reset action in the application.\"\"\"\n\n\ndef check_uuid(uid: Optional[str]) -> str:\n    \"\"\"Checks whether a UUID is provided or generates a default one.\"\"\"\n    if not uid or uid == \"\":\n        if os.getenv(\"MODELSCOPE_ENVIRONMENT\") == \"studio\":\n            import gradio as gr\n\n            raise gr.Error(\"Please login first\")\n        uid = \"local_user\"\n    return uid\n\n\nd", "start_char_idx": 3162, "end_char_idx": 4027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75182db6-ff49-4f8f-8d8a-03346b266235": {"__data__": {"id_": "75182db6-ff49-4f8f-8d8a-03346b266235", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "ab10ebe257aa33e294a75cd26926543cb511bc3e93a95d750052f5050e823cd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22f13fd2-1628-4cb6-a0b1-fdcbb241df1c", "node_type": "1", "metadata": {}, "hash": "eee41405038fede1da9cbba5cc32320bc93c3d3efa07b19518c9e8982c60500b", "class_name": "RelatedNodeInfo"}}, "text": "ef generate_image_from_name(name: str) -> str:\n    \"\"\"Generates an image based on the hash of the given name.\"\"\"\n    from agentscope.file_manager import file_manager\n\n    # Using hashlib to generate a hash of the name\n    hash_func = hashlib.md5()\n    hash_func.update(name.encode(\"utf-8\"))\n    hash_value = hash_func.hexdigest()\n\n    # Extract the first 6 characters of the hash value as the hexadecimal\n    # representation of the color\n    # generate a color value between #000000 and #ffffff\n    color_hex = \"#\" + hash_value[:6]\n    color_rgb = Image.new(\"RGB\", (1, 1), color_hex).getpixel((0, 0))\n\n    image_filepath = os.path.join(file_manager.dir_root, f\"{name}_image.png\")\n\n    # Check if the image already exists\n    if os.path.exists(image_filepath):\n        return image_filepath\n\n    # If the image does not exist, generate and save it\n    width, height = 200, 200\n    image = Image.new(\"RGB\", (width, height), color_rgb)\n\n    image.save(image_filepath)\n\n    return image_filepath\n\n\ndef audio2text(audio_path: str) -> str:\n    \"\"\"Converts audio file at the given path to text using ASR.\"\"\"\n    # dashscope.api_key = \"\"\n    callback = RecognitionCallback()\n    rec = Recognition(\n        model=\"paraformer-realtime-v1\",\n        format=\"wav\",\n        sample_rate=16000,\n        callback=callback,\n    )\n\n    result = rec.call(audio_path)\n    return \" \".join([s[\"text\"] for s in result[\"output\"][\"sentence\"]])\n\n\nd", "start_char_idx": 4027, "end_char_idx": 5449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22f13fd2-1628-4cb6-a0b1-fdcbb241df1c": {"__data__": {"id_": "22f13fd2-1628-4cb6-a0b1-fdcbb241df1c", "embedding": null, "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b6929b6-7aa2-41df-b674-a5cae732811b", "node_type": "4", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "8e7ea1a4acecb4d97f2ae0b3e7b609f51deb1045d01b6496eeb3e1f11fb0f436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75182db6-ff49-4f8f-8d8a-03346b266235", "node_type": "1", "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}, "hash": "c57504f2bf6b0ef91c8c68bc62c051fb98113243e854e99706068d03bba2b009", "class_name": "RelatedNodeInfo"}}, "text": "ef user_input(\n    prefix: str = \"User input: \",\n    timeout: Optional[int] = None,\n) -> str:\n    \"\"\"get user input\"\"\"\n    if hasattr(thread_local_data, \"uid\"):\n        content = get_player_input(\n            timeout=timeout,\n            uid=thread_local_data.uid,\n        )\n    else:\n        if timeout:\n            from inputimeout import inputimeout, TimeoutOccurred\n\n            try:\n                content = inputimeout(prefix, timeout=timeout)\n            except TimeoutOccurred as exc:\n                raise TimeoutError(\"timed out\") from exc\n        else:\n            content = input(prefix)\n    return content", "start_char_idx": 5449, "end_char_idx": 6068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"b90181d6-5d0a-4728-a99f-dba6c838927f": {"doc_hash": "9364e0f0b95c12adaf0051d2c4ec4986730bdc45f75c5ed8ca9434f0612c5d27", "ref_doc_id": "ee58de8c-9bd1-44f9-8050-b11ae4becf84"}, "6203898d-79ba-4717-b644-5e383e199383": {"doc_hash": "26823cb40b8344d218eb5b93a2d24ad9c62e4594bc5145ecfbd29c863e27592b", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "685f5bd0-da7b-4e4e-acf2-04c72953af5d": {"doc_hash": "c667aa266fb861c52d76a253ef9ccda7c72817bff6f0bcfb8f81397569d74935", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "94059751-1f0d-4cce-9791-2c827b80ccb6": {"doc_hash": "58ab2bfafb83faaae2b7d9485d3e2d39eec8b1244e2e231ba4a2ea3be2f06e77", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "f0a4d894-40e9-43d2-9101-7347efc4178f": {"doc_hash": "58ab2bfafb83faaae2b7d9485d3e2d39eec8b1244e2e231ba4a2ea3be2f06e77", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "4ec7c855-2891-433f-adfc-8cfacbba1dd1": {"doc_hash": "ac0e0846cd401e1afc646eaef6b1502c1fd3191510ff8616518cc21da4c4b231", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "1cc0ab32-2a57-432f-8843-284cb6fcffd8": {"doc_hash": "4c5e5924fd82185a851a99bd4c054981bb38f444518033306295f0c911cd4046", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "da31b48f-e804-437c-8447-7cd245e943f7": {"doc_hash": "1ebee8c3a079bd2a276b90c74849ceb035562028d01ab6aa91a71e4b1e5e0328", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "4162af9d-4105-4237-b4f7-218edd693250": {"doc_hash": "15620122c76413e1ae0653f3f8129ed6192f595ebf2dadd3c33abd9cf92075a9", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "fade3c74-1910-46ff-ab1e-a5f47d504aef": {"doc_hash": "a38832a2a1f0609c4ecefbc6a3f78bd9c151025f6ac33a4e92671159d76c3316", "ref_doc_id": "25e565ce-ddcf-4c26-bf75-cb911798642d"}, "661526b0-5cbd-4c79-9621-b5752a7d1bab": {"doc_hash": "a7b6678808e6c75499a76aec151f1ac2a269509559966444425ef62bf25facf6", "ref_doc_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4"}, "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793": {"doc_hash": "956800cca4a5f74f23cafcc7527c19e6e7a3930c97697090a73d75aa6e7ad777", "ref_doc_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4"}, "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1": {"doc_hash": "38f32e9316c6107ad731f6c997420b7eb9c3a54f90e4cad64fc98318bb8a649a", "ref_doc_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4"}, "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6": {"doc_hash": "5e8ceeca56ed72524e24bbc698f91349ca429eb105379bb50f9eb5f0b815f0f9", "ref_doc_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4"}, "b741fff9-9940-4cf6-a08f-427c5e301490": {"doc_hash": "ba5cf4c7092e193cb836e35dd6bee67b51a318fdff5aa094bc993e0ece81bdb3", "ref_doc_id": "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4"}, "4ae0256b-0a60-4326-9492-e6f2c1cdf428": {"doc_hash": "d479247b50ba168b5bfe411ee788279d4a7c799db783df6a857e3bb61c0dec77", "ref_doc_id": "9a015b58-6ff6-4070-8e9c-6864c045b1a7"}, "be88e1ef-062c-4fef-ba7e-4eb79ba17f67": {"doc_hash": "8087a54ba5c2447ac2c267b7ef08b38b365d7fb750c27a05513e66b61abb7d93", "ref_doc_id": "83fef82a-3aae-47cf-ae23-9953c81577c6"}, "c9043f76-a28e-46ce-8550-6797ae689b34": {"doc_hash": "6fa058652d27e113908a71738582897ecc2ffd102996c28ca9e88b06a87eac71", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "6b48afb9-884a-4c7d-bf19-f7398d22c63d": {"doc_hash": "d6da6aaefdb99be0652f431b040d85b146e2bd22d7094d574cf6b40ea175ad3e", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "218269a3-6391-407b-aaf7-4749c02c96af": {"doc_hash": "80c5484ddcb167bfd53656579deb4178b0cd5d268d6b43d3b28f335972165f0d", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087": {"doc_hash": "6b2d6d35ce95bced612166bef8a239ba54bd22f8acbcb92104240b0ed09be2ea", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "da292a6f-6839-4bfb-8d5c-637bbe48695b": {"doc_hash": "ddb697ae1192ddd6876585d9931dfdcf731588854ee59691d67c03ee2880f522", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "c9b4be0a-7d01-4c0d-828a-b2608edc69ca": {"doc_hash": "d5873e62d85dba408b8bde0b84754ed6c63daccdfe40909f0625f7d17674c214", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "84e729da-705c-4471-93cf-f270d1a268e8": {"doc_hash": "eb306e41cc3bc8202f2ceb5a87264152b2c489e4abcc32dc7a271067dac6ab5d", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "7248a7ab-b1dc-46a1-b18d-ba50da379c4f": {"doc_hash": "ab5a632943d3ec1fcb80ac3a45edf0f6a13519cc81424cdcac58ff22152c091c", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e": {"doc_hash": "c14c0a2f628224e30d03dd84d69a86ca59ddf71f7bb8145c1fece377b2d1ee6e", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "f2924ab7-385a-4056-9c54-8caaad86ad00": {"doc_hash": "42152003f41a26607301b7743a10ceac3d81ae1347ec4b1a260797a41123b6d7", "ref_doc_id": "74aa97ca-71d8-448c-a263-f01176910ea4"}, "bab0f365-9f49-4cc9-b8c4-e49d78ea6658": {"doc_hash": "4b587e586b87c74ec5c9015c06fcc49e4e6878b851f40b3c914c4c18c73676e9", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "b1ab4667-3ba5-473a-96d6-02dde0988f7e": {"doc_hash": "09e3f2ceb376add034dc67289f8d2398d0b58765109bcec221396911dd318085", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "a9ce2f2b-9fe5-408d-9840-016378649119": {"doc_hash": "8e133420eb30cc7ca4053d2a3ba0c0792cf6e238992f5f8210c4c21038ede9c2", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "382c58a5-44a0-40f5-8f3f-efcf44ed1298": {"doc_hash": "998699f9cbd47fd3af4d09e08e355d0398312ddc7e4623c5a0009d275895b147", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "baf690d5-47c8-4346-9e8a-a88326507b87": {"doc_hash": "797e4b8259b212dc28315bad32fa219ad7653766e9c211e659141517a78070e8", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "a537cefa-75c2-4e19-9d2f-946b48e76a12": {"doc_hash": "31eead234a01c0903599b814631442cc0f49a7120ac8608c69cf6e8e8a6af725", "ref_doc_id": "3fa5776d-5a4f-48a1-a8f2-ef415c122bac"}, "54b07793-0bc9-4dd1-b376-ecdc5f65695f": {"doc_hash": "b02a29cb7a77f03f8b4afd5a128176d618828f27ba376129e7c0fa04c0de706e", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "a8b7a360-e872-4498-8d6a-554fdefa5c82": {"doc_hash": "de698a881095756af7dc194928b6b89b9a1012e768502692e8cf239683eccba5", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "33244bee-93e4-4d4e-b1a7-68c303f04b75": {"doc_hash": "7912873643d71cdae813c8167fbf23490fd2d8b7fcbe0e86a5f2948848a2c44b", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "3509d152-f601-413c-b64b-9df5918a9970": {"doc_hash": "b41229ba95e6dccb0fb86a0f80769e82a4355a609e2238f9bc3105eafe930d52", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "72b2c525-7c4b-4812-a75c-11cefae2a507": {"doc_hash": "51601b1700b4597c55248947866165234a7655f94becf696795be244b2c594b3", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "47c5a56d-ea18-4837-a175-79d58f7ad9e0": {"doc_hash": "51601b1700b4597c55248947866165234a7655f94becf696795be244b2c594b3", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "cb647b88-eb78-44d4-97c3-48deca1b1846": {"doc_hash": "cbcedb5780091610a9347c6cf6df48ee7ceb742827ad2477077c83be07bddee8", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "8fd9fcff-22f7-4b88-9d9e-095370b28679": {"doc_hash": "4efa5d8bdff19db51e23f9f871ae1fe76dc4c85d762cb0f762b1d6093678d758", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "a674bd3e-8894-4781-93b4-eda776f903e5": {"doc_hash": "c16272ec9112265e2f4e0468d207d95743a50cfd7ac4c96e459d43c15386e64d", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "e60c9422-bbe2-4468-bb36-4b10299dde38": {"doc_hash": "35900a8191a1befdd8ff3cf3557c9447c1c8fd1e81da2acba6801d3be41cadaa", "ref_doc_id": "49a8e97f-9f1f-44af-90ff-b02dce1e0a24"}, "1799e18c-0d7c-418b-98bc-31d9b0c258a9": {"doc_hash": "b5c7ba17cef82d21ecf969f843dc2b5e64203df6de60e371f8c3b01a86f1072d", "ref_doc_id": "c21e103f-8669-4b5d-aaf7-b86f4035ad06"}, "e5e54b55-7461-4605-ab93-e262cb4cb636": {"doc_hash": "a93c02d34584f40d6671c40e900717d81899a3ba0487fecf8705cc1e3b8f4daa", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "f3f69594-2249-45d4-8f69-7efd2cd54c8c": {"doc_hash": "1985599ebce38806e1dc848f101466a2364d27b805aa6a902066795f81c307a6", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc": {"doc_hash": "484e24fae6bc3e3cfe02b4252edce8c530b2af5c97190964634b2edee7af3eaf", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "2e202262-89e8-44d0-9bc4-0918fd71171d": {"doc_hash": "e4805d9448f9da9807e7f0db7c2ce113aa9d6a1a24f85b76c38da4139b9373d7", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "46574ed9-f63d-4f66-948b-ab552db74bfe": {"doc_hash": "8523fc1f64154af4ebc71c1d9a6f6d585b59bff4e99eeca69af3a9e3ed347dba", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "4691c874-261a-435f-b00f-6527dbf70577": {"doc_hash": "2d58d3c77f4db6af02f3074823a0e3e1e492f3e97b08f2b625f58c14caa8bee0", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "3f5db5f2-ab0b-4e84-8075-21aa02174977": {"doc_hash": "7ca9123b727e3ada5639ccbf85ee47a01f597b1ee1446ff3559b6502f29496d5", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "dab05d0e-801b-4004-9e29-808ce1cdbea2": {"doc_hash": "6e4f491930e85608014b6c24cc7b0a055544f387fdcb93655ad7baf3302949c8", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4": {"doc_hash": "52fbefa93556b16243f8904c890cff986cbc7176100e15789790bf01413cb7b0", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "258bb81f-ccf0-42de-aa7a-78c0841d361d": {"doc_hash": "252bc62e7e3d8ad313656f799ee6309e80d8fe997641991fbac49757ba71f8df", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "5a0d612b-b0c2-4bcf-936f-2377851266ee": {"doc_hash": "6b9d935234d07b694fda45bfea33fd6b2904948aea539fd5e145e32b27212e93", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "096977be-93b2-4d60-b93c-0fae3be1a340": {"doc_hash": "b3d34500002ec9724bd2ce9396c516e9f0ba7099220f05ae3756c3642363fb16", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "4741fec3-d4f8-49fb-bd96-34e659f782ea": {"doc_hash": "2d2a1e19bbef6585698db80a6c040d2bb94722ccf24dcd19ed7e1f57c8e57ad3", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9": {"doc_hash": "df00b7c6ce373a3c33d6edc7995c3ff0dce7bd7c274199763e066a58263fdc77", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "112db4fa-f445-445a-aacb-676e3721f544": {"doc_hash": "b0a49754b3d91c0b91bb4e080f43ff04f7d0796d37882c5c25ae0680b8f1a201", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "4c464b44-56a0-420a-a837-e162af077046": {"doc_hash": "aea0af9a88cf9dd464476452c5425b35fa27a0ccbffc144bba7e3b7982bc7fbf", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9": {"doc_hash": "8fe7bbf6c6951d87dbd18a4b4332bdbafe8b4a392ac91c551b8830a6daef0b14", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "9d202763-13ba-4eff-bdaa-8fd42ad5187a": {"doc_hash": "88d7868b93acb34018e5228cebae79b12a0e2a399695618bcb2eee69f372f76a", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "8647b94c-9ea1-445a-9387-9bee64b249f5": {"doc_hash": "4837fa9fdcada13925126fe731871fac0003da9d80586f51b5dc230dbb2684b7", "ref_doc_id": "b7032ef0-472a-46e0-98ef-91f32bae93b0"}, "f3dc408e-78ab-461e-ae75-531e0f50b91b": {"doc_hash": "1d223ead2795de5b354d6cc3395b9b7a7537b3c2d881b488224a4ce1fcc5ba01", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b": {"doc_hash": "fe07708bb415fb9a226fd3396653d775300086c243f8df55dcdaf22a8c9f8eea", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86": {"doc_hash": "3c223f373645a637ddbe0cafac4753ee662451ae28a262be75bf0f855078c1b4", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "0abec0b1-757d-4164-a97b-802dca884a65": {"doc_hash": "0dde501c3d54c323f95736f91fe770145e14b75a225c4f9eeccde60658e0f92a", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "1050cb4f-c875-4aa1-bb9a-45afb0afe663": {"doc_hash": "35afe5e4d0bc970a6a366c5bd90727192e60b38837860bed9e67eefdd9c34e2c", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "a595f6eb-ae63-492f-bb13-d63d073f877c": {"doc_hash": "35afe5e4d0bc970a6a366c5bd90727192e60b38837860bed9e67eefdd9c34e2c", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "0e467c41-6572-49d1-a926-b71bd24a6c64": {"doc_hash": "93c7d731e8422fa79f52bd189e98608a2dd7f30093a734c26e832a999e9d115f", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "7da0025f-e402-4b26-a1a1-b66d046f727a": {"doc_hash": "476d7c914e9cb7a5b0dd8f657f1f915613e6e9c4fa26abd527aa7d96c2a5ceae", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "f707b04c-f27e-4e19-8df4-d0d3370144bf": {"doc_hash": "f5a35baeff7041f944b110687cdf64f1d617dfe6bcc85f5a45104c2cf7f16d3c", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "763a9a82-9b19-44eb-be3d-76b4857beabe": {"doc_hash": "902e4eeb0c7cda74c8272444beb2ecb14e484d4620e817e61a90135dcb61bd6e", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "56dacfc3-3ff3-4b59-b322-01b52adcf5a0": {"doc_hash": "2edf7825e3c27e3ec4701b3abba61236ea30bdded30bb809182baa8d2f1af92b", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "9661b907-8a09-44ab-88a5-f12fbac1cf8f": {"doc_hash": "a7e2d6e55b40b480f0dfd675b589e36fe81c0c2ea6691db054e91f0e02ce2b01", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "53152c00-0897-461a-a748-f78db2379fa8": {"doc_hash": "78d8a8b727af7aa64b003c133b035f34e7b1d74131b5b64af1ba3c7388b0c6ef", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "ef2ede42-35ff-4b97-8c11-775f02b553cc": {"doc_hash": "a7eba76494cb69922755238e69a51c162ffdbaee305553018a5be5fced1c63e7", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "c59ef9b0-3456-4e93-b54c-645259c70c9b": {"doc_hash": "22eb6a8df953c8fced37a5c92e280970506490e8395f913ff8a0a016f3c62856", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "4e6eda6c-6f1e-4a0b-9521-52ccec226f93": {"doc_hash": "17d349a7ed0aa6a4acd247a3df4583df0a45dc43d17bf6a6a1d0f9ebca567613", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "441b007b-7232-4b91-a629-f6add264998b": {"doc_hash": "9a7e6513127e9b415a2a4e0e64e5b341fbbf2e70b98e76afc1f4f80dc6996eca", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "df4a1682-029c-442b-9c19-d9329e74b2b6": {"doc_hash": "d4d1bb35b7a661aa4452a508821c4e03ad4ab4fc74783e2319bab6f47515dbc3", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "1e95ecf6-1741-43de-97d1-3a28acfb77a7": {"doc_hash": "0aed99e1d3e65718e6f448a3e0590dc581cec1848f8e77b730804ddae67b4519", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "5f53bdb4-2d58-4885-b48b-118fe9074db6": {"doc_hash": "fc384c591e2e8953647e9082fbf7575bd77d3cc502e9de2c10185fee6a9a2335", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "0c2837e6-c149-4636-965b-55948c8186fe": {"doc_hash": "301639ed3a7f4a4b710fc19041f3a3dfae7a7dee133715d2af04286b5ab76306", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "1c1af76f-e13c-46db-9b3b-cf0279e91df7": {"doc_hash": "7908bd17d851a2b749eeedfa49e46c6fb3a26683ebb7d579180d57c1eccb1f7b", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "f3b98729-6857-4d3e-b192-21171cfba6fb": {"doc_hash": "42f27465e4c183b30307640fe9e7ed0c9bbb70d6f2682154cc3989fbbc640f8e", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "db62a88d-da0d-41c4-8fb3-82c96aede40a": {"doc_hash": "3e91755a76bf3e9f8c301599583d65c2d83e4f313b06a4354e364ca7807d3889", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "451c9af4-c08d-4da7-a2b7-d3c9821c615b": {"doc_hash": "9968d29a80ca82497a3622f0075c233207cb8eccb85b96954736e6960be7ac03", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "a06f2471-44c6-4937-ba75-123a14fbcba0": {"doc_hash": "4545194d2634271de5ed0aa3570d8a753005c7614884ba9725d2058a5fa84dfe", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "ab19c48a-a921-43d4-8ca1-f1906bea2fac": {"doc_hash": "63240f2a01ce6af7be464981fe840655c7e7826f812cf32f142e5bb626d4d7b9", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "235d2fde-d4d1-486f-9900-8d108ac7973f": {"doc_hash": "4c14d15eee15d5bedb9c45a2899bf37406a30262358cf4c14fd5e3d9ed38cf40", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "7f0b2f50-aba4-41dd-b83a-1576e3c87c02": {"doc_hash": "fc70a59fa211c3846dd01cfdca1cd1fa99ec2d2c03afdfa3b882a89aba86a952", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "be91ba27-2442-4949-9dc6-8e01ef1fe156": {"doc_hash": "1c626ed1bd687df5441c9663ffb44a3a14187960b1e8ae9f3ff468683256f424", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00": {"doc_hash": "074d8f0ec00ba536485001ed24e54803983bf2a21588bf5f23fad78e7351a335", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "422f1889-118d-41a3-b160-1567f06b4b56": {"doc_hash": "69edac924ca2b584ff2e0ffa57f64430c64921a1e769b47073d871b22dd9f5de", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "0aa0593d-011d-4c4e-b603-16d5d8afc1c7": {"doc_hash": "5731512fd0af7076f5e29b33a1244ffc458c2f91543b6e53a1d05a9f16e7d86a", "ref_doc_id": "8be03a0a-c290-44a9-9c17-2b31fd6ca86b"}, "b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d": {"doc_hash": "431ab45ec6f98c1daf1daa25dc3bdfa89747fb9e53d165de6e2e7e353599af0f", "ref_doc_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df"}, "23f15c9d-9966-4040-ba8b-c3b7fb273377": {"doc_hash": "287f7562d7c62d47483fad56ffd793c55a2ab7c15fbd2b18b5c1fe3fa38133d8", "ref_doc_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df"}, "8b5a9ccc-df53-40b5-a358-b37de987f291": {"doc_hash": "6fe44df41ae6ebe6eb7f4f533f2cc032da0a9c4a795abc34ce9fb272245497bd", "ref_doc_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df"}, "34b9be46-e563-4c2f-80f3-5a971d5b57a1": {"doc_hash": "bfe9fba3ca68f21249fd96612fd772bd4edafcceb46d24b2a6a9f0195d208daa", "ref_doc_id": "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df"}, "aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4": {"doc_hash": "3c1c5c228bcf57f739a7ca4688672813e5fa53842daa44d6bc123311feefbb35", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "169af950-9210-4da7-9b5d-c9968bc662e8": {"doc_hash": "63c81d6b50cbe31eb935b0eda750a1f5c47681aca33fb81967fbb8f8e802da36", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7": {"doc_hash": "977ad91778747f7e0f672272dd75c7255f10f8030319db9ae641aacd1155b731", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "3d856b8d-211e-42ee-b047-ce0322df72fc": {"doc_hash": "986251106af705271c9fd4d5f0ee20342c343029c755a838e54183b60ee9200f", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "2c470d38-f8c5-4604-9e15-863d84daf17c": {"doc_hash": "7ec3750e854b3ba970b614a6c86c61a8c62c1b951ec08ccba8d26e855c97df56", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "161fdc8a-da9d-439f-b4ea-68533a951268": {"doc_hash": "a739a7532bae189b1aba2f0c99ba2121abe8e0fcc15c701d243640f93f0e59cd", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "ba5f065a-0140-4449-a54a-67d9f3a4faeb": {"doc_hash": "6d20ed4d689e3e8212d9d8be23307a569e7630dc9d0952485b9623ea63bba579", "ref_doc_id": "67125e3e-c4de-42d9-bfba-e6d1d91ac6af"}, "95e2a8f5-9b74-4553-8e3f-1d799f80d31a": {"doc_hash": "38eb91ecd8c12a67e81d609f506f8f737cb7f3ccc715c74ce80f6cbecdd074b9", "ref_doc_id": "45c04801-210c-40ea-9624-9fa9b296cd14"}, "95ceec4e-67f5-482f-95f6-6ab226d72c61": {"doc_hash": "880b4803e9b3b8613c38ace3dc25a7675a773c28b82a9bf2def294f605222416", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "ed98c22a-fcc0-4a27-a0c9-454573b9df28": {"doc_hash": "108d4b221a3d2cad9f8ce417e30f1d44bd9f0008c8e2ca60e6821d131ee567d0", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1": {"doc_hash": "e005d238cc622368034ff2fe1a3149baea51f0e60e87d608d501f3d40c503a13", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d": {"doc_hash": "a30c80e904daae1f87b333d1fa3aac72fbb460d67a75b89d7a18c49d04a7049c", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "0fbd4497-29ec-4579-9a97-f7fc84a09cc9": {"doc_hash": "5b4136f10a6f8771d741179554c2a5d4b455f562e57195fd094038d570adc6a9", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "67c4a408-bf45-438b-a93d-75b09fb8e1b7": {"doc_hash": "2b87dc98816a0ddcec25fc073e9c591f0ed51933fb1e447c67629121c38757a8", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "40fa8227-95a0-4ce8-a888-9828db45360e": {"doc_hash": "0a9278a1716317f8acb6d51fb72a843be8f0a74be0c96807796d7315c38145a4", "ref_doc_id": "6eaf29ed-f500-4315-9769-0d08d5b549fb"}, "882b3318-e945-4112-8feb-469285e1ee34": {"doc_hash": "90cdd53963b98555d6d4c3ed70aec5850e220460f7c20388871422487ae31496", "ref_doc_id": "a766b2c3-e1ba-4bc1-9289-68448259e06d"}, "38a4f3e5-fdb1-4620-9bf8-1b40768dd898": {"doc_hash": "4cb024cb1e40d816b598351463c17c7377bb4e79c5cbb2b17bdc6d5f422f91f4", "ref_doc_id": "f7839c67-5582-4f88-afbe-d81a51f0171c"}, "91780960-267d-4acd-87bb-30609b98f56d": {"doc_hash": "c8d27a12faee874e8883716b9fddc356274035ff2192fd558e2aeb93bf9b949e", "ref_doc_id": "f7839c67-5582-4f88-afbe-d81a51f0171c"}, "aa3a2110-c458-4ca6-bdb4-c3aa54b750af": {"doc_hash": "337d9b48364fc788996a8b7ee07c53a0b959d3e06e9a4a60c9fba99fcf158a6d", "ref_doc_id": "f7839c67-5582-4f88-afbe-d81a51f0171c"}, "245137c8-a387-45b9-b2f0-510fb273815d": {"doc_hash": "40f7fd6cb88ffe0fb2acafc88b40b53a8b069f04a8fbecad166e3a64670e5b09", "ref_doc_id": "f7839c67-5582-4f88-afbe-d81a51f0171c"}, "9d327349-d31c-4fd2-a763-ceeccbc70b11": {"doc_hash": "99014d4892d12cc3bdc0c8bad4184782938cf5f4b764fa159c7d7943a25fec89", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "ff157f11-3b85-4bd4-8505-27e6b960d8ad": {"doc_hash": "d5f8baef458518bae9c6b22729cc28cc13b07906f05665ea0ca5f4de1584e2db", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "fa16ac99-534e-45c3-a614-5c21d6f62cd1": {"doc_hash": "d836970b978d861a533ac676000b0a07db601cba4c42b6a8a618941205f208af", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1": {"doc_hash": "c7bb616acff3c68120568fb403ad75320a3455af493bd090180c611f7e5e1df3", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "bb1f7104-21f5-4153-9b05-f797b1000df4": {"doc_hash": "3ce2b0871894c0ff9a33bd26f489074c1be9f48cea9b76b188d60bb68cdc18c6", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "29f282be-aba6-4aea-b88d-de131065b3fe": {"doc_hash": "b51f8b0f5ede4482e3dc892f92070eac94132d60ea29f1050b545ebf86feb765", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "c5ae2a27-a317-44ce-9892-cd04634849eb": {"doc_hash": "a2c88f12600dd94b105c56feffb5e6bf423fdcb17fb5008c96e0473ae8430642", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "c321a865-c95f-4836-a3a5-1336e0f1a9a1": {"doc_hash": "0553155916369974e5081d8b8507caca72f379f2edcbecbcf2e1460e6773ae7f", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234": {"doc_hash": "ef3793cc285acdfdbf023827c2ce39f84ac00b0cc0996add45fcb4f84d75b4a5", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "9bd02d82-7567-4d00-ab80-d5bc58001917": {"doc_hash": "5b08641b781370861bd8edf344338b054dcdec489744fca2fc77cb80e5e4981c", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "9eae1e0c-9a44-49d1-9da9-8f516a6689bf": {"doc_hash": "371aae2898770ee21355b1f540c90720ce8f19977b51898596f534ef0c31e3ab", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "85fbcd43-e2d5-4dd3-8e16-430d1132f11f": {"doc_hash": "eee98ad99f85d0d4b141874f568f8694936ce65749db286512f924fbf03ad88c", "ref_doc_id": "d6ad258e-a29d-4317-a848-283df0b98d49"}, "64078886-cae2-48c8-8226-0559eae7271f": {"doc_hash": "c5c6b5a3d260672ec69f25b0e733c59fc124dce4444e5226cdc50a1cb3f516e2", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "e44b5d8f-fac9-49c1-b825-cedb539aae07": {"doc_hash": "6a366013185780a0274e1590aa99e571145f1190abff2e3b2011df9a9024a923", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "10f92351-a74a-4d22-8fda-c1a29a27aca9": {"doc_hash": "66dd216b872c16e60ef45be083f2ddeceb7865dc17bf0eb0888672588813862b", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "81c917a0-e0fd-402d-ad50-83c968959ad2": {"doc_hash": "ea47b3eea4af6182cc1bacc96308e1503defa27f27cbd1cb0b52af72a804a856", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "4af09518-3a46-4610-bcc9-2d4f24ce0884": {"doc_hash": "dbfbaedfa2376c06a90aaf1f070959622448e93ab4753f3c9a1ad96f4c09042d", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "8f853927-f7f9-4f37-97ef-d1e707ffce7f": {"doc_hash": "03572a4107bcdea9e0fa49a7451a69b917f6d6fc547c6993e65f2edab85e1540", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "a856d40f-4dff-406f-932b-b877b6e10767": {"doc_hash": "b94ffda6cdff74194ca80c5d77527affde4888bebe49014b6989758e005c3170", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "e34c5af6-2181-4a55-ab42-7780770de831": {"doc_hash": "e169b551080282d11151d059fb8d3bfaae38d5d3f8334d42625694b7dae77ad7", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "782a40e4-b6be-4631-81a7-2353a7b80aed": {"doc_hash": "f2e309ebc51e1dbda90779ad7510cb53f84ff4c503c3c1e888669b189d89cf56", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "7ad143af-894f-4f61-95ee-c6455cda4561": {"doc_hash": "108185fff1979aa6f3aaeae9da12934fa1b2ae4de1e09a54a252750a050626a3", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "92176222-3315-4d5b-80e7-00d4d48323a3": {"doc_hash": "6c460a7aa9e4a9a0a830d35497559cf6fd17fb4d2d681ef10f1b87eb9afba633", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "f5fe94cc-b118-41a6-b1e9-586f531ff4d0": {"doc_hash": "3237b22161f61d3a3c9523ae145b811a62bd48fb7b4c307f7c5e31ff1b68c690", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "74856c6c-4576-4b82-9669-6e4d7f105936": {"doc_hash": "9f18fdf6f89054ea57c3cc2a4a732a4ab0fea838b6f4f941d6fd94a9ce1b6b04", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "7c3f0619-7004-4e4f-a844-f33fa57c0820": {"doc_hash": "a2ab7cd228dcd52f37fe01d6bc2dbbb73cc6adf547e09eae258973429dfb72ef", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "b4d4fada-abd1-4240-aab2-7a6a03a32e7b": {"doc_hash": "a8523863c95b81d20594a4d121cac6496fda59e8baccdfd49cedacde554ffaaf", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3": {"doc_hash": "fdaf02b7487b8e31962e36df1c1d34daff393734ec4c9f03a13096e56c891cda", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1": {"doc_hash": "578428e999e6f451d20ba51d2fe08b2a91560f57b250df6dd4786d24e3bb1139", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459": {"doc_hash": "de03e1b46758d00bfb83a9dff17937380327566e2a5f6eab3f2cd088269d6e4e", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "e7798f01-f1ec-4ef9-add3-75fff329204d": {"doc_hash": "de03e1b46758d00bfb83a9dff17937380327566e2a5f6eab3f2cd088269d6e4e", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "51c4d48b-ab16-4242-9ca6-bbc0b0469534": {"doc_hash": "2905f9a347d69cdb173e192dc25c4c3b0f33f628fc28a6e3c3277f8a6a16874a", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "e172ccbb-b03a-4ab6-b18c-f905f22b9f65": {"doc_hash": "fdae2ca22b3a212fe6b72e7c678d10e86e4a2a932c8efc080413cc5694e6b9ff", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "40b1711f-7093-46a0-aa0d-618080e3bbcb": {"doc_hash": "5f38d924c2f19f78add3c6ed2007edf9fd59e7dc4852741cd9412c0403f8f3c2", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "eae9122b-b233-427d-8a6e-39c79ea74bc6": {"doc_hash": "27a155deb346d1a1eeb43097b60059af596bc2ecc59d9559d8e205c983633f7e", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "31e68403-f414-4471-8f9d-b80d2f82f53f": {"doc_hash": "d9d71dad08951aedcbed6a08738a3b14ff19e6afa6df709a3404e901a4853eb7", "ref_doc_id": "2ae29d67-0f1b-4b30-8b48-5c969605a79f"}, "2673662a-7537-4e18-b116-1e66ab62e20d": {"doc_hash": "6b4764d1c4ce3709d550d0f231fa10d8cbc39199908f5123ca11d17270fef722", "ref_doc_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4"}, "a564584e-5a60-4280-9d7f-eadf9df9c4ba": {"doc_hash": "39cb75000d2e9ac2c03cc9dc3916410c05b784ed58aaec316f04fb60fa178cf8", "ref_doc_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4"}, "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c": {"doc_hash": "17131fa614d67a62ef208a2575bbc9a6619427e9c5ba969fc19f641c4d4646f7", "ref_doc_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4"}, "72369850-83c2-4efb-aba8-797721a36f0d": {"doc_hash": "01c52c98ce5ad7129c48d7dd31946f8744004834cd698f1bdadd8a70f51ba8dd", "ref_doc_id": "0e6a4fad-a358-46bc-b677-7b59e89725b4"}, "e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1": {"doc_hash": "36b0f5639be17c87c4dea02f200e44b22197c25e394a8fa38f76eb1e889231cd", "ref_doc_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb"}, "72d9674e-ffec-4802-a3b6-564d141edb8a": {"doc_hash": "9feb07fc37163fc7b05bbcc286fd6249e0c410661d1c0277694e3a3283d55830", "ref_doc_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb"}, "e534ba0c-7149-4ccd-ba37-4384b1ec035d": {"doc_hash": "e146348290d65abb0c5a9c78d012a43a9576f9ed3d995eca240ad28e9470ccf3", "ref_doc_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb"}, "8f17d0d5-a7db-49d2-b67b-33023253e5a2": {"doc_hash": "78e171ad401d8f771a8b8d679a595b8262d202701b2c81a5c40f2808817a5d02", "ref_doc_id": "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb"}, "75e5157c-84fb-4fed-9054-056d5d63fbc5": {"doc_hash": "f3bfe492f63cd539faa0662d8fd7067294cb45a9b1ed73f8c5ead5649201187e", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "ca73f10f-83fd-4607-8c5e-3412ef3bf05e": {"doc_hash": "415bb7a9a23d8296bdc13277acb7cceeb683480992b79f792cc8d6b754cc9578", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "9c3ba30a-f500-49e3-a240-0c779ff13268": {"doc_hash": "39ae4c9d5999d924538c123e8731a351f69ace520730a3da0149b2fcddfce2be", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "2b941f72-5ea6-4132-b957-e1b306d02ca5": {"doc_hash": "b6b6a4d8c43975a5b508ee041d562d25c75205f7dc746d061293115d8729e77a", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "fdf055b7-b5a6-441f-8ee9-3d8278da6606": {"doc_hash": "87ad79b651a0b1ad1dc4feabc3aefced3280f7224559d56c90b0a4decd3c8c9d", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545": {"doc_hash": "01043b96ebd1b7fa067050a4fb910417c09e3303b7855da6796e5b63adba98ab", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "1c74c6c7-6039-446f-80a1-4ec966242f84": {"doc_hash": "6479e570851fb6b294951f5214adc37076c2e824a17939ec3e7ed2373928364e", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "72592a52-436f-4188-812d-d6caff7ffadc": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "af7ceb01-f97b-44ca-802b-2d27598a7fb4": {"doc_hash": "bc5d669c08c42487c8798977587f20f283932283cad059d21b6c0f514f03fb91", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "bc314749-c61c-4a5e-afe5-9389a5d19646": {"doc_hash": "d6faaaa38cd6c2ca763d3a05ae4a3a6a54069dec4953e84ba96f6802a052e059", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "0d3adaac-fa90-4307-a8ae-b746f2f1079d": {"doc_hash": "78f86efd47fd2079a73350646be69fbe3e9e0f48dd87bffa8b687bd9a30d035f", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "e534091f-6efb-4397-a1e5-3eeb2cf40fe8": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "2a740350-92a6-43fa-a721-b4494363716d": {"doc_hash": "2332f169ed38499e56c924ecd2095aa9f132954a043caa2ac027b7b7172f73ae", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "d256475d-b303-4f68-bd2e-79aa496494a8": {"doc_hash": "f706d932ebd7ee1a3aff7a1b2d2b6669b61e5392133f2fec4896501b10450456", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "b651d5ad-b46a-444d-b5fa-542baa9f4386": {"doc_hash": "355268a238a6076960785764e4ba10e86fab3be9f57a6b0527cc6be64618a050", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "67835fc8-734b-4a1a-b82a-710c50a0a884": {"doc_hash": "e6a46da14a93493b0c8a2f14b2426709437893064b6ad253d355dc536df6226b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "091f75bf-258b-4f3e-8c34-bab384df81a5": {"doc_hash": "a182af812acc6828f4a25f8651ff92d96313f6b03503d662f6bab004c3983655", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9": {"doc_hash": "1cec98f3f9e349192c8ed0196cc4be38fff487d76d835081717c7efcc3f1baa1", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "19060afa-ce6d-45ad-bd6d-e50d9bd315e3": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "cd841260-f94e-4c83-a69c-375116d287e8": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c": {"doc_hash": "ccbd7742c0f54b2a9ea21bce00ea77ee80aaf0467622e5381f8fb8f90d71c55a", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "2e674e15-0e42-48e3-a4f2-c124484de031": {"doc_hash": "c9373fca0c372ff8581281d80c8980c5250bf6a40051ecc32d94a29ca5bdf13f", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258": {"doc_hash": "7e329b0927eb245d2a1b194537a579e970dba5748eacc71e090803889a259ddd", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06": {"doc_hash": "f0d30e0a7e72bdbcbf9a5af7b87ef3a27625804d418c6e866006af0af0cd1bc5", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "2c6707b3-f882-4cf1-bdc6-9209f0a6a562": {"doc_hash": "1bd8680f7c4226464ac5703979496a2f5d965ee9509ca4b312721a7129d043a1", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "1be20fd3-0a46-47ab-ad57-58535db5324b": {"doc_hash": "673f23d022bb5dbfb28f3282312f12731f19e3afd957ed6c9bcd3006f4fa1015", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "c3229ae5-2418-419d-aebe-b156fea0e547": {"doc_hash": "d6d34848355d939ec8461862f5d8d9d100c4359a6d08628283a8712885e212f0", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "4550218c-42d5-43b6-8042-ad70f9e8b527": {"doc_hash": "a8dc2e4cf38308441d69263e8a1e863607bfbd8a1fb7d3b186025d2bf84f1b58", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "e06f7637-a766-48e1-9583-95970b8ac487": {"doc_hash": "6479e570851fb6b294951f5214adc37076c2e824a17939ec3e7ed2373928364e", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "783e84ed-57d3-4579-bb0a-f54699e15af6": {"doc_hash": "fc6424e5fea8d4f45526ed71d82301e72794ce328062bf6ec2e5cbd4d748b92b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "0ef315d5-d8ab-42e6-8450-12b1d68354ad": {"doc_hash": "0ae5a2694cece28fab68752f85716751f9478af2cc0bb5609070edff64d86a76", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "6c47d8b5-e46c-4423-9a33-cc6791c588da": {"doc_hash": "731940e32f0c0ca4dc02a3c31b4e6ef145ca07b7f69654b6efdcc6f1d62b3723", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e": {"doc_hash": "78a8324b0a0ebb54f73fbd131a584ee0632b2a6804044a97c3d7b41d6838fbf5", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "3e7e95d2-973d-4a5e-883e-a44891706d92": {"doc_hash": "78f86efd47fd2079a73350646be69fbe3e9e0f48dd87bffa8b687bd9a30d035f", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "49a4c69f-5fee-4c17-9d72-4c39b4dce24e": {"doc_hash": "bfa2d2daa3a8d71cc84cf62ca2e4f1d72efd46b74872be41173290a6f4b9c35d", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "0237c132-d746-46bb-870d-46354b5795dc": {"doc_hash": "997a4e998959273342576ee1284c316c69e3d999cf11ca19918bfe86b396a27a", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "b78c7020-c8bb-4c7e-816c-9f11886ad474": {"doc_hash": "02983ca44c24de7dea473f919149db1f3cbd84e56c1897f60cf96784b6eb174b", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "c2380615-08da-46cc-ab66-7a4f33c80b91": {"doc_hash": "0ae5a2694cece28fab68752f85716751f9478af2cc0bb5609070edff64d86a76", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd": {"doc_hash": "c8fae4c7c9ae57f28b7e2e74ff30ab266493dd26180b4bb86bd7dfa20fde2dbd", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "d6e6765e-7840-4715-8a42-cf33b9862e3e": {"doc_hash": "40242aeb184da90756565580212c2f734ea555442aaf174e9a757481744905ba", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "a11e9824-2869-46ed-a838-676984557a37": {"doc_hash": "fe7a3521076997e4ab75b04ca7dab5832b52a68f4af4d78b51444716a400059c", "ref_doc_id": "f2a5bdc8-a644-4841-9d29-37aa726c355e"}, "c0495bfe-1a0c-4cd1-ae66-40883828c2b4": {"doc_hash": "8d574267561099d4d2123f086977b9df5d1a891c2eb530b9ed8c0f691f16256f", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "f6472245-626a-4296-a004-310f3b976681": {"doc_hash": "983ce0e56adc0b5635e48e7ffdcf03502c9321eb36ee2fdffe38d1f27ce0fce0", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "ffc324c5-0231-4ae5-899f-8e772facf936": {"doc_hash": "4ca084448cf3a5ffd045fda48158d35b86f542cd2d8392ce66e6ae949dee535c", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "ca4b256e-37d1-4dc1-960f-82377c42dd29": {"doc_hash": "8c35764f37c39abbe398649a69ce6684e5ab802c7dafb7ca96d5b5ba535a4f7b", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "56a49ea1-71ba-4c9b-b038-89cbb7fbe844": {"doc_hash": "8074974d8f6c7e801da3665c92fd787b0f742d4cb6c07141c14b341ced489f3a", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "f6c4ae82-eb15-4135-a8d5-6064710c408f": {"doc_hash": "a0741684c3ee448a026f5b1b9f8452ae22228984323408a45eadaffff9215a61", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "15831b4a-4062-4ff2-a66c-2c2c528cb106": {"doc_hash": "a73204916bf7631c5eb3df7d57ef2d12309587e6e5fd8b75be01b0219fb758ac", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "58e69df0-da02-4822-885e-3a0275d7f722": {"doc_hash": "5736bb50d272589322348772db7bdb3df49e17f6d5e9c3fae56f4937f0406e43", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "60f2dd2a-4b3b-4e12-af83-8691571b1eea": {"doc_hash": "268339a9d9ffdbca7f5a754507e8aaa830afcf76325b9c1b745aa7503a9825f7", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "3c5c0e5a-3157-4202-b233-8499fee1b519": {"doc_hash": "3e3efe7effb63cdf03b70e8dd1fe2be17275a681ed2ef161471cc75da265d435", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "fe6a9804-a6d0-4200-8f9d-409370ed1203": {"doc_hash": "9043b49eaa510b619df00ff225adbd7852940ce836e11be3a038b943b0c95664", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "7c8d8bbf-bdd5-49d2-88d9-da658ae23448": {"doc_hash": "2463efc6bad0f426a0bc30f57b9c7cae1d8ae37d5b75470ff4f5a3613bd38e90", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "84fcef88-f6ae-4255-b556-ce142aafc677": {"doc_hash": "2463efc6bad0f426a0bc30f57b9c7cae1d8ae37d5b75470ff4f5a3613bd38e90", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "cc8d88fd-923a-4207-bba6-28daabdf974f": {"doc_hash": "27b0556de00b0d3ba0a100236b81a1586c4c5b8b5f7beaeb89fe029ebe1405dc", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "20615756-a358-40c0-b84c-fd8c37bcccde": {"doc_hash": "1fc42c0a519dfd9d556f59caa6e9e11aa507e2530ad74de477c67cbf77ea701b", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "99724ed3-14f3-47b7-96e4-b779d5421e96": {"doc_hash": "e03b0b2cb2f584962364f024164903d5cc2588bab0706eb595587be3dd84a60d", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "58c1e7d9-d347-45b9-932e-42f00876b4d6": {"doc_hash": "ef16d6a1b7c15f344ad6b557dc49ed1690916c74f3087c0965a4a5b7291c36b2", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "7dfcecdf-6e09-4a9b-a688-15a28025a576": {"doc_hash": "db924a34035055607bc7720c451ce70f3ce069d5aa703f98826bc9e16a139b8d", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "29e80fb3-98da-4733-b9ea-b2f26bda6889": {"doc_hash": "9c28245168077f7b60b5085b60e1c459f20fed1bd550e49c54dbb765cd280e9d", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "494dc451-1827-4e9f-9740-5376a0c9d99a": {"doc_hash": "976ee5b0f0623a8548aee59fb5aa34a8886f25e8ab219b499a84bf6a22fd1c15", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "7cb4da1e-58f7-4f77-8334-a65b4ceceb16": {"doc_hash": "2b0d141fe4dbbc32dbe77086ad0d5653f0b10ca4ed6fcef8264c28fbdad59deb", "ref_doc_id": "03c6a9b6-d808-48df-abdb-2ddd1ec3a179"}, "621294b8-d384-4b45-93ad-d4b76e24bdbe": {"doc_hash": "75207f53d30ec4258735f69e2610813614433e79d9d27a8f54586a7a8d9980ed", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "1eae6bca-106b-4515-a4aa-04108bb80f97": {"doc_hash": "27ed4f495a5081d8c1e5ae9b9f0b8db9f22ed32b791b7803b114460ac74ce495", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4": {"doc_hash": "27ed4f495a5081d8c1e5ae9b9f0b8db9f22ed32b791b7803b114460ac74ce495", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "474e22d0-e39d-47b3-99c0-12bf087ed464": {"doc_hash": "d4efd4b456e7ec3eb70d63459aa7dff4e432a5568ec3081606531fc9be04ffd1", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "f333c670-231d-4de2-b32a-d725dac6aa2d": {"doc_hash": "6f86e5d2104ef9defd2e7592e18520d2f46b62b5c7623f5e28ee2eeb00c5b3b0", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "6fb7b0ef-28f0-4114-892d-07fc2c8479a3": {"doc_hash": "8e14314c1c9ac6904ca8dab15d04206203eda8a615ae58000f5c46d0654bd211", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "cba04589-577a-43d9-9369-04a1ac5eca49": {"doc_hash": "6e035afee4ae3b30f6998f45553904de01787bc4da8234e55054af35251ec69a", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "5ad8a426-6ebc-49e2-bf63-f197e31bf861": {"doc_hash": "48170d6b95b8c7316602b2e80815c4209cda2144a19c1d93d404eb69d9a27804", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "27691286-5e9d-4e3d-966a-d2a7fe3bb21b": {"doc_hash": "a1b1eec557edbfa41b3b13c10ada3c1dc3b99012faaa8163e25ad670cdc0ac98", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "b90b0442-2079-4355-a317-d489d27b1197": {"doc_hash": "a14a0d4312115d48fbee4ba7d9f05fb25486857056a4b436185e455c813e9b0f", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "c8326f76-fef2-44dd-b25d-0f4f307aa49e": {"doc_hash": "bef1520ac0de7602eb69ee4bb9b9f122d09fc00e9db5bbfe65a132e2e2f5851a", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "e1b59c84-a426-48be-838a-4fcbf62cf02a": {"doc_hash": "c38f94f9688b9d728f01139c700c48206c9bd1f7688dbecdabee78a841a330b7", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "0372a16c-157d-4d05-928a-9ddd0fab26c8": {"doc_hash": "19a39f67f88643cec7aeb071af0e0742de2936b8d3f6d91649f4d4da58576958", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "077746a1-b726-4e07-9aac-fe97aa786d28": {"doc_hash": "a3a4c5ad75bbbb0da9a105c6cf3ef5191d07925696bcb39a53742392163ba502", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb": {"doc_hash": "bf87569e9c5b1702341d2b57bb9d4225f3f16043214ee6b2dda97b8e19f56455", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "6c6c4d69-530a-478a-84e7-c0690aaf5c6e": {"doc_hash": "59bd7d2552ac2f0480bd3e6ee981ec53518dbfc1d145cd2649d73363453dafde", "ref_doc_id": "66e11a8e-0f44-4fe2-822c-6c23c42941d6"}, "6aea8329-abe6-45e6-b1ed-8a7f219fd08a": {"doc_hash": "44b15b6e7fec8b89cf2172495dc0f9cc2e76c50719e317029bc7c7dcb702b77d", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "669a73c2-0f04-41f6-a627-027fd7919349": {"doc_hash": "e29ea8fe57ba81b13f00af1d9bf50f455ae78ab08d34e23bbc2dd0df90828922", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "cae0e65c-834c-44a3-8085-120f1fbe8b89": {"doc_hash": "11dacc499d483f380c678c4bb56a8bc966c94e881424de3bda5d88239261cb67", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47": {"doc_hash": "858eadbf2b3dec79b4cdf406172bfea1d97d1889fb68ea5c9d2d1edec68345ae", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "92d71684-287b-470d-b31b-bad374f9b4c7": {"doc_hash": "22d7d4c1c5af31ea7b7784fcc4cb73bfd09e754212e11c4bc5760242639ee06a", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "64499495-e3fd-4865-939c-72951e2a105b": {"doc_hash": "b4626b3a7cbcd84d3a0e42f3b2e483faf4dbc8fa88210e77a2099b7f962fe7b6", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "38a17c2a-b704-4d55-8b20-df4b53e1cbc2": {"doc_hash": "d9d4d8f79d19b0a34a97e3f5b8967755f8f0aafd74e42bd74dac9fe7233c111b", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8": {"doc_hash": "b60281914d641ba197f7825102900eab4096b0c4c22197d71fded45423fdcea5", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "bb69485b-f5f8-4e20-9681-82765d701073": {"doc_hash": "26938be1cf01fb96d8eac1584277e867769929c9c28073aa145bf37bcbd66a92", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "71072708-968f-4ca2-a48c-3196c6f2d700": {"doc_hash": "8c460cc0af6c180cbeb52d9f6022de3e61b7638007d809c3d8374b72a24e9958", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "ba7580dd-eca9-455b-9feb-3bc0964334ae": {"doc_hash": "5938024824df5e560ad09ef289fc3a3ddc2901218297d462e95e0b85add1bcfe", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "3dea731c-c911-492b-885e-d0a17a6fdde7": {"doc_hash": "e7f7a2c237c612ce758dbfd6288d7b791497d87ba1f4c09ed945b58ecb4511d2", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "9e2009a4-86e1-4e73-8b2c-2e55417d7874": {"doc_hash": "180bc2c47c73c48093044951ee17fb826463423e9cfc8737907d753eb8797355", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "c9449e91-89d3-4e60-90da-c13068c4e650": {"doc_hash": "ade7d63b9a513fbf0072aaebf119d346a1b4ed908d60b37624f3ad5b40226401", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "d47ab095-261e-491e-a36d-9eabb8d0120b": {"doc_hash": "3738ae41cde4a6e6db60882be6e4295ea5b4fbf9d83bc11fca895a0b37f3a126", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "f218b3a4-6d5c-41cf-8146-e7647fa73084": {"doc_hash": "c4d316c53e43463c7761139502dcf433d387b289fc87bdf0781047de5521dbc4", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "b918bb43-bcab-4b05-9fc0-5b4ecb07622c": {"doc_hash": "54416b8b9e6fd99017bd46e2476f59d4c555300bc83cbbca04ae8163f72fd1ad", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "6179ee5c-acc3-4635-bce4-08675d7d154b": {"doc_hash": "c08788d199f4cad520830023d8b2b78ec119e6731928130324c9caaaa3501870", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "0a491107-c0cd-4774-b209-594558987214": {"doc_hash": "e900f5c2c9bbc2dbdbd113945bde82661ce742cfc106f4678f43c54141941fd5", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "baf7a626-b347-4cf5-a0e3-1d13a6b786b1": {"doc_hash": "ad07c7eda54e87c83f217a340c00875a2e7028ade45904076d4bf91305506d7e", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "200542ab-f75e-411b-906d-84b03888815b": {"doc_hash": "be9200cf895f451bb8f90085db1182581fc2cc96f737ab9a37df3dc0f8ae9d59", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "29596411-09b5-4900-8d3e-e121d8b2dfe0": {"doc_hash": "c4d316c53e43463c7761139502dcf433d387b289fc87bdf0781047de5521dbc4", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d": {"doc_hash": "b8671fd75983b41ed9f2d893cc7a54baf07f47c712f0f9b25cbbdaf15af6f6b1", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "c2b5f652-84e9-4bf9-8e52-ff40866eb696": {"doc_hash": "edf50679605512e58a8452efe3e7339849fe6aac5c96a93949ff08505b2da8e7", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7": {"doc_hash": "8c460cc0af6c180cbeb52d9f6022de3e61b7638007d809c3d8374b72a24e9958", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "c6e34c3f-7969-44b6-a89a-788d3facd94a": {"doc_hash": "1b248ab844578e7a1ca23ec6e0a8fbea4996c10ea30352c1d1446c0aba02cbed", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "c2845632-cfab-467d-9920-61eb7c426485": {"doc_hash": "b5e54331e80a384dcf272927f9983ea63fe6a97e4d04b4bf9ad8520df49e32ad", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "e1720d76-ff62-483b-a93f-91b2166730e9": {"doc_hash": "7516a334357a38bad2a6620d00e812aaa69f85d53d5e9d771405444a2473586c", "ref_doc_id": "936223d6-1863-4aa8-a5fd-bdd29c92802c"}, "b9d611d6-1ffe-4649-a99c-791abc8c11b4": {"doc_hash": "c9a503fc91da8cb3d3e172e9d5003295eba0e0203adf3973e167fd55a47bf0a4", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "abd30c1c-a1f1-42dc-a6da-ff11cce0f484": {"doc_hash": "f7afe455087e812647b253c1299ff0d15793f1d276c6a43f4b63db1dd50ef274", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "442beff7-96af-4069-b47b-632eb930af45": {"doc_hash": "e249d8bf36cbc0fd9325d0bcd760d9caad48d5114b6ca84fcde2550c786fc68b", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "4b7febef-9d11-4970-add0-dbc4349ebcd6": {"doc_hash": "0d038fc180c7954bbed810b2e6813de19be5d9d56119dd64c8a515bf36abd450", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "512b3fbb-e748-43a8-a16c-5ca6f6669c3f": {"doc_hash": "27b483947820089b4b952484fc3592166467bbbc078dee4af016704765ac77a4", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621": {"doc_hash": "63a7a9c76a20281c41dc106624f6d18eb914e744441eaec3f59978200d13a3ad", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6": {"doc_hash": "12b2550d925bf4fcd4a6bbf36056a82673cb46fcc99eff21afe4f51a3c5743f7", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "65bcaf22-ee88-46e4-aa92-57e6d6120214": {"doc_hash": "0678d205559ecca7667156735610c6445fb15a35423e4475e979b7b68b962e69", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "3856870e-3efc-4421-afe9-c114ffca2150": {"doc_hash": "c9f50195ba0d32ef177a016ff498590c595e01099a4fa6ca2e7e1c198d62abbd", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "0b4407e4-c631-411c-a43b-bb3a13c607a9": {"doc_hash": "7c2d6d150a2d7ffe3611364b4c5684e4ba24729774ecbd7e84bbfe4d924e932f", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "625b9c55-779c-412e-827c-d18dba2b765c": {"doc_hash": "6a2f2c1993ea0e1f7746d11e52b815c42ca3167ea7d2260990317210b858fc39", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "070fe84b-6679-4fab-8359-1622e9efee70": {"doc_hash": "6a2f2c1993ea0e1f7746d11e52b815c42ca3167ea7d2260990317210b858fc39", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "82e34590-6d59-4f55-9e33-b00be693fcdc": {"doc_hash": "8dc5658b66f04fdd7033091baff07706abd80c0f232912bf4a41c2c6dfc0ad55", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "50143c22-65e0-4e7f-ab78-ac8f31a1b627": {"doc_hash": "44f7afa11de856c5127d3fc025b2f7c3c56991052eeae1daf813faec16dff088", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "24e20a16-7ebd-4ebf-aba7-14697990c2f7": {"doc_hash": "ec770dc87468f61bfb67416331e845507c368d70d9f6a6644128beab97a52472", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "be8c6114-cf70-4669-b656-b01dcf443c47": {"doc_hash": "3c6e0f0d8c55a19cd03ca9169e85ca311d984862343ed4fcadc4f06250dee895", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "d955bb63-90bd-41ca-8262-615ff2fc6940": {"doc_hash": "830ffaa6e4ffa8024f92341b4819ef5d4c85fd884cc78ca822ccf0dcecfd94fc", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "65fd8c27-2e07-4a1e-8960-29776128a64e": {"doc_hash": "8c456afb71c1d9dbedf133d12efc75a48081203a8d71804ec9e1abc506e3f5b6", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "b5ded301-62b7-44c4-872e-301a2253e5f8": {"doc_hash": "494b66bc72a50d968500b5399b31e23ddac7e742fb7ab16cd960aa3a1a8d3351", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "4e8b0be9-2c30-48ba-927e-b2f00034e58f": {"doc_hash": "af6b5fd64b2fa723e0df9a629ba94afd9701ae1810abbe1f62ccff7665a140c1", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "938b320a-16d5-4043-9a14-faabd07c3ada": {"doc_hash": "f3a635250e174288a65ad5457193f9e86bce8ccf3d69203eb9815210055c004d", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "74260471-fe23-4a90-b01a-7cdd950c4b6f": {"doc_hash": "05465d44639ed7a177b971935c09251894c7fdb27a474bf2cf074bba53daadbe", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "00d84840-b2ca-4093-9d8a-2ced27744132": {"doc_hash": "06e19c4b7e3ba54f23c08dfacc06597fb18b2fc1b1c3457dbcbd8e599d67df6c", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "0949c5d2-b20f-4a99-8769-0a2b7508604b": {"doc_hash": "b48e2bbb5f9f65c6fbbc674fa9c191b77191bb4500e1a3ba84ac84f7b88afe8f", "ref_doc_id": "e0abd79c-1a90-4b2c-a899-fc4fa1466b13"}, "1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c": {"doc_hash": "a79a381e09aefb8790e9a5c255996668f645f2cbfffed375d8283dfa68e20943", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "1ff61220-56a9-4dbd-85e1-bd71d454d33d": {"doc_hash": "b1dd91401fa40f2cea859bf2d33d3a0fea16b4f4c6ee5a1c35f2b01b52d04034", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "1879acd3-2a22-4314-b25e-fb20cb88f5cf": {"doc_hash": "b003aed3e3528541a33738ef2fe1e2c29e335cc2a731e781fc166783bf4338fa", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "f914817a-8b72-456d-93e4-fbc96996eecf": {"doc_hash": "8d7bb98132d237c2a486f3138c67f5f18a3fb8ca283265022593961952c5a2b3", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "68e690d9-24fc-452b-a84d-003c1c761c13": {"doc_hash": "b40071c729a082c4df21cd686c06093f7b998408c10c6216715212e08857c20d", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "605531cd-0255-4282-a395-05f4ae4da847": {"doc_hash": "b40071c729a082c4df21cd686c06093f7b998408c10c6216715212e08857c20d", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "6ec7a1b9-aa56-4960-a600-7e21fa277c0e": {"doc_hash": "a3dd72279f4c5ad22c566c953f0d78a9b19298f86e523f3b3f9d04d316593922", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "001dbdb3-8b84-40ca-b1eb-e495d2585290": {"doc_hash": "0663fc6df72a5cbbeb906cb8c32a31484549915ff8916727a7d9a9cc865fecc1", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "a9514d9d-b6eb-45a9-86df-36abf1dc0265": {"doc_hash": "ca6013acf9276b11832ec78d3b4a2fdb2cddd7f67f6ff33d54a6e4604a692da7", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "3e7799d2-1623-4ffe-aa10-df6b078313a6": {"doc_hash": "df7a438619ddcb8853b7959e345c7717d7aa7e29ee3295fe168b19f187396319", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "2801fdac-64d1-41bd-bc4b-6bb236251f1b": {"doc_hash": "17056d6f83786d425f0a72d194365395a84f6498ca8a9f92fa55a3aea5dc3ed0", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "12f3dc5a-57ec-4598-ad13-4cab5c21b956": {"doc_hash": "3b8625a0c7c12abc2b462703c6188ae02bc912082c75ab8ffc84d22b98019993", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "6494e0e8-4243-4cd9-9771-493359de84d4": {"doc_hash": "b440e995c099c7b243c39b9cd4475175b42a72711d94223160cbc4272b8c3d31", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "a11f8710-89ef-4c51-8932-a29ee3311657": {"doc_hash": "27cfa32b460ac8eaf33b484661cb1d754a65eb64266012ac968f0c2e6f239739", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "d89054a5-7344-4651-9973-6596da32699e": {"doc_hash": "6b8fa3067fa8a22a7a9945e06d7ba33619fa9be75c187314de078ec0c75f9bfd", "ref_doc_id": "b6687bb3-9a4f-43a8-8eb2-c463947900ab"}, "bd69364a-5aa0-4c34-98e5-78c426795885": {"doc_hash": "a492c0591d235bab519f1c94dca0bd51d2e71552c2d4591da56486340c279d38", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "867e25ec-30da-41b0-9165-f61eaf0ef9f9": {"doc_hash": "4e9daa0dbbbbab7a5721f93e410e2af4bb34bc36a506324c13a95e7fb76d10af", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "96eb79a0-d3e7-4f67-9320-e9b64b35d04b": {"doc_hash": "6e89e2ca75a673ad52339aa0e20e82833bbae0f60c8626f706b9d3a5c3fac6f6", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e": {"doc_hash": "d610de725332e4516b6eef93627dcf4a55ba11947451ca4f0391636db5d0cf7e", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "32e20de4-f236-4c0d-af50-2ddc688137b7": {"doc_hash": "e4bb22a27a7e35c3b8b8c6a2cfa64e1b33e99cbc869ed2a16d31c237eaf848ae", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "7b3e019f-3b40-476b-8514-c739c2c4d303": {"doc_hash": "b458357179ef26a75f328ba3362284520c2e02e88631a3f6dc7b57b36385e081", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "825a075e-3414-40fb-b5db-76b54047355e": {"doc_hash": "e12f24913a2eae632c378f4be695c72500402c2916b020fc58d9ccb8ccaf1db3", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e": {"doc_hash": "b7e1be94cf80ae8dbb96cac429393c019802504d62a901f856c86bebafe4d140", "ref_doc_id": "9d9feb21-0e61-4670-846f-cadeb250cb62"}, "15fc1be8-be12-4ce7-bad9-97b08336af4b": {"doc_hash": "e1ef8d785f7f03725706691c0bdbc73f7aec051f387225cf67ab8347988fa2e1", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "09c76815-8809-4cec-bd9e-8c5284907f55": {"doc_hash": "98b126cec0d32e50602414d1d62e870a90d22237b7bf503b68fd0c859c73f054", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "c6e372ee-dee0-4783-b3f8-7cfd914d605e": {"doc_hash": "964c9247ef80fe2b44bec88b68f21671f67023377408ed21c6fa92d20eac0b9d", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "f1eb64ee-9ffd-4fa3-9422-4761637130b8": {"doc_hash": "d4ae2d42af2b15a6e7d69389b134f1222bfd20122f07dff5261a680b1468e226", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187": {"doc_hash": "68edc6914f9ebd9ee6ae9fdb8752546c8df045b50ac99ccd967872cb844db98f", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "12f88757-a0c3-45c8-bff7-c7dda5e3ca49": {"doc_hash": "aa27777179b7531d0a5892f1019a7d9d177cba594094af84c8a793f62ebd3541", "ref_doc_id": "ef4527dd-f698-4784-b75d-405c21e248ea"}, "56d2cef5-cd53-4230-bab4-b630f06ef9b1": {"doc_hash": "4d94a1b2b9cc15bd965932e44bafef900c9319a05ab0d022c652083d425d0260", "ref_doc_id": "9e07abe0-cad6-403e-8ac9-8c7acf85f0ad"}, "c63fdb9e-d023-4eea-80fb-d1f0e0227773": {"doc_hash": "2332a5779a8c6a3743e62cb8b8d6dea391e065633b902d06c2891a83e5b7022f", "ref_doc_id": "c28811b7-29b0-4244-a09e-e53be1668146"}, "061e4e49-c976-49c9-830a-fd59899b8b9d": {"doc_hash": "bfbce504fee6ba782f05bf2d82810dbe0adc2ebccfbeaf3f114e96044977f13e", "ref_doc_id": "c28811b7-29b0-4244-a09e-e53be1668146"}, "14188d41-f023-43ef-8ec0-78ed3bfa120a": {"doc_hash": "ae78897f364dc529b47b4a61b42cb9ce2b1e200e64f741b313a1fa3645460fd9", "ref_doc_id": "c28811b7-29b0-4244-a09e-e53be1668146"}, "05bdd821-2276-4e23-aaf2-b7d34e20f038": {"doc_hash": "56304a1b62cf487958a56bb1b03152ead0bbe57d2c1368ca616635fc0c3d9be1", "ref_doc_id": "c28811b7-29b0-4244-a09e-e53be1668146"}, "2edd8818-66b6-4c31-b401-8596b47a5d79": {"doc_hash": "24a286f4315e4a7cc458cdaa33954ecf201e172f2770219bce76d284de1192bc", "ref_doc_id": "c28811b7-29b0-4244-a09e-e53be1668146"}, "367fffc3-5133-47b2-bacc-71c3d6b61cf9": {"doc_hash": "c5b6f5fa897d87c31b78ab6f02a7bb02190ba65ba336abf0a7c8d0d86ac60aee", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "f039bd9b-8408-4cce-9152-3e83b6f810e2": {"doc_hash": "0255c1271b47c47be56e0f486789e0b518a94b555855d988d63a66f3913f6202", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "caa73846-6dc9-47ba-b9e8-e89484d8acc7": {"doc_hash": "0ccd1d5ae69dde3c52cda2e3390a56a5fcbea39fba830ce948d3aa4415855697", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "e926d6f3-8b88-48bf-9220-c951b52dd37e": {"doc_hash": "2063cdd2d175bcae3bcd6471c7a1c378937855b32ca349b4f5d6abc9c1820f13", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "8840dea6-d870-4245-ba9a-4e69f2da9f3b": {"doc_hash": "8b8aa318d61b16a52a019783ad3d0a8533b36e5848b76a61114fbba272dabf45", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "a22e70e2-6300-4c3d-90dd-71ed2e9611e5": {"doc_hash": "a78756629a217ff8c6752091b693aa122ced259c67e1b2f6f6bfdfd2e6879d6d", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "c8833993-5527-4046-b5df-51eba96cee9f": {"doc_hash": "ea38ebde0fd9ab36a84cb9aeb10a0a620d7a5a7bcec2a7ec4940fc5351e55c31", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "4bc9523b-5a03-4941-a375-07c64f44726c": {"doc_hash": "3f232683f8c2b2f50f68552d8573f5c48b29b78564e2ce129cf4a780116681ce", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "221f1617-05b2-47e0-9568-289ff670771c": {"doc_hash": "c92a0007c93a389e85e26652c61dd79367ed253bb81d090601ae8cb1b350f60a", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9": {"doc_hash": "6afbcece785b7b7c02c74918a6faf1b678a5f0bc74c7ab421235b58e8198c4be", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05": {"doc_hash": "5dd70fe0bf3c164019346a230cd557e043a3d41fd486eb82a9c8c304c8f66dd1", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "82bdd6e4-3212-42f2-9c93-25b03aa08597": {"doc_hash": "ad5b53a48a8e5ed97713a6ec1424076081cd2fba6c3bcc982815cd0f9bf231df", "ref_doc_id": "8065b83d-e8eb-4e30-8008-77e487103210"}, "aef494ed-0ec6-4079-acfd-71ff9b8a8742": {"doc_hash": "87d344774c26c53d09b83aa89cb4a6f75633293dd7adb87680e848100325e46a", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "8e147be5-c149-4f30-a09b-7e58b4b0000f": {"doc_hash": "98188af332d258b5b9505df426e8111642134949d0c6bbb9472abc6cb43f6184", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "1c5ff953-d156-48ff-8774-9fd6b9d52d77": {"doc_hash": "5181fd9aa85fa05aa320785e294680ba04d79307225bec2828049d732c122417", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "44f24a64-b214-414c-a221-74e137000347": {"doc_hash": "75f5f13036e91f8d8a0b6049c0576c9dc8d3b4e6550671b788b68c877fd296eb", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "9170ab64-ef48-4a04-b90b-06491b7fc38e": {"doc_hash": "bcdc9b90f969b13cc817526c770cd5ecc14a4ee08ce4542fbc31ff9471bada51", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da": {"doc_hash": "bcdc9b90f969b13cc817526c770cd5ecc14a4ee08ce4542fbc31ff9471bada51", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "34e337e0-f3d7-4524-a163-98e62b554903": {"doc_hash": "81fae16351958e440b5023e7e09b715d3652f6c4b671bdf40df315c1eed0f4d8", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "6d63588c-ab4f-46cc-b547-bf7576a3bf9d": {"doc_hash": "9fe708583060240dd3dd9b6cc0be5bfa6b2e2b77247efa59d2dd925bb091478f", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "14a6a317-5b15-4e22-9423-fc325e9c3f37": {"doc_hash": "b16fd572661035bce621fbe71f9fd9c6b077d9a1010c7670e6989e44a02d373c", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5": {"doc_hash": "e0f44055a1c5e41ca000bd0367b9c33e5506100f4da02e37e17170d3d0abb61a", "ref_doc_id": "e02fa90f-58c5-4949-af98-c41334d7f032"}, "5cb15045-b0dd-4242-9599-d7a6caae4ac3": {"doc_hash": "44738b8459f15fb531d263179670849b63ecaec559e7e186b3122fb7c844c6cc", "ref_doc_id": "a4318342-0fdb-463e-b9c6-5fefd4581718"}, "b24e53e4-ab6e-40e9-9d2e-951aaf6009ed": {"doc_hash": "ebbe6724913b68f5322f484bee52748b087635ba70ec57924c108e21c1ce9961", "ref_doc_id": "464b3ef2-4936-4adc-af6f-558bece90245"}, "bf6ff324-56cd-4865-8312-23f98d8613e8": {"doc_hash": "fec82fa0902185a78fc82857d91ab074a14ef47eec3539672155cab16f82fc23", "ref_doc_id": "464b3ef2-4936-4adc-af6f-558bece90245"}, "0123df88-219c-4248-a58a-023565e91913": {"doc_hash": "32b3e2e4c2d4465376d9d650b87520eb90396c018be09763d443c0834c309f18", "ref_doc_id": "464b3ef2-4936-4adc-af6f-558bece90245"}, "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c": {"doc_hash": "d1100d1fc607fb51fdcb99ea3bc511c3e4647d314a5e5bc2a67d64075ba623a8", "ref_doc_id": "464b3ef2-4936-4adc-af6f-558bece90245"}, "753b63b0-2b88-4389-901b-94125897a951": {"doc_hash": "c317cf84eaba183b2e2a3ec04b1350e7e27ca314fecc7ea9d1e173276675daf2", "ref_doc_id": "464b3ef2-4936-4adc-af6f-558bece90245"}, "bc948c70-bbd7-4d7c-8a47-3e80c35383bc": {"doc_hash": "539d917486d4e8bd91fe54a9e60381a55442e9dee7542be7f03e47dc2e3767ec", "ref_doc_id": "6991ec33-d8f8-4060-940d-1cb7bfa0a253"}, "50507d79-8b05-44a6-9f20-f4da931e2775": {"doc_hash": "447b0547f8b0ccce03470ba6794a6811388453d8bacecea3c0cb12aee113ef11", "ref_doc_id": "9e95a88e-f41a-4286-be3f-7d6729e609c6"}, "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f": {"doc_hash": "812cb80eede81be281bde973b858608f98f3cb87b29071e269dc07dff9683c2d", "ref_doc_id": "9e95a88e-f41a-4286-be3f-7d6729e609c6"}, "d2ad00a5-2826-4758-9845-52d416ff3448": {"doc_hash": "23fac4eb76de6f32f95f442a468ebe6a6b5db74129421776a35e606a5f145a27", "ref_doc_id": "cca33da9-c372-4b55-a042-09e3aec3cc8d"}, "045806ea-f860-4773-9cb1-807d7bfe9f4d": {"doc_hash": "12580ca98ca7807cda902a45be191b384db096fb3d660c3800c4c68abd8944cd", "ref_doc_id": "cca33da9-c372-4b55-a042-09e3aec3cc8d"}, "3023c8e9-f1d1-417a-aae0-adc32afa853f": {"doc_hash": "03ef004ef2e06807287d8589081e373007df8ed2f48a34031d2919ae2bdf29e5", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "705820b9-4248-4655-ae14-f2317ce6b0b0": {"doc_hash": "46571ce3cd0fa9ddb3e211513533bac7ef5992b0f8e78cc82b3ccf42108192a7", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "429a8860-21ec-494e-9982-62fec63dd5f5": {"doc_hash": "3bcc08bf4ba464a61344ccb443119d864bb73ed33237b6fad37ac55e010864b9", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "7fee588a-f737-4637-aa7a-2450fe027550": {"doc_hash": "3bcc08bf4ba464a61344ccb443119d864bb73ed33237b6fad37ac55e010864b9", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "230b037d-3e5f-46ce-8cb9-35d43ea8f84f": {"doc_hash": "474797eef7e1cc29518cc8c17658f564bd1ec24ca7c2abb5e54d7d2a45e8b832", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "98bffdd7-12cd-49b3-8398-793a25e9f4af": {"doc_hash": "ddf5c1160ef25731bb7d57c64830d5fc2ee0e9ef3f02a3c5ad1937f51df2f0ac", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "9dbeac20-7d40-4198-b14c-41c646632315": {"doc_hash": "17c9c7300e514eec505632115902720bcdb8890a2c334702bd2bdf5f747929b6", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "36e4e463-0e61-4cf5-8c50-8a47fb5acea6": {"doc_hash": "368a9bca68bc9cca3c9c3aafb057a706653710127a0e5d638174a4da5621e309", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "62a6ddad-9dc8-4f40-937b-7d6a9f077411": {"doc_hash": "6ec61d8a17861b2a3ee0e361d676524094468ebd1660f39bda0b4009c50d966a", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "e9f75657-4699-4c28-acab-8664160d08c7": {"doc_hash": "184c8443daf4de4b3f76cffc491341323e0660a5f67c6f2964ea7b860890031f", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "94542e8d-1c89-438b-bdc4-ea6fd06a4165": {"doc_hash": "6dbfc477cc0bd34b48aa4baf57addc001f076043319820e74e9d6fcd4026109d", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "341d636e-1050-4640-8579-87fc35ccd746": {"doc_hash": "0abb60a23c7aa320e1010ce23fef175d6647f628be9d67f0619a8e448575076d", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6": {"doc_hash": "f6aab519c37866c54e1a9038008f0f1e9ed401bedf93307ff7b70ec5be3278c7", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "0b5f7f54-eef9-4438-9b82-15350e3cb40f": {"doc_hash": "48bd5cc82d1aa65b36316ef8a9dfd307b718935a678be1737cbead4a5bd616e6", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "78a5cebe-7f30-47fb-a0cc-76dfce1c2637": {"doc_hash": "4f3a863bebee725bf13a774df7b0bec8dbfa178e52cb431dc3bb372a0b326a4c", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "3d88ad05-653f-47d8-be58-e29907f9a7aa": {"doc_hash": "88165c825ba09b357872f397edf433946153f657ca2a3ae6fdc7d96b55bb5b35", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "47f35d06-4e53-49e5-881c-9bb078c9b90b": {"doc_hash": "44e9118223358846f8d9faf3b132bd8aee1336685dfb5abf979bddabd8066e19", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "efd95891-9911-47b1-b59c-f73f6ebc8d83": {"doc_hash": "f470df86b13f98c99d52788fc5d8bdcb5c8d8db6821b8caf7b2de97ab3652c1e", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7": {"doc_hash": "29253b1842ace2852ead1f7b7367255a69767700010d57b29f99351aadc4b3fd", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78": {"doc_hash": "c1ad1fceac0060bc0f7c6b47af033a2b14eed90e7788d76481f4ec2aeb19346d", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "8aefe10d-37be-418a-9b56-f8ff99aac41e": {"doc_hash": "82f286538a863df05b3376254d1772f00facd6940b1e43101cee069090625d45", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "22d77424-b8bb-400d-a9b5-22e38ff789dd": {"doc_hash": "ff7480e06a5b587a160c8635cbd083d9cabbc0bacd0868902d18ca31e545469e", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "b994cc84-636a-438f-810b-a998d1535903": {"doc_hash": "cf48acfb171acbaa9840eb61b287aed2a3c7699867cb30e5ed93d7b6213575a8", "ref_doc_id": "d990a440-4521-4096-a633-6a4def9749b8"}, "60870d9a-a6ba-4a1d-84b9-db5d00150a31": {"doc_hash": "a510f865413e27f12a1c433e044d026925eb033453e288152aa6f5c2a9104649", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "c8178ba9-623e-4db6-baee-098ead12e8dc": {"doc_hash": "943a3a1a714ccc9bff7300669ec709e225cc562190637707dac008cac09d4dc3", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "005f7552-b6ef-49f0-8528-e0f6a8765f0c": {"doc_hash": "ab38c6bbb31919282ce2ce43888110596fe9159cd7664f9bee4d4e70d5ccc4b7", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "c572eba8-2892-48e2-bcb2-6fc44eb32294": {"doc_hash": "f782b6730fe920200ef4a65b02169f7e27efe7effc2b3e2afb287fcd4edb4624", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e": {"doc_hash": "cf980197d6966d39598b35c56a409f5076267cb6acf42d2dc26a0075430450b1", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "8256e890-aa14-4898-a2bb-4ea3f0395674": {"doc_hash": "dc475d0145404cafff28b2b97a2f4d359c58a93b116722286cc79d30972984e3", "ref_doc_id": "4e7dd618-bd56-4dab-a747-94ba28f85512"}, "0e53f92d-ff3c-4fe5-811e-2de02b56e34f": {"doc_hash": "2e7cd16a978774c6ae291d7386b21b43957ec6ee095b3de0e6b34ec556199e18", "ref_doc_id": "37a7f555-ff29-4430-8da6-683b7e6f653a"}, "dda80d6c-cbe8-496c-923a-cc3a935eacdd": {"doc_hash": "62844cea8a6df5ac1a38eb2fa2fc6012a0bc230bfccce94471ca8531f81a86de", "ref_doc_id": "37a7f555-ff29-4430-8da6-683b7e6f653a"}, "bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01": {"doc_hash": "2f9c3cc0772345ad79006f1ad52b203bd5705e60fe1d23ff89d92a960566ddb7", "ref_doc_id": "1f3f10ce-a7fb-40cc-a672-6375a21de651"}, "71851a56-959d-4d60-be22-ea9cafa81b65": {"doc_hash": "bb987cdc28be14529dcda93a9a7179ba7b1e07ddc8d7f0260e726a72c31438cc", "ref_doc_id": "1f3f10ce-a7fb-40cc-a672-6375a21de651"}, "0ad9879c-9160-4b3f-97b8-15f15ad4cadc": {"doc_hash": "e93f801f23b7e956384baac243df83df3d29a76688a28fd3086f827560c6f12c", "ref_doc_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff"}, "cc3ed1ed-59fd-4021-8598-37800301ed2e": {"doc_hash": "f031d8c2629c8475607718c3a86523333f4b18a2f66f71620328efa594f4de31", "ref_doc_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff"}, "a81886da-54e6-47a4-a08c-baa232923d8c": {"doc_hash": "6626e0281abd97108e565251e515d9cfd6f3b6a7e7f6955e78b831f6bc080074", "ref_doc_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff"}, "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98": {"doc_hash": "6fcef734c4e8eba7b188e7e3ae3c436004d48222156515528bd7e2323c52eb8e", "ref_doc_id": "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff"}, "d0c65263-3695-4d32-bec1-a77b4ff9bd3a": {"doc_hash": "c6ba82d4273b79413443310ac60aa2f4638adf40005f013212878f2bc25bf00d", "ref_doc_id": "fa94194c-094f-4782-9782-dab52b115a83"}, "2279d4a7-0f8f-4a4a-9192-2b44e96aed88": {"doc_hash": "f1e076bd9098a979dff046d7727980ab3f98ca0d015169843b47da886b0bd981", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "6538b8fa-74ca-45df-80fd-77c5dbd569fd": {"doc_hash": "34eb37db9751f9b03770261218ed73c8acd53689e77d0d661d54328d97a3b552", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "fabfd1e0-c961-4447-a143-3f0c5b437215": {"doc_hash": "5a68c40bf51d3b74814590a5406b3a47aba9e70c48c8771c77f7b643cb1224ec", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "193c9687-4958-47e9-802a-edcf71fe4440": {"doc_hash": "f88300aafea66855147fbf8cdccf2a54f58980f415af8ab2fe657e3e673c3bf2", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "363f2f51-0db7-48bf-8c3a-ee81f19f73b4": {"doc_hash": "655f40c63341ab3b53cd3ac7dab9bb25c066247a3223b039e0ab624d05c73a07", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "a698082b-78e4-4713-aed1-63391875427b": {"doc_hash": "43359e2fc54818fd91a41142f349e83896f7962342addbf93d9a0422b0568293", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "101ca0f4-0471-43d1-a17d-44571a75347a": {"doc_hash": "a4a2d2904ee36aa8ffbce8ba7a905ab6955c4cc44a53cb0ce1dd21b9e46016a1", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "2b489401-eccb-4be9-88fc-bedd122f5894": {"doc_hash": "5b333d98baa6765908dc0ee8d73edd9e7d494cc5da37e68e20f1f6d209acb94d", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "184adf63-263f-4843-ac9d-90f6fb755ee1": {"doc_hash": "6c733c2dd6a1030a96fea6a13d2fdca2a96400634ecb8563eeda11520a2292cc", "ref_doc_id": "1ac4c500-8770-499a-a627-b79daf7e9cd4"}, "dfd20525-4292-40ce-afb2-04550eeec783": {"doc_hash": "83d1d90d0772cf9ad79f71a806609c2844abda5bbca669c39e2380e026781f36", "ref_doc_id": "9c487412-f781-42e6-b077-c2b5f4a77391"}, "cd972226-0f4f-4409-982a-c795d5a690ea": {"doc_hash": "8a71d9e0113165cdfe7067e32c7205584d9cfeae3884e272c548c43d3a605dc9", "ref_doc_id": "5312403f-2fd3-42d6-bc4f-36bc983f71e6"}, "946657fe-430c-4461-9cd5-99a54bac0391": {"doc_hash": "893ba0801d815f5a08772021117e3bb63069d117a194eb13e5ebf574cc90e626", "ref_doc_id": "df1f81df-f62c-4bf5-a923-862c23f0c846"}, "61f31d3f-d29e-48c3-8b76-918fe1b009c3": {"doc_hash": "7c96f34dbfd07d2b97e85970129817e5fd255a15965d8c2d6675002b3c172ce5", "ref_doc_id": "df1f81df-f62c-4bf5-a923-862c23f0c846"}, "30d7cb37-deb6-4a2e-91bb-192e3d7399f8": {"doc_hash": "e33332ac34aa92848ebec9f34d56bbf83ff537597478eb7de2efb3de2da23031", "ref_doc_id": "df1f81df-f62c-4bf5-a923-862c23f0c846"}, "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb": {"doc_hash": "1f7f25354c0451edfd8bb9ea41817074968e02457c34ac2932b9578c53d32b93", "ref_doc_id": "df1f81df-f62c-4bf5-a923-862c23f0c846"}, "02a4504c-7be8-472d-83a6-0d1922ade277": {"doc_hash": "a65f18a0aa8a4c6d859fe19143730fff300e1263ae72e25e44fd714d4b67a394", "ref_doc_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0"}, "47388fb9-c281-49b7-b46a-af89caade6d0": {"doc_hash": "95a7b3b4cc9580ab42deed0c21152316a683db4e0a6e552277d80d2c578b90a3", "ref_doc_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0"}, "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7": {"doc_hash": "701c7e3156be49c1f2422d5a3d37e3a668c3c387394769e37534921261b14bf4", "ref_doc_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0"}, "03493dee-aba1-4ef4-b970-ec22825ae030": {"doc_hash": "d4864f34f47ce0e25d9af288f2b9994a181fe194c259e076ebc99f6778f56ef7", "ref_doc_id": "918c3bf7-0f84-4621-8f27-39a4f83ff6e0"}, "3a421482-255a-4e97-8a5e-3ef5d5de6c02": {"doc_hash": "eb34af7dee14f2ee081c1f5eed38d859cd6795ff8ee1283cf26396d842790448", "ref_doc_id": "f995deb2-791f-44a3-a234-a992ac1da842"}, "19238073-44df-49e6-b692-c69594a9212c": {"doc_hash": "2ceea510122f8bdde28c680a4ef101d93eaccac585073e68899dc43630127e03", "ref_doc_id": "f995deb2-791f-44a3-a234-a992ac1da842"}, "c45584a2-e8de-4f8e-a542-bcc65537616b": {"doc_hash": "20da4bbca917f4a431c4e9cbb98eef1cc89643e9aebfecdf05e61cc300622907", "ref_doc_id": "f995deb2-791f-44a3-a234-a992ac1da842"}, "c87dd12c-e1f2-4995-be84-36c17a88668f": {"doc_hash": "2ae3f21dfb59b469494fadc07773baa48021fd66308deec66660962a53a6a070", "ref_doc_id": "f995deb2-791f-44a3-a234-a992ac1da842"}, "55510a23-6a03-4929-aa3e-55f65ee83217": {"doc_hash": "780538276e101dea0055d36ba756cce512c7aace152b2dc598a1e39d86a18aac", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "75f434e3-98a4-47c9-96cb-dc863504d1c1": {"doc_hash": "34fa2697f47aaa1e12caf7832a88f4cc726e1ac65f34063e4ccdfe7bde99b49c", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "e6fd2450-c106-4773-8842-a3a34b4a17f3": {"doc_hash": "29ecf86de56917cae57ae73a30568be99ab3025aff532f66435d02c4b3f9cc52", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c": {"doc_hash": "2b9fb7ee2e8f94b6bda58ca5c2fee5e9c9abc05300f791cd4e33996cb266fbce", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "ab5fc295-629b-4c06-96cd-cf6349080f2d": {"doc_hash": "e7fdf1e4153b5deca23e8fb8c9479ec8c318989f3064e92bc414c5a5bf463726", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "3982b0dc-82c9-4ace-9246-eb367317b98a": {"doc_hash": "29ecf86de56917cae57ae73a30568be99ab3025aff532f66435d02c4b3f9cc52", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218": {"doc_hash": "d70eefd341f9f3bf1d026aa547db1d901a3d6be67e639dd982eeadc621bb97e0", "ref_doc_id": "e18a3ae7-2442-416c-988d-3cb9d9f4c63b"}, "bbfca7fe-4e42-4eac-a3d3-c952485f6b4c": {"doc_hash": "f895e5bce2d5869313c1e7bfe7bf36258f748984d8ecfac96cfd76cd50808f34", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "150c787b-fade-4703-b677-285b522f0f05": {"doc_hash": "f05674a17895088e44db84626c4b343d5f40910529002ea31200556eff3789ac", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "aa733f5c-72b4-4799-b92b-d5194598cb14": {"doc_hash": "4afdc98be002c9022c04d465c4498607522505e1a2fbdde93eb55ea7d78e8f4a", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "d1371532-53d8-43e5-a400-1a2941904092": {"doc_hash": "a2162f35e37f89eab95a899458d92c80ea2ce8fb7b7366737e4d7e222549de19", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "6076c666-142c-4b90-9b18-186e312ff1f9": {"doc_hash": "f2072b9316b5432eb29965d30249724d02d06ea8029deaef5ba114d20f28f03e", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd": {"doc_hash": "6051b583b30912ba9129ba950c6e0d716d444b6ed47c3dc5309de76cc3ea264f", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "82a2bb6d-cd91-4ab3-850f-84e31a644163": {"doc_hash": "8a3596c7bd473a658d227fa399c382bdaa5cd2ad88f9ee1e376d3b0d76e262b5", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "1a693fc0-804b-42eb-ad3c-ee6d48b609cc": {"doc_hash": "198e1346661ae5cd4ddf8146ac50fe5d38779cfcad70c3abe1e2712a4d0f36a2", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "1377eb3a-e568-4f10-ba07-d163c4a5707f": {"doc_hash": "cca774c059178cb1f1d86e870ca344b96758ea166128e510272aa4ed3124e84d", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "26738c19-dae6-4c6f-96aa-284b1ae5c393": {"doc_hash": "85de7ca16385a80641fcd25d208d22969a0b33850508f3d99b794e8950b295ec", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "61be3a97-7653-41f8-847b-cc687ffe7483": {"doc_hash": "6302ada41613ab36d9c355989fb823c2d7ae812bdcf000b038391bdb4430e232", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "e9679052-14ef-4c64-b556-f160a9ca90ed": {"doc_hash": "4c1286a3caf14f868fa97252d58d010b5554e46b5dc7703d66428a77beb46f66", "ref_doc_id": "42955cec-d2e0-4d69-8b9d-80a38e335578"}, "d39ed756-b9c8-4fdc-9dea-5bfc84d33102": {"doc_hash": "2ac4534855eefd7cf53b49709dabd1006098d24300c3efbbd5feff083b005e43", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "9b3eb30c-5af4-4311-8e34-e725504468b9": {"doc_hash": "1ba43621bc1713234c97ba20036d015d23b5e9483b52d684cd832ca3e46c1071", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "dd5dd31a-159f-416d-827b-d96d6a6298a9": {"doc_hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "efc4d36b-d53d-47aa-810f-e5a14df81b48": {"doc_hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "8b4d8753-9cf3-4448-b3d6-61145aa51fa4": {"doc_hash": "8028190228ddb0205fd39e0bc61af9adde601b22c574b4d7d469c8a7cdc0c2a2", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "e7b8886e-1788-4201-afb6-c9563d54b527": {"doc_hash": "43d0a56a62d093051ab8db01a5ab4d5a55d80edd45ed251601621696e8469c09", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "55fbeec0-7f39-482e-99e7-f6cbc6e9c156": {"doc_hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "23e0b4bb-269f-4e67-a125-0431bf576143": {"doc_hash": "c5fe0eb747188fca88254fa3b47376063e50b583a8e2a595fdabfe40df9b9234", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384": {"doc_hash": "cf27e23f59bc83ea335d6a8ef2adad900d4dbe59e7d2d9aa5958e67070ffd17b", "ref_doc_id": "b8678ed6-beaa-474d-8cbe-59ae4e0f6232"}, "b2ae1a50-263a-44b4-b664-c8beb8a9421a": {"doc_hash": "9ea9ad02402207be39aefa1ee0b58add5e678646f2264eb69d117ba8a0514e26", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "d112ebe1-a5a1-46b3-ae9e-6398ac77991a": {"doc_hash": "b944880b7dc8da8b744c655079566cd117aa2cd942cfe3863eaac60305fbc7eb", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "6aed3507-2b61-456d-9257-30e83a58cb33": {"doc_hash": "8fd7ef2104a720576d8638b2e95ae486babe21f6d2f56f2a66eb5edbec01417c", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "97192628-0e20-49ec-9e51-4883c77e2d92": {"doc_hash": "3b3c899494d34a58a69ada49ef7b27e886c2886eb92cf4d7fbd366eb9057a7e2", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "69941be9-bc1f-4653-9b9b-49ad04715bd2": {"doc_hash": "9f5df78df82e41bcb7d0da9296ff94821284d249fb05aaf39dfd63e969cef4c0", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "7d00acdb-f66b-459c-9566-bcd91707a702": {"doc_hash": "ac2c647964a95fed40ff13ae42b91072a36ac6f97fb6a7fe1558b127253750bc", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "e88a6fe2-ccf0-4086-81dc-0561eeee43d8": {"doc_hash": "7857ee73a0f5eec1d5710262f5bbb44e2aed7fc7ef9317f72bcdd4693614b594", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "9a11d54b-cc31-48bb-83ee-d86ca9457086": {"doc_hash": "594ea356efb763d950922fda37b42aa04537da2b5d4fb7f9c281edfd74da15e7", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "6cf8c902-6095-4d8b-bfc4-cccd4145f643": {"doc_hash": "2b5fcd709d944b9744e5ff81c462cfd779b3f96876a641da10f1b30794bc1503", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "48d9bffb-5ae1-4c46-ac9e-2fd18892b341": {"doc_hash": "b2f9956ccb42e2bf2e903ea345c102a04c301074b598d3dff5115b610aa0117d", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "2665c99f-7999-4d11-8301-7326bfe1bd9e": {"doc_hash": "49355c32a13180c5887ce0ed88ccf50cd06ac777e883e2a959bb11d468c502f9", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "7fa9a414-3284-47f2-bc1d-43b39b201b0e": {"doc_hash": "ec5c647924a0991bebee183c17a170fdbd43469c36e532afe53999319f6bb080", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "bed6c6e2-434b-4e0c-8568-649cf2d15d3d": {"doc_hash": "30ccab66d9cbe766b0b558b45f154733d72a795eb10404753261434357b375f4", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "656ca51f-08ca-4310-97ed-db33c00db775": {"doc_hash": "ca6da9a66614b4f1a15fc3becf4a5389d0adaa937ac6b630fd443034c5e4c5c7", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "25d6bc19-802d-49b9-b23e-6473c75088ac": {"doc_hash": "0ccf2ccb1e63a063a07c56889b059118bdef7c6c83ba4854a7ab6a75e18d36eb", "ref_doc_id": "a89775a6-6cad-4a04-86d2-0efc1d2e5676"}, "6e0508bd-268c-434a-8e51-1eb12ebc3e65": {"doc_hash": "292e7f32659b0a91c0655ad333df1bf9b73bc5dacf63ef976dd11cb8a3ed164b", "ref_doc_id": "f4bd5c25-8f6f-4d11-9c2d-b2353adae871"}, "cff56e72-e6b4-4ded-be81-433ba5558626": {"doc_hash": "9004db446932252afdfa638f171b5d12ce02ba6ae3fef587bd82eba493aa95d9", "ref_doc_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42"}, "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f": {"doc_hash": "3f955e2e02e2ae76203e383e0841d0bd0f4b111a2f3681fb5a957e67fd2a8b3f", "ref_doc_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42"}, "7bcc3f52-12da-4382-8782-e1a1b4f372ae": {"doc_hash": "9427f9e3344432701a2911c92fac1b02975b8998edc82e09d5a6cb96cb00ad5a", "ref_doc_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42"}, "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d": {"doc_hash": "38d8b5265af3ec9e8e2ec298b7940b384aecc0c99a76a8af037cad74b7b01e47", "ref_doc_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42"}, "c392e880-95a2-4e65-a1b7-e4ed5b913433": {"doc_hash": "68b7bafde139c194fa0fc9bd89c0afded76ae49d77d832b721e0d8f8eb72c555", "ref_doc_id": "0764ba5b-bf2f-4ced-b648-e98f9cab2c42"}, "7af3d7ab-1113-43a6-8189-0df0754c429e": {"doc_hash": "b4813a6b2010b71ae6bc852441fd334c09164f889b53e15ab291c73ebe22c274", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "b03b7258-292e-44d5-bf59-a9a7ecfd28b4": {"doc_hash": "5db21588c3e4492fadbcc160e75e8e8fba50cd8c9da6fa6b6f2d017063576047", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "6cc1b16a-c565-428d-8b21-2738a9857024": {"doc_hash": "39ad47aca79955ef1d2273caa2786cca2941c855358a0e0378607b3f3a97ccba", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "43966591-a7be-468b-ad95-53569d2cadb5": {"doc_hash": "75df2023d95dc3ee321451eac5848cf6b37ca67c04976089188526e1268c6197", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "feb2d536-693d-4584-ab16-e91d3388c3f9": {"doc_hash": "8992ee0772a6e567d7a8dcf4a4eab15eca19f22f43032f4f1f71b662c0f37d84", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "56809e29-93db-4a10-8c55-ee99a884040a": {"doc_hash": "a8e0c941ce738b111a22825df5f8a2ce9fdf8d72d31cf5a8b39904308c3a9562", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "3780f5c9-4425-40db-aa26-4ae34e471d1f": {"doc_hash": "281965e511e79aa4bc60119029c21088852399ced3ab870ff237df78c3302518", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "ecf026ef-ee2a-4451-9fa9-55ede7719dec": {"doc_hash": "48ef68552d8b91e7e96af4f84e944151049edacd7ab67dab60f0da6cbd655d0f", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9": {"doc_hash": "420e6489fa08020514f0d41841b340f1a301951631e3e5b51358e9833275b060", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "e66e1018-aeb8-4863-898b-c3a9651dfaa0": {"doc_hash": "315937665994f8a9278e2bda4674c2dd3ac540f5fad13e600fd05c3a92fe88c5", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "a6070f35-f8bc-4183-a0d0-09cd5106c111": {"doc_hash": "3c3ffa6b8101eaae10afb21276ff216dc0852c5db4ba730b5967fc7927cd9036", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "2088848a-d530-4884-b5cd-ff4c63905f3d": {"doc_hash": "4520168312f1fad171587f42da2e09ca1be3f35046dd87d12f759ae80ae8f58c", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "76004fe4-9511-46f9-bd52-82e81f81a76e": {"doc_hash": "9a53736812535c8a5b8af37c04f82b51b49499b438141de43ba02424c794992e", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "804dfb73-92b1-4d7b-af32-ff1b357ae848": {"doc_hash": "7b8a037ccdf2d9518a4c0f25cbcf9d8d4ce0e9d47a61a994024a04e4e2104b2b", "ref_doc_id": "ccf6d3f0-130f-4f2b-be07-749ed3234929"}, "37b97ad3-b2ce-4f4c-a125-4452bf591c31": {"doc_hash": "a24578de5553d2d52b63d420f4ef349ca6f71a13ffe6ae273c78ff1752084838", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "3d6dbef0-5517-456b-9e45-4151b6933b92": {"doc_hash": "4361a4f31fe5f3ac98c8a38bf79408dced21f7e5a7a5572ab0e0801e3a04b4f4", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9": {"doc_hash": "f98bb352be4db3cdf296cdf91d25b3e8a063a641d4cd1fda887149d77d6db8f3", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "edd3eea1-0648-4eb2-bb44-3e050cb566ac": {"doc_hash": "4ca170bae745e0f2f76748c94461a21b98237031648abcf610be56454cebeb9e", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "12312271-e20e-45e8-9568-70be0ceb63bd": {"doc_hash": "44109f3b5a42a8c7b0a1330eefa6084ecbb33f582cb88c383bcd623bcf3d46fd", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "a932b89e-f63d-418e-9868-5072bf545742": {"doc_hash": "a6f347f74824b6715d5509166c93d680b1e1383b291321de9fad10be3683bbe0", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "efb48786-3a84-40d9-b90a-b6226685f95a": {"doc_hash": "b93f2d36858ee1c751d53476910ae9130221a3141ca385e07d9279261a713435", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f": {"doc_hash": "4f08724998030fe7bad6359177d0ef449c4543030e00d56651076d29d16f0494", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "f8827b22-784d-4aac-8166-ec21788a2373": {"doc_hash": "273e7474b758ddbdf0cf8a49c74ee5c3a30cba70ceae0910b59c8b209003e345", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "e7634b5d-54db-412b-96c7-8a48464b5d5b": {"doc_hash": "776c7aaa4226227922b81e1ed0471a96daa5c7eb34b1b9eb28e77c1e1d9bc48b", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "c2f0af91-762f-4e82-93c4-ad4055e99af5": {"doc_hash": "7bd4de54ca8b3c60b9bc2ad8fb42aa87365c7b607120f116335e8340db5ae0d3", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "7199408f-96a3-4c2f-b5f0-519c98515fe0": {"doc_hash": "fb331ec1e2371b58f131bcc8ffff646f567d003e8edb1f95be4884b433831981", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "81047be7-1ac8-426c-b634-6b6ae53fcd81": {"doc_hash": "bd480b2e6737e9045e64dece32c3f343a7db27bc69a41a6ea6036eeca3b3653f", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "b261b107-fe89-4f1d-ba77-402c707ff2fb": {"doc_hash": "1425203151c56507560f49b7ced786e878a872b6fe0395238ac34905515a8748", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "aef46b02-3de2-4c5e-9eea-a304a2eefb1b": {"doc_hash": "833637ad4308b493d37630cb083c3b2f4c82bb413f6ce4462058299efdd05a82", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "2a769308-4cde-414f-adbc-143ad4885b75": {"doc_hash": "6af855c947c9afa85aa57d0cee534e2290414b1fde7d585f40f1fc28430bf78d", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "14368bd1-361a-4e67-888f-a348882dabd9": {"doc_hash": "993813782517bc3132d4bdd6dc3062a2a09dbc6e48899989deadc76acb4fba25", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "a83ed123-77fe-4377-a3f0-f6ca8919102d": {"doc_hash": "945dd2b393f150e755f7ca585ae5be7b9f544eb447e5dd2d399f4c0a81b57b8c", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "d875fdba-e2f9-45c7-888b-0d01b7952f0b": {"doc_hash": "328a1f3da2e3e0957dbc5e7e3b09cf6171d351da85326dea2b055d16b1de2dc3", "ref_doc_id": "d400cde4-f975-4d94-ba2c-3d832a6de57f"}, "84d88e28-f775-4c68-b260-e9c36cde7d9c": {"doc_hash": "13fc457beb3a391c90182f3e274972a49d9c50d587f46a88f4f569a82951a2da", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf": {"doc_hash": "491aa281445dab398d7122c4bd7dc225bbe2d096e17ef5c583c7ea55607672b6", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "67620278-8aa4-4281-ae68-32449995ae10": {"doc_hash": "163d6b87bd0fa6ebb95d5bde6050791cf0dd5f90cb4d016c1a7da3d3f8e631fa", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "69f9a21a-c7d2-41b5-bbfb-825558e802ac": {"doc_hash": "b477abf4df5e1373e8926eb6fe0aa1911e1c553e64fb6071c1cbf5d53141d75b", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "b6d8a9c0-3a5d-4856-891b-fac5620ce746": {"doc_hash": "32e63a9009a4deaf22d9fb8e691e5d406614caf907c250fda683da917bde1ed9", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1": {"doc_hash": "9d0b4ad895de4b3615afbbca906d5009207a909cfe2d106f876a19c04233f8ed", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "d3620ed3-801c-4075-8886-78393cb7d731": {"doc_hash": "62be6b0add5e53306370e6ee496961a877bea6d74caf68068635d89b024a2aac", "ref_doc_id": "6627c0cc-fad8-42b0-ae91-3bdad6426880"}, "88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a": {"doc_hash": "f664ebd71f761c6e10063347b1cede5997d3bab9d9d4bd0352539a35f453596d", "ref_doc_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8"}, "6c5dc676-f5fd-4793-81a1-aaf1df727bae": {"doc_hash": "338dcc53f4b2427110a03d8ab9352d15a144e23b7d0e02b8a1aa472854a82497", "ref_doc_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8"}, "1f64d1c6-8982-47b5-94c9-6d45de3bae21": {"doc_hash": "734e66e25fd4cbc5c2563e6bce1840e0c4c7d85936d160b5fec18f9db2d1df44", "ref_doc_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8"}, "4729d973-49d8-4c43-ae4d-bdf0d2ce68af": {"doc_hash": "093fb995c477c8f0d151196d6286165c081374e99b39658e6ea7066ce16e5599", "ref_doc_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8"}, "4b833f9c-9dd3-407a-a499-bf77c15823cb": {"doc_hash": "9e62cae24e21f929c701bb31f168ef457fc7f7c7210b7e47d90255d2b6dfe852", "ref_doc_id": "55f13a7a-57d8-400f-8ab7-d1964e21c0c8"}, "f516259a-afa5-4f47-97c0-079708ee4ed7": {"doc_hash": "bf7e891b149542e52f0f8c2ce1289dc12702223fad56199c7c661a0e12a013ac", "ref_doc_id": "417ace96-490f-48b0-9640-21f139dd9daa"}, "d1f167bc-9c85-4e9c-942f-e68eb19eea32": {"doc_hash": "29539bbb6ee8e825c10426d40fc068e16681951714f3564cae6dda13e60c4507", "ref_doc_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68"}, "544f8ac9-7de8-4f52-a36e-6b5856eb6d94": {"doc_hash": "67f6bb2539fd0ba490a8a4979e18582f885beb2bc88919990fc7fe0b896b7b20", "ref_doc_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68"}, "37149201-188e-4bba-8e9e-e14881220793": {"doc_hash": "595d18425a768eeddcea15c22f2dc5d4e5e1e207aa795a92b7c95ef679d8e099", "ref_doc_id": "c0200062-2ae4-4a30-b234-deb48d1d7f68"}, "c307adb0-525e-497c-8e25-55f445c6f5f3": {"doc_hash": "c99c02d12ffa97d646f467e3ddbad2f40cbb2530d066572d2b5d03174d0f6067", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "583dc71a-44d7-4f49-b374-7f894f9df73b": {"doc_hash": "73a65c64728a399ebb26ea0c9d6e0f8544b763237a5203e0f2c81b70879d7235", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "bbea61af-1b00-44ab-9a3e-2c7c731a2021": {"doc_hash": "04e7bf380c2041baf1b388dd7f3bbe0c484919e8d53e16bbb8ff798791d8b5c4", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3": {"doc_hash": "2a9b3c6a6601aec72e7a37359832beee69d636b0dcb67ba1b533380cfcbc743f", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "25682b46-b908-4ef7-b8b5-c21f06c394a2": {"doc_hash": "19751c924c26987695bb7d8225b1fe3e795ef7e1b7166fb4c8f4e1205d9c5772", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "0ea3d157-6746-47f8-803a-8da2bbbd3e7d": {"doc_hash": "b400d240b340a18a07a853b21f442d73425a525c2de54919a83f7112f1b7e5e6", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "95f95432-996e-4cfd-910f-14088f608eff": {"doc_hash": "0ed45d888bdb793d578c8ce92a717d689a5294111f833844a9b6763ce426e7aa", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "ac330bac-217b-43c0-b9da-0a983b84b0fb": {"doc_hash": "811d21e33da84e15a298dc79f7b3238474da287178f55f7ffe97c343009ee781", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "6bc34ab1-e39a-4401-b379-75248ddb2b1d": {"doc_hash": "f15cef1a9b8abcf7a4c5efe68e9845c0e11e6c5837ffa4775828a82ed6b3c806", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "4edcf930-8b82-48cd-93bb-54270f4f433e": {"doc_hash": "8b2f414a3a6e8e1eb253a8778af1a69b899d2581747a13247304b43d12fa070f", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "ae2f71dd-3b50-4d96-a29f-7379f561cb3c": {"doc_hash": "2af3e4b1916fec825293e6561f8e1c71e045364419486639868f4475a4614cba", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "09946359-af37-4958-accd-651e7fb242b8": {"doc_hash": "7acb599ecbbe59efe429f5dd69da21904bfa005efaffe365cda520e6e81f4bef", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "ba59611b-d33a-4b01-8aec-36f60f2f0323": {"doc_hash": "645a70ed30e44d374b4de8d1281a0c51ad305834843ad17a589d9efe062be124", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "e146c8ab-2115-46c0-b015-86576d9ed762": {"doc_hash": "ebeade083162756a3ce645c4f2c0765bac46c82520ce5e96efafbf917911018c", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "414952b7-9d42-4ca5-a5ce-ef1319d3c83b": {"doc_hash": "c00cbd44919d72566e9b4d05d57ddfbb9da924ffbf9b1a783997543ed09e82f2", "ref_doc_id": "b638b416-ecc0-4bc2-b7a0-9036fa25eadd"}, "4134abfc-88f6-4d93-9b3c-8b0cd4690cf1": {"doc_hash": "9e2c83385ff8ef6600ec993d6c1db8e52c2f1fc32aa0bd657f7c5f6d8e922939", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}, "ee2a8775-cf99-4311-9ea9-3521030aafaf": {"doc_hash": "07f34d06bff7cdf11b6146d9de1d32d4a00eeef04a59a1772db3efafab7b08ff", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}, "0b968c84-01ed-45f2-9007-04b1b7cb2a4f": {"doc_hash": "83606d64828c9790d131916e7b5b5d2756ca3d5160d2fd3b5ea39d28d8618f2a", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}, "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1": {"doc_hash": "ab10ebe257aa33e294a75cd26926543cb511bc3e93a95d750052f5050e823cd0", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}, "75182db6-ff49-4f8f-8d8a-03346b266235": {"doc_hash": "c57504f2bf6b0ef91c8c68bc62c051fb98113243e854e99706068d03bba2b009", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}, "22f13fd2-1628-4cb6-a0b1-fdcbb241df1c": {"doc_hash": "ad09a48d35d29d6011ab9ab7602184247d4a3081eb195ae47ed7afb555dd1868", "ref_doc_id": "0b6929b6-7aa2-41df-b674-a5cae732811b"}}, "docstore/ref_doc_info": {"ee58de8c-9bd1-44f9-8050-b11ae4becf84": {"node_ids": ["b90181d6-5d0a-4728-a99f-dba6c838927f"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 356, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "25e565ce-ddcf-4c26-bf75-cb911798642d": {"node_ids": ["6203898d-79ba-4717-b644-5e383e199383", "685f5bd0-da7b-4e4e-acf2-04c72953af5d", "94059751-1f0d-4cce-9791-2c827b80ccb6", "f0a4d894-40e9-43d2-9101-7347efc4178f", "4ec7c855-2891-433f-adfc-8cfacbba1dd1", "1cc0ab32-2a57-432f-8843-284cb6fcffd8", "da31b48f-e804-437c-8447-7cd245e943f7", "4162af9d-4105-4237-b4f7-218edd693250", "fade3c74-1910-46ff-ab1e-a5f47d504aef"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_init.py", "file_name": "_init.py", "file_type": "text/x-python", "file_size": 6434, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "fc09b3d9-1912-4ddf-8ae4-3ebd169804c4": {"node_ids": ["661526b0-5cbd-4c79-9621-b5752a7d1bab", "4aac7ad0-524c-4fe6-a2b0-4c0861ed5793", "8a455936-cd32-4952-ae7d-9ddd8a3c3dc1", "61ebc023-b520-4f2c-9e95-1e9eacd5b1b6", "b741fff9-9940-4cf6-a08f-427c5e301490"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_runtime.py", "file_name": "_runtime.py", "file_type": "text/x-python", "file_size": 2261, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "9a015b58-6ff6-4070-8e9c-6864c045b1a7": {"node_ids": ["4ae0256b-0a60-4326-9492-e6f2c1cdf428"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/_version.py", "file_name": "_version.py", "file_type": "text/x-python", "file_size": 83, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "83fef82a-3aae-47cf-ae23-9953c81577c6": {"node_ids": ["be88e1ef-062c-4fef-ba7e-4eb79ba17f67"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 572, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "74aa97ca-71d8-448c-a263-f01176910ea4": {"node_ids": ["c9043f76-a28e-46ce-8550-6797ae689b34", "6b48afb9-884a-4c7d-bf19-f7398d22c63d", "218269a3-6391-407b-aaf7-4749c02c96af", "01a3b01d-b29a-4a09-9eab-5ce3a0cc4087", "da292a6f-6839-4bfb-8d5c-637bbe48695b", "c9b4be0a-7d01-4c0d-828a-b2608edc69ca", "84e729da-705c-4471-93cf-f270d1a268e8", "7248a7ab-b1dc-46a1-b18d-ba50da379c4f", "e03d99b3-39e5-4935-8c77-b5d0e1ebaa6e", "f2924ab7-385a-4056-9c54-8caaad86ad00"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/agent.py", "file_name": "agent.py", "file_type": "text/x-python", "file_size": 8263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "3fa5776d-5a4f-48a1-a8f2-ef415c122bac": {"node_ids": ["bab0f365-9f49-4cc9-b8c4-e49d78ea6658", "b1ab4667-3ba5-473a-96d6-02dde0988f7e", "a9ce2f2b-9fe5-408d-9840-016378649119", "382c58a5-44a0-40f5-8f3f-efcf44ed1298", "baf690d5-47c8-4346-9e8a-a88326507b87", "a537cefa-75c2-4e19-9d2f-946b48e76a12"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dialog_agent.py", "file_name": "dialog_agent.py", "file_type": "text/x-python", "file_size": 3192, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "49a8e97f-9f1f-44af-90ff-b02dce1e0a24": {"node_ids": ["54b07793-0bc9-4dd1-b376-ecdc5f65695f", "a8b7a360-e872-4498-8d6a-554fdefa5c82", "33244bee-93e4-4d4e-b1a7-68c303f04b75", "3509d152-f601-413c-b64b-9df5918a9970", "72b2c525-7c4b-4812-a75c-11cefae2a507", "47c5a56d-ea18-4837-a175-79d58f7ad9e0", "cb647b88-eb78-44d4-97c3-48deca1b1846", "8fd9fcff-22f7-4b88-9d9e-095370b28679", "a674bd3e-8894-4781-93b4-eda776f903e5", "e60c9422-bbe2-4468-bb36-4b10299dde38"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/dict_dialog_agent.py", "file_name": "dict_dialog_agent.py", "file_type": "text/x-python", "file_size": 7238, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "c21e103f-8669-4b5d-aaf7-b86f4035ad06": {"node_ids": ["1799e18c-0d7c-418b-98bc-31d9b0c258a9"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/operator.py", "file_name": "operator.py", "file_type": "text/x-python", "file_size": 546, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "b7032ef0-472a-46e0-98ef-91f32bae93b0": {"node_ids": ["e5e54b55-7461-4605-ab93-e262cb4cb636", "f3f69594-2249-45d4-8f69-7efd2cd54c8c", "3cf4a316-37c0-415a-bd3c-80cf9f8c7cdc", "2e202262-89e8-44d0-9bc4-0918fd71171d", "46574ed9-f63d-4f66-948b-ab552db74bfe", "4691c874-261a-435f-b00f-6527dbf70577", "3f5db5f2-ab0b-4e84-8075-21aa02174977", "dab05d0e-801b-4004-9e29-808ce1cdbea2", "5d3a9613-e9f8-4824-9c7b-0d27cae5f2d4", "258bb81f-ccf0-42de-aa7a-78c0841d361d", "5a0d612b-b0c2-4bcf-936f-2377851266ee", "096977be-93b2-4d60-b93c-0fae3be1a340", "4741fec3-d4f8-49fb-bd96-34e659f782ea", "8e1b3ee9-70c1-4d53-9229-e0208dd43ca9", "112db4fa-f445-445a-aacb-676e3721f544", "4c464b44-56a0-420a-a837-e162af077046", "225ab1a2-9b3c-47aa-88f2-fdb2576b1fa9", "9d202763-13ba-4eff-bdaa-8fd42ad5187a", "8647b94c-9ea1-445a-9387-9bee64b249f5"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/react_agent.py", "file_name": "react_agent.py", "file_type": "text/x-python", "file_size": 11512, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "8be03a0a-c290-44a9-9c17-2b31fd6ca86b": {"node_ids": ["f3dc408e-78ab-461e-ae75-531e0f50b91b", "1f51b77a-88dc-4b53-a08d-0fccf0ffad8b", "ace6c23f-6c7c-4cce-a6a9-f646b2a7eb86", "0abec0b1-757d-4164-a97b-802dca884a65", "1050cb4f-c875-4aa1-bb9a-45afb0afe663", "a595f6eb-ae63-492f-bb13-d63d073f877c", "0e467c41-6572-49d1-a926-b71bd24a6c64", "7da0025f-e402-4b26-a1a1-b66d046f727a", "f707b04c-f27e-4e19-8df4-d0d3370144bf", "763a9a82-9b19-44eb-be3d-76b4857beabe", "56dacfc3-3ff3-4b59-b322-01b52adcf5a0", "9661b907-8a09-44ab-88a5-f12fbac1cf8f", "53152c00-0897-461a-a748-f78db2379fa8", "ef2ede42-35ff-4b97-8c11-775f02b553cc", "c59ef9b0-3456-4e93-b54c-645259c70c9b", "4e6eda6c-6f1e-4a0b-9521-52ccec226f93", "441b007b-7232-4b91-a629-f6add264998b", "df4a1682-029c-442b-9c19-d9329e74b2b6", "1e95ecf6-1741-43de-97d1-3a28acfb77a7", "5f53bdb4-2d58-4885-b48b-118fe9074db6", "0c2837e6-c149-4636-965b-55948c8186fe", "1c1af76f-e13c-46db-9b3b-cf0279e91df7", "f3b98729-6857-4d3e-b192-21171cfba6fb", "db62a88d-da0d-41c4-8fb3-82c96aede40a", "451c9af4-c08d-4da7-a2b7-d3c9821c615b", "a06f2471-44c6-4937-ba75-123a14fbcba0", "ab19c48a-a921-43d4-8ca1-f1906bea2fac", "235d2fde-d4d1-486f-9900-8d108ac7973f", "7f0b2f50-aba4-41dd-b83a-1576e3c87c02", "be91ba27-2442-4949-9dc6-8e01ef1fe156", "bd0d92f1-9a0f-466d-bbbe-e2faa297fb00", "422f1889-118d-41a3-b160-1567f06b4b56", "0aa0593d-011d-4c4e-b603-16d5d8afc1c7"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/rpc_agent.py", "file_name": "rpc_agent.py", "file_type": "text/x-python", "file_size": 24799, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "0ef5e91c-fcd9-4593-b0d6-cc26f172e1df": {"node_ids": ["b8fc5047-cfc4-4c37-bfa2-f771b2ab5e6d", "23f15c9d-9966-4040-ba8b-c3b7fb273377", "8b5a9ccc-df53-40b5-a358-b37de987f291", "34b9be46-e563-4c2f-80f3-5a971d5b57a1"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/text_to_image_agent.py", "file_name": "text_to_image_agent.py", "file_type": "text/x-python", "file_size": 1926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "67125e3e-c4de-42d9-bfba-e6d1d91ac6af": {"node_ids": ["aa9cc7cc-4ae2-4219-8e54-da0e93a5d4f4", "169af950-9210-4da7-9b5d-c9968bc662e8", "4dfb56f4-0ce4-40be-931d-a3af4fd7cca7", "3d856b8d-211e-42ee-b047-ce0322df72fc", "2c470d38-f8c5-4604-9e15-863d84daf17c", "161fdc8a-da9d-439f-b4ea-68533a951268", "ba5f065a-0140-4449-a54a-67d9f3a4faeb"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/agents/user_agent.py", "file_name": "user_agent.py", "file_type": "text/x-python", "file_size": 3495, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "45c04801-210c-40ea-9624-9fa9b296cd14": {"node_ids": ["95e2a8f5-9b74-4553-8e3f-1d799f80d31a"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/constants.py", "file_name": "constants.py", "file_type": "text/x-python", "file_size": 1395, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "6eaf29ed-f500-4315-9769-0d08d5b549fb": {"node_ids": ["95ceec4e-67f5-482f-95f6-6ab226d72c61", "ed98c22a-fcc0-4a27-a0c9-454573b9df28", "97f78558-d5e8-4b0f-9fe6-d7a5d3b968b1", "e7a64d1a-f4dd-4b5e-bea9-7109c57b1c8d", "0fbd4497-29ec-4579-9a97-f7fc84a09cc9", "67c4a408-bf45-438b-a93d-75b09fb8e1b7", "40fa8227-95a0-4ce8-a888-9828db45360e"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/file_manager.py", "file_name": "file_manager.py", "file_type": "text/x-python", "file_size": 5320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "a766b2c3-e1ba-4bc1-9289-68448259e06d": {"node_ids": ["882b3318-e945-4112-8feb-469285e1ee34"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 200, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "f7839c67-5582-4f88-afbe-d81a51f0171c": {"node_ids": ["38a4f3e5-fdb1-4620-9bf8-1b40768dd898", "91780960-267d-4acd-87bb-30609b98f56d", "aa3a2110-c458-4ca6-bdb4-c3aa54b750af", "245137c8-a387-45b9-b2f0-510fb273815d"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/memory.py", "file_name": "memory.py", "file_type": "text/x-python", "file_size": 2313, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "d6ad258e-a29d-4317-a848-283df0b98d49": {"node_ids": ["9d327349-d31c-4fd2-a763-ceeccbc70b11", "ff157f11-3b85-4bd4-8505-27e6b960d8ad", "fa16ac99-534e-45c3-a614-5c21d6f62cd1", "6fe10d09-7a06-4bb0-b93a-00daa2cec5c1", "bb1f7104-21f5-4153-9b05-f797b1000df4", "29f282be-aba6-4aea-b88d-de131065b3fe", "c5ae2a27-a317-44ce-9892-cd04634849eb", "c321a865-c95f-4836-a3a5-1336e0f1a9a1", "ed5f6f9d-b49b-4e69-aad5-cd49df3eb234", "9bd02d82-7567-4d00-ab80-d5bc58001917", "9eae1e0c-9a44-49d1-9da9-8f516a6689bf", "85fbcd43-e2d5-4dd3-8e16-430d1132f11f"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/memory/temporary_memory.py", "file_name": "temporary_memory.py", "file_type": "text/x-python", "file_size": 9381, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "2ae29d67-0f1b-4b30-8b48-5c969605a79f": {"node_ids": ["64078886-cae2-48c8-8226-0559eae7271f", "e44b5d8f-fac9-49c1-b825-cedb539aae07", "10f92351-a74a-4d22-8fda-c1a29a27aca9", "81c917a0-e0fd-402d-ad50-83c968959ad2", "4af09518-3a46-4610-bcc9-2d4f24ce0884", "8f853927-f7f9-4f37-97ef-d1e707ffce7f", "a856d40f-4dff-406f-932b-b877b6e10767", "e34c5af6-2181-4a55-ab42-7780770de831", "782a40e4-b6be-4631-81a7-2353a7b80aed", "7ad143af-894f-4f61-95ee-c6455cda4561", "92176222-3315-4d5b-80e7-00d4d48323a3", "f5fe94cc-b118-41a6-b1e9-586f531ff4d0", "74856c6c-4576-4b82-9669-6e4d7f105936", "7c3f0619-7004-4e4f-a844-f33fa57c0820", "b4d4fada-abd1-4240-aab2-7a6a03a32e7b", "cc73bfa2-cc59-4ff2-a927-01f89f7a39b3", "3f6cecb1-ab7d-4fb0-873a-018ed9da20f1", "bf5bfb95-8ff9-40c5-b0b0-774bf63e1459", "e7798f01-f1ec-4ef9-add3-75fff329204d", "51c4d48b-ab16-4242-9ca6-bbc0b0469534", "e172ccbb-b03a-4ab6-b18c-f905f22b9f65", "40b1711f-7093-46a0-aa0d-618080e3bbcb", "eae9122b-b233-427d-8a6e-39c79ea74bc6", "31e68403-f414-4471-8f9d-b80d2f82f53f"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/message.py", "file_name": "message.py", "file_type": "text/x-python", "file_size": 13050, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "0e6a4fad-a358-46bc-b677-7b59e89725b4": {"node_ids": ["2673662a-7537-4e18-b116-1e66ab62e20d", "a564584e-5a60-4280-9d7f-eadf9df9c4ba", "b41d605d-8b8e-4cbc-b13d-cf2958f6ef3c", "72369850-83c2-4efb-aba8-797721a36f0d"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 5026, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "ac5bd7ff-e16f-48f5-a2e0-cc39e0776fbb": {"node_ids": ["e976dd0a-ceb9-492d-94b1-ba0c7a2f14d1", "72d9674e-ffec-4802-a3b6-564d141edb8a", "e534ba0c-7149-4ccd-ba37-4384b1ec035d", "8f17d0d5-a7db-49d2-b67b-33023253e5a2"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 1747, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "f2a5bdc8-a644-4841-9d29-37aa726c355e": {"node_ids": ["75e5157c-84fb-4fed-9054-056d5d63fbc5", "ca73f10f-83fd-4607-8c5e-3412ef3bf05e", "9c3ba30a-f500-49e3-a240-0c779ff13268", "2b941f72-5ea6-4132-b957-e1b306d02ca5", "fdf055b7-b5a6-441f-8ee9-3d8278da6606", "68a6b7c4-bd81-4f2b-a7fc-6689ee35c545", "1c74c6c7-6039-446f-80a1-4ec966242f84", "a1ec3e15-ee62-43fa-83e2-d4a9e3d22269", "72592a52-436f-4188-812d-d6caff7ffadc", "af7ceb01-f97b-44ca-802b-2d27598a7fb4", "bc314749-c61c-4a5e-afe5-9389a5d19646", "0d3adaac-fa90-4307-a8ae-b746f2f1079d", "e534091f-6efb-4397-a1e5-3eeb2cf40fe8", "2a740350-92a6-43fa-a721-b4494363716d", "5c8fc61d-96ab-4f6f-8cec-81b65b2e34fe", "d256475d-b303-4f68-bd2e-79aa496494a8", "b651d5ad-b46a-444d-b5fa-542baa9f4386", "67835fc8-734b-4a1a-b82a-710c50a0a884", "091f75bf-258b-4f3e-8c34-bab384df81a5", "94b5bcc6-6c3c-4d1b-b2b5-16bbc771f7b9", "19060afa-ce6d-45ad-bd6d-e50d9bd315e3", "cd841260-f94e-4c83-a69c-375116d287e8", "fb66197c-a7ef-4b3a-ab90-b4dfaaa9907c", "2e674e15-0e42-48e3-a4f2-c124484de031", "4d76e23b-cbeb-411c-b66d-c3e1dcc4c258", "a92cd33a-cfb5-4af0-ab87-f5b4211b7b06", "2c6707b3-f882-4cf1-bdc6-9209f0a6a562", "1be20fd3-0a46-47ab-ad57-58535db5324b", "c3229ae5-2418-419d-aebe-b156fea0e547", "4550218c-42d5-43b6-8042-ad70f9e8b527", "e06f7637-a766-48e1-9583-95970b8ac487", "783e84ed-57d3-4579-bb0a-f54699e15af6", "0ef315d5-d8ab-42e6-8450-12b1d68354ad", "6c47d8b5-e46c-4423-9a33-cc6791c588da", "021bebc5-d93a-4d5f-9c59-cd9d8bb5393e", "3e7e95d2-973d-4a5e-883e-a44891706d92", "49a4c69f-5fee-4c17-9d72-4c39b4dce24e", "0237c132-d746-46bb-870d-46354b5795dc", "b78c7020-c8bb-4c7e-816c-9f11886ad474", "c2380615-08da-46cc-ab66-7a4f33c80b91", "8e1d4db1-52c1-4aa1-bdf5-71ba226ddbcd", "d6e6765e-7840-4715-8a42-cf33b9862e3e", "a11e9824-2869-46ed-a838-676984557a37"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/dashscope_model.py", "file_name": "dashscope_model.py", "file_type": "text/x-python", "file_size": 29463, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "03c6a9b6-d808-48df-abdb-2ddd1ec3a179": {"node_ids": ["c0495bfe-1a0c-4cd1-ae66-40883828c2b4", "f6472245-626a-4296-a004-310f3b976681", "ffc324c5-0231-4ae5-899f-8e772facf936", "ca4b256e-37d1-4dc1-960f-82377c42dd29", "56a49ea1-71ba-4c9b-b038-89cbb7fbe844", "f6c4ae82-eb15-4135-a8d5-6064710c408f", "15831b4a-4062-4ff2-a66c-2c2c528cb106", "58e69df0-da02-4822-885e-3a0275d7f722", "60f2dd2a-4b3b-4e12-af83-8691571b1eea", "3c5c0e5a-3157-4202-b233-8499fee1b519", "fe6a9804-a6d0-4200-8f9d-409370ed1203", "7c8d8bbf-bdd5-49d2-88d9-da658ae23448", "84fcef88-f6ae-4255-b556-ce142aafc677", "cc8d88fd-923a-4207-bba6-28daabdf974f", "20615756-a358-40c0-b84c-fd8c37bcccde", "99724ed3-14f3-47b7-96e4-b779d5421e96", "58c1e7d9-d347-45b9-932e-42f00876b4d6", "7dfcecdf-6e09-4a9b-a688-15a28025a576", "29e80fb3-98da-4733-b9ea-b2f26bda6889", "494dc451-1827-4e9f-9740-5376a0c9d99a", "7cb4da1e-58f7-4f77-8334-a65b4ceceb16"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/gemini_model.py", "file_name": "gemini_model.py", "file_type": "text/x-python", "file_size": 11877, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "66e11a8e-0f44-4fe2-822c-6c23c42941d6": {"node_ids": ["621294b8-d384-4b45-93ad-d4b76e24bdbe", "1eae6bca-106b-4515-a4aa-04108bb80f97", "7dfa5fab-0e35-4a3b-af12-3f4cc9bc14c4", "474e22d0-e39d-47b3-99c0-12bf087ed464", "f333c670-231d-4de2-b32a-d725dac6aa2d", "6fb7b0ef-28f0-4114-892d-07fc2c8479a3", "cba04589-577a-43d9-9369-04a1ac5eca49", "5ad8a426-6ebc-49e2-bf63-f197e31bf861", "27691286-5e9d-4e3d-966a-d2a7fe3bb21b", "b90b0442-2079-4355-a317-d489d27b1197", "c8326f76-fef2-44dd-b25d-0f4f307aa49e", "e1b59c84-a426-48be-838a-4fcbf62cf02a", "0372a16c-157d-4d05-928a-9ddd0fab26c8", "077746a1-b726-4e07-9aac-fe97aa786d28", "2e48fa02-59aa-4ff3-b677-a5d5a074ebfb", "6c6c4d69-530a-478a-84e7-c0690aaf5c6e"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/model.py", "file_name": "model.py", "file_type": "text/x-python", "file_size": 9505, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "936223d6-1863-4aa8-a5fd-bdd29c92802c": {"node_ids": ["6aea8329-abe6-45e6-b1ed-8a7f219fd08a", "669a73c2-0f04-41f6-a627-027fd7919349", "cae0e65c-834c-44a3-8085-120f1fbe8b89", "6dfbb0b8-5c1b-461e-8a47-6cd0cebb2a47", "92d71684-287b-470d-b31b-bad374f9b4c7", "64499495-e3fd-4865-939c-72951e2a105b", "38a17c2a-b704-4d55-8b20-df4b53e1cbc2", "50bc42c6-0263-4ef9-9bca-b4cc2baf80e8", "bb69485b-f5f8-4e20-9681-82765d701073", "71072708-968f-4ca2-a48c-3196c6f2d700", "ba7580dd-eca9-455b-9feb-3bc0964334ae", "3dea731c-c911-492b-885e-d0a17a6fdde7", "9e2009a4-86e1-4e73-8b2c-2e55417d7874", "c9449e91-89d3-4e60-90da-c13068c4e650", "d47ab095-261e-491e-a36d-9eabb8d0120b", "f218b3a4-6d5c-41cf-8146-e7647fa73084", "b918bb43-bcab-4b05-9fc0-5b4ecb07622c", "6179ee5c-acc3-4635-bce4-08675d7d154b", "0a491107-c0cd-4774-b209-594558987214", "baf7a626-b347-4cf5-a0e3-1d13a6b786b1", "200542ab-f75e-411b-906d-84b03888815b", "29596411-09b5-4900-8d3e-e121d8b2dfe0", "bb14ae75-cfdc-4cbb-b2b4-044296ccaf8d", "c2b5f652-84e9-4bf9-8e52-ff40866eb696", "a108d786-cc63-4dd8-8da7-3a00b7c1cdd7", "c6e34c3f-7969-44b6-a89a-788d3facd94a", "c2845632-cfab-467d-9920-61eb7c426485", "e1720d76-ff62-483b-a93f-91b2166730e9"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/ollama_model.py", "file_name": "ollama_model.py", "file_type": "text/x-python", "file_size": 14826, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "e0abd79c-1a90-4b2c-a899-fc4fa1466b13": {"node_ids": ["b9d611d6-1ffe-4649-a99c-791abc8c11b4", "abd30c1c-a1f1-42dc-a6da-ff11cce0f484", "442beff7-96af-4069-b47b-632eb930af45", "4b7febef-9d11-4970-add0-dbc4349ebcd6", "512b3fbb-e748-43a8-a16c-5ca6f6669c3f", "0b0a4e09-0fb7-4d6c-b7d7-b58bc75fa621", "80e03ec6-4f06-4d77-83c6-fa3c2fc6fcb6", "65bcaf22-ee88-46e4-aa92-57e6d6120214", "3856870e-3efc-4421-afe9-c114ffca2150", "0b4407e4-c631-411c-a43b-bb3a13c607a9", "625b9c55-779c-412e-827c-d18dba2b765c", "070fe84b-6679-4fab-8359-1622e9efee70", "82e34590-6d59-4f55-9e33-b00be693fcdc", "50143c22-65e0-4e7f-ab78-ac8f31a1b627", "24e20a16-7ebd-4ebf-aba7-14697990c2f7", "be8c6114-cf70-4669-b656-b01dcf443c47", "d955bb63-90bd-41ca-8262-615ff2fc6940", "65fd8c27-2e07-4a1e-8960-29776128a64e", "b5ded301-62b7-44c4-872e-301a2253e5f8", "4e8b0be9-2c30-48ba-927e-b2f00034e58f", "938b320a-16d5-4043-9a14-faabd07c3ada", "74260471-fe23-4a90-b01a-7cdd950c4b6f", "00d84840-b2ca-4093-9d8a-2ced27744132", "0949c5d2-b20f-4a99-8769-0a2b7508604b"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/openai_model.py", "file_name": "openai_model.py", "file_type": "text/x-python", "file_size": 15637, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "b6687bb3-9a4f-43a8-8eb2-c463947900ab": {"node_ids": ["1e6b0ac4-62b0-4669-93f5-c1ceb98c8f4c", "1ff61220-56a9-4dbd-85e1-bd71d454d33d", "1879acd3-2a22-4314-b25e-fb20cb88f5cf", "f914817a-8b72-456d-93e4-fbc96996eecf", "68e690d9-24fc-452b-a84d-003c1c761c13", "605531cd-0255-4282-a395-05f4ae4da847", "6ec7a1b9-aa56-4960-a600-7e21fa277c0e", "001dbdb3-8b84-40ca-b1eb-e495d2585290", "a9514d9d-b6eb-45a9-86df-36abf1dc0265", "3e7799d2-1623-4ffe-aa10-df6b078313a6", "2801fdac-64d1-41bd-bc4b-6bb236251f1b", "12f3dc5a-57ec-4598-ad13-4cab5c21b956", "6494e0e8-4243-4cd9-9771-493359de84d4", "a11f8710-89ef-4c51-8932-a29ee3311657", "d89054a5-7344-4651-9973-6596da32699e"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/post_model.py", "file_name": "post_model.py", "file_type": "text/x-python", "file_size": 8299, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "9d9feb21-0e61-4670-846f-cadeb250cb62": {"node_ids": ["bd69364a-5aa0-4c34-98e5-78c426795885", "867e25ec-30da-41b0-9165-f61eaf0ef9f9", "96eb79a0-d3e7-4f67-9320-e9b64b35d04b", "efca9c07-82b2-4a07-9b93-e0dc9c9dd83e", "32e20de4-f236-4c0d-af50-2ddc688137b7", "7b3e019f-3b40-476b-8514-c739c2c4d303", "825a075e-3414-40fb-b5db-76b54047355e", "869554e3-eb78-4ff4-8ddd-7b2a5c2de95e"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/models/response.py", "file_name": "response.py", "file_type": "text/x-python", "file_size": 4879, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "ef4527dd-f698-4784-b75d-405c21e248ea": {"node_ids": ["15fc1be8-be12-4ce7-bad9-97b08336af4b", "09c76815-8809-4cec-bd9e-8c5284907f55", "c6e372ee-dee0-4783-b3f8-7cfd914d605e", "f1eb64ee-9ffd-4fa3-9422-4761637130b8", "b294f3e3-0f69-4bc8-b9fd-9dbb67aff187", "12f88757-a0c3-45c8-bff7-c7dda5e3ca49"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/msghub.py", "file_name": "msghub.py", "file_type": "text/x-python", "file_size": 5007, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "9e07abe0-cad6-403e-8ac9-8c7acf85f0ad": {"node_ids": ["56d2cef5-cd53-4230-bab4-b630f06ef9b1"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 520, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "c28811b7-29b0-4244-a09e-e53be1668146": {"node_ids": ["c63fdb9e-d023-4eea-80fb-d1f0e0227773", "061e4e49-c976-49c9-830a-fd59899b8b9d", "14188d41-f023-43ef-8ec0-78ed3bfa120a", "05bdd821-2276-4e23-aaf2-b7d34e20f038", "2edd8818-66b6-4c31-b401-8596b47a5d79"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/functional.py", "file_name": "functional.py", "file_type": "text/x-python", "file_size": 5435, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "8065b83d-e8eb-4e30-8008-77e487103210": {"node_ids": ["367fffc3-5133-47b2-bacc-71c3d6b61cf9", "f039bd9b-8408-4cce-9152-3e83b6f810e2", "caa73846-6dc9-47ba-b9e8-e89484d8acc7", "e926d6f3-8b88-48bf-9220-c951b52dd37e", "8840dea6-d870-4245-ba9a-4e69f2da9f3b", "a22e70e2-6300-4c3d-90dd-71ed2e9611e5", "c8833993-5527-4046-b5df-51eba96cee9f", "4bc9523b-5a03-4941-a375-07c64f44726c", "221f1617-05b2-47e0-9568-289ff670771c", "0b1d58bd-c4f4-4aa2-ae92-556cd88ed4d9", "d1d24dfc-8fc1-4aa8-8927-15c2cd12cf05", "82bdd6e4-3212-42f2-9c93-25b03aa08597"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/pipelines/pipeline.py", "file_name": "pipeline.py", "file_type": "text/x-python", "file_size": 8182, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "e02fa90f-58c5-4949-af98-c41334d7f032": {"node_ids": ["aef494ed-0ec6-4079-acfd-71ff9b8a8742", "8e147be5-c149-4f30-a09b-7e58b4b0000f", "1c5ff953-d156-48ff-8774-9fd6b9d52d77", "44f24a64-b214-414c-a221-74e137000347", "9170ab64-ef48-4a04-b90b-06491b7fc38e", "b7a4d9bf-1a0e-4b3c-aab1-96bb9f0018da", "34e337e0-f3d7-4524-a163-98e62b554903", "6d63588c-ab4f-46cc-b547-bf7576a3bf9d", "14a6a317-5b15-4e22-9423-fc325e9c3f37", "ef3f7b7d-5b08-402f-a7f9-0ec6ecdf8bd5"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/prompt.py", "file_name": "prompt.py", "file_type": "text/x-python", "file_size": 6533, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "a4318342-0fdb-463e-b9c6-5fefd4581718": {"node_ids": ["5cb15045-b0dd-4242-9599-d7a6caae4ac3"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 775, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "464b3ef2-4936-4adc-af6f-558bece90245": {"node_ids": ["b24e53e4-ab6e-40e9-9d2e-951aaf6009ed", "bf6ff324-56cd-4865-8312-23f98d8613e8", "0123df88-219c-4248-a58a-023565e91913", "cc2a8ec2-c740-4b8f-9eb1-76228ebcb83c", "753b63b0-2b88-4389-901b-94125897a951"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_client.py", "file_name": "rpc_agent_client.py", "file_type": "text/x-python", "file_size": 4150, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "6991ec33-d8f8-4060-940d-1cb7bfa0a253": {"node_ids": ["bc948c70-bbd7-4d7c-8a47-3e80c35383bc"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2.py", "file_name": "rpc_agent_pb2.py", "file_type": "text/x-python", "file_size": 1271, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "9e95a88e-f41a-4286-be3f-7d6729e609c6": {"node_ids": ["50507d79-8b05-44a6-9f20-f4da931e2775", "2fae28bd-9dc9-4cc4-a10c-86bacd37e13f"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/rpc/rpc_agent_pb2_grpc.py", "file_name": "rpc_agent_pb2_grpc.py", "file_type": "text/x-python", "file_size": 2406, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "cca33da9-c372-4b55-a042-09e3aec3cc8d": {"node_ids": ["d2ad00a5-2826-4758-9845-52d416ff3448", "045806ea-f860-4773-9cb1-807d7bfe9f4d"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 1746, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "d990a440-4521-4096-a633-6a4def9749b8": {"node_ids": ["3023c8e9-f1d1-417a-aae0-adc32afa853f", "705820b9-4248-4655-ae14-f2317ce6b0b0", "429a8860-21ec-494e-9982-62fec63dd5f5", "7fee588a-f737-4637-aa7a-2450fe027550", "230b037d-3e5f-46ce-8cb9-35d43ea8f84f", "98bffdd7-12cd-49b3-8398-793a25e9f4af", "9dbeac20-7d40-4198-b14c-41c646632315", "36e4e463-0e61-4cf5-8c50-8a47fb5acea6", "62a6ddad-9dc8-4f40-937b-7d6a9f077411", "e9f75657-4699-4c28-acab-8664160d08c7", "94542e8d-1c89-438b-bdc4-ea6fd06a4165", "341d636e-1050-4640-8579-87fc35ccd746", "8d285d27-54e4-417d-ba2d-dd5fdbe15cd6", "0b5f7f54-eef9-4438-9b82-15350e3cb40f", "78a5cebe-7f30-47fb-a0cc-76dfce1c2637", "3d88ad05-653f-47d8-be58-e29907f9a7aa", "47f35d06-4e53-49e5-881c-9bb078c9b90b", "efd95891-9911-47b1-b59c-f73f6ebc8d83", "c79e2d41-a2e7-43e0-9753-4eb1d1c7c1e7", "1b5be1d6-309f-4a7b-b19a-7dfba7caaf78", "8aefe10d-37be-418a-9b56-f8ff99aac41e", "22d77424-b8bb-400d-a9b5-22e38ff789dd", "b994cc84-636a-438f-810b-a998d1535903"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/execute_code/exec_python.py", "file_name": "exec_python.py", "file_type": "text/x-python", "file_size": 14781, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "4e7dd618-bd56-4dab-a747-94ba28f85512": {"node_ids": ["60870d9a-a6ba-4a1d-84b9-db5d00150a31", "c8178ba9-623e-4db6-baee-098ead12e8dc", "005f7552-b6ef-49f0-8528-e0f6a8765f0c", "c572eba8-2892-48e2-bcb2-6fc44eb32294", "f57ffd54-aca0-4fb5-8aaa-7e46ab49503e", "8256e890-aa14-4898-a2bb-4ea3f0395674"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 6125, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "37a7f555-ff29-4430-8da6-683b7e6f653a": {"node_ids": ["0e53f92d-ff3c-4fe5-811e-2de02b56e34f", "dda80d6c-cbe8-496c-923a-cc3a935eacdd"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/json.py", "file_name": "json.py", "file_type": "text/x-python", "file_size": 2320, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "1f3f10ce-a7fb-40cc-a672-6375a21de651": {"node_ids": ["bfb358c2-6cf7-4a5e-922e-04cf0d7c7f01", "71851a56-959d-4d60-be22-ea9cafa81b65"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/file/text.py", "file_name": "text.py", "file_type": "text/x-python", "file_size": 1921, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "ebd2f2c0-3345-4f35-bb3a-8ab2aa852eff": {"node_ids": ["0ad9879c-9160-4b3f-97b8-15f15ad4cadc", "cc3ed1ed-59fd-4021-8598-37800301ed2e", "a81886da-54e6-47a4-a08c-baa232923d8c", "4ff8dca0-ca4b-47a9-9dd4-222b02bc1e98"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/retrieval_from_list.py", "file_name": "retrieval_from_list.py", "file_type": "text/x-python", "file_size": 2908, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "fa94194c-094f-4782-9782-dab52b115a83": {"node_ids": ["d0c65263-3695-4d32-bec1-a77b4ff9bd3a"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/retrieval/similarity.py", "file_name": "similarity.py", "file_type": "text/x-python", "file_size": 926, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "1ac4c500-8770-499a-a627-b79daf7e9cd4": {"node_ids": ["2279d4a7-0f8f-4a4a-9192-2b44e96aed88", "6538b8fa-74ca-45df-80fd-77c5dbd569fd", "fabfd1e0-c961-4447-a143-3f0c5b437215", "193c9687-4958-47e9-802a-edcf71fe4440", "363f2f51-0db7-48bf-8c3a-ee81f19f73b4", "a698082b-78e4-4713-aed1-63391875427b", "101ca0f4-0471-43d1-a17d-44571a75347a", "2b489401-eccb-4be9-88fc-bedd122f5894", "184adf63-263f-4843-ac9d-90f6fb755ee1"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_factory.py", "file_name": "service_factory.py", "file_type": "text/x-python", "file_size": 6009, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "9c487412-f781-42e6-b077-c2b5f4a77391": {"node_ids": ["dfd20525-4292-40ce-afb2-04550eeec783"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_response.py", "file_name": "service_response.py", "file_type": "text/x-python", "file_size": 911, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "5312403f-2fd3-42d6-bc4f-36bc983f71e6": {"node_ids": ["cd972226-0f4f-4409-982a-c795d5a690ea"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/service_status.py", "file_name": "service_status.py", "file_type": "text/x-python", "file_size": 204, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "df1f81df-f62c-4bf5-a923-862c23f0c846": {"node_ids": ["946657fe-430c-4461-9cd5-99a54bac0391", "61f31d3f-d29e-48c3-8b76-918fe1b009c3", "30d7cb37-deb6-4a2e-91bb-192e3d7399f8", "06c58689-a8d2-49c6-b1cf-8ef1cb0973bb"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mongodb.py", "file_name": "mongodb.py", "file_type": "text/x-python", "file_size": 2350, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "918c3bf7-0f84-4621-8f27-39a4f83ff6e0": {"node_ids": ["02a4504c-7be8-472d-83a6-0d1922ade277", "47388fb9-c281-49b7-b46a-af89caade6d0", "1f5b2fbb-9bc8-4800-94a7-8fc7a1a524d7", "03493dee-aba1-4ef4-b970-ec22825ae030"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/mysql.py", "file_name": "mysql.py", "file_type": "text/x-python", "file_size": 2922, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "f995deb2-791f-44a3-a234-a992ac1da842": {"node_ids": ["3a421482-255a-4e97-8a5e-3ef5d5de6c02", "19238073-44df-49e6-b692-c69594a9212c", "c45584a2-e8de-4f8e-a542-bcc65537616b", "c87dd12c-e1f2-4995-be84-36c17a88668f"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/sql_query/sqlite.py", "file_name": "sqlite.py", "file_type": "text/x-python", "file_size": 2263, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "e18a3ae7-2442-416c-988d-3cb9d9f4c63b": {"node_ids": ["55510a23-6a03-4929-aa3e-55f65ee83217", "75f434e3-98a4-47c9-96cb-dc863504d1c1", "e6fd2450-c106-4773-8842-a3a34b4a17f3", "16738ee9-78f1-4e8e-8c95-5cfe1d50c16c", "ab5fc295-629b-4c06-96cd-cf6349080f2d", "3982b0dc-82c9-4ace-9246-eb367317b98a", "d13075e0-e8ff-4570-a7e5-6c6d8f2bd218"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/text_processing/summarization.py", "file_name": "summarization.py", "file_type": "text/x-python", "file_size": 3177, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "42955cec-d2e0-4d69-8b9d-80a38e335578": {"node_ids": ["bbfca7fe-4e42-4eac-a3d3-c952485f6b4c", "150c787b-fade-4703-b677-285b522f0f05", "aa733f5c-72b4-4799-b92b-d5194598cb14", "d1371532-53d8-43e5-a400-1a2941904092", "6076c666-142c-4b90-9b18-186e312ff1f9", "1ec82e11-d10b-47fd-94c6-0f2f74d8adcd", "82a2bb6d-cd91-4ab3-850f-84e31a644163", "1a693fc0-804b-42eb-ad3c-ee6d48b609cc", "1377eb3a-e568-4f10-ba07-d163c4a5707f", "26738c19-dae6-4c6f-96aa-284b1ae5c393", "61be3a97-7653-41f8-847b-cc687ffe7483", "e9679052-14ef-4c64-b556-f160a9ca90ed"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/arxiv.py", "file_name": "arxiv.py", "file_type": "text/x-python", "file_size": 8811, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "b8678ed6-beaa-474d-8cbe-59ae4e0f6232": {"node_ids": ["d39ed756-b9c8-4fdc-9dea-5bfc84d33102", "9b3eb30c-5af4-4311-8e34-e725504468b9", "dd5dd31a-159f-416d-827b-d96d6a6298a9", "efc4d36b-d53d-47aa-810f-e5a14df81b48", "8b4d8753-9cf3-4448-b3d6-61145aa51fa4", "e7b8886e-1788-4201-afb6-c9563d54b527", "55fbeec0-7f39-482e-99e7-f6cbc6e9c156", "23e0b4bb-269f-4e67-a125-0431bf576143", "e107a3fc-ba8d-4dc3-b19f-b90d3c76c384"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/search.py", "file_name": "search.py", "file_type": "text/x-python", "file_size": 6711, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "a89775a6-6cad-4a04-86d2-0efc1d2e5676": {"node_ids": ["b2ae1a50-263a-44b4-b664-c8beb8a9421a", "d112ebe1-a5a1-46b3-ae9e-6398ac77991a", "6aed3507-2b61-456d-9257-30e83a58cb33", "97192628-0e20-49ec-9e51-4883c77e2d92", "69941be9-bc1f-4653-9b9b-49ad04715bd2", "7d00acdb-f66b-459c-9566-bcd91707a702", "e88a6fe2-ccf0-4086-81dc-0561eeee43d8", "9a11d54b-cc31-48bb-83ee-d86ca9457086", "6cf8c902-6095-4d8b-bfc4-cccd4145f643", "48d9bffb-5ae1-4c46-ac9e-2fd18892b341", "2665c99f-7999-4d11-8301-7326bfe1bd9e", "7fa9a414-3284-47f2-bc1d-43b39b201b0e", "bed6c6e2-434b-4e0c-8568-649cf2d15d3d", "656ca51f-08ca-4310-97ed-db33c00db775", "25d6bc19-802d-49b9-b23e-6473c75088ac"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/service/web_search/web_digest.py", "file_name": "web_digest.py", "file_type": "text/x-python", "file_size": 8694, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "f4bd5c25-8f6f-4d11-9c2d-b2353adae871": {"node_ids": ["6e0508bd-268c-434a-8e51-1eb12ebc3e65"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 315, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "0764ba5b-bf2f-4ced-b648-e98f9cab2c42": {"node_ids": ["cff56e72-e6b4-4ded-be81-433ba5558626", "707f0f5f-46dd-4a0c-8869-aeb4548a1a1f", "7bcc3f52-12da-4382-8782-e1a1b4f372ae", "d45fd0ac-cbf6-4ad3-9bd4-3f03b44f900d", "c392e880-95a2-4e65-a1b7-e4ed5b913433"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/common.py", "file_name": "common.py", "file_type": "text/x-python", "file_size": 5827, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "ccf6d3f0-130f-4f2b-be07-749ed3234929": {"node_ids": ["7af3d7ab-1113-43a6-8189-0df0754c429e", "b03b7258-292e-44d5-bf59-a9a7ecfd28b4", "6cc1b16a-c565-428d-8b21-2738a9857024", "43966591-a7be-468b-ad95-53569d2cadb5", "feb2d536-693d-4584-ab16-e91d3388c3f9", "56809e29-93db-4a10-8c55-ee99a884040a", "3780f5c9-4425-40db-aa26-4ae34e471d1f", "ecf026ef-ee2a-4451-9fa9-55ede7719dec", "cf4af348-01ca-48e7-9fcf-20b2a9deb8e9", "e66e1018-aeb8-4863-898b-c3a9651dfaa0", "a6070f35-f8bc-4183-a0d0-09cd5106c111", "2088848a-d530-4884-b5cd-ff4c63905f3d", "76004fe4-9511-46f9-bd52-82e81f81a76e", "804dfb73-92b1-4d7b-af32-ff1b357ae848"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/logging_utils.py", "file_name": "logging_utils.py", "file_type": "text/x-python", "file_size": 7765, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "d400cde4-f975-4d94-ba2c-3d832a6de57f": {"node_ids": ["37b97ad3-b2ce-4f4c-a125-4452bf591c31", "3d6dbef0-5517-456b-9e45-4151b6933b92", "7e8b8cde-edc7-4fdf-b5b7-6bf5fed846b9", "edd3eea1-0648-4eb2-bb44-3e050cb566ac", "12312271-e20e-45e8-9568-70be0ceb63bd", "a932b89e-f63d-418e-9868-5072bf545742", "efb48786-3a84-40d9-b90a-b6226685f95a", "0f687c5f-1530-4ee4-8615-cd97dc9e2b5f", "f8827b22-784d-4aac-8166-ec21788a2373", "e7634b5d-54db-412b-96c7-8a48464b5d5b", "c2f0af91-762f-4e82-93c4-ad4055e99af5", "7199408f-96a3-4c2f-b5f0-519c98515fe0", "81047be7-1ac8-426c-b634-6b6ae53fcd81", "b261b107-fe89-4f1d-ba77-402c707ff2fb", "aef46b02-3de2-4c5e-9eea-a304a2eefb1b", "2a769308-4cde-414f-adbc-143ad4885b75", "14368bd1-361a-4e67-888f-a348882dabd9", "a83ed123-77fe-4377-a3f0-f6ca8919102d", "d875fdba-e2f9-45c7-888b-0d01b7952f0b"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/monitor.py", "file_name": "monitor.py", "file_type": "text/x-python", "file_size": 19699, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "6627c0cc-fad8-42b0-ae91-3bdad6426880": {"node_ids": ["84d88e28-f775-4c68-b260-e9c36cde7d9c", "ea34dd5d-3470-4a35-9b1a-20d8ec46c4cf", "67620278-8aa4-4281-ae68-32449995ae10", "69f9a21a-c7d2-41b5-bbfb-825558e802ac", "b6d8a9c0-3a5d-4856-891b-fac5620ce746", "cb62beca-2e7f-4ba2-b2bb-c0a5f79bb8b1", "d3620ed3-801c-4075-8886-78393cb7d731"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/token_utils.py", "file_name": "token_utils.py", "file_type": "text/x-python", "file_size": 5149, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "55f13a7a-57d8-400f-8ab7-d1964e21c0c8": {"node_ids": ["88c42f1f-9f9e-4c24-8d1e-41d7daf4a39a", "6c5dc676-f5fd-4793-81a1-aaf1df727bae", "1f64d1c6-8982-47b5-94c9-6d45de3bae21", "4729d973-49d8-4c43-ae4d-bdf0d2ce68af", "4b833f9c-9dd3-407a-a499-bf77c15823cb"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/utils/tools.py", "file_name": "tools.py", "file_type": "text/x-python", "file_size": 6453, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "417ace96-490f-48b0-9640-21f139dd9daa": {"node_ids": ["f516259a-afa5-4f47-97c0-079708ee4ed7"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 116, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "c0200062-2ae4-4a30-b234-deb48d1d7f68": {"node_ids": ["d1f167bc-9c85-4e9c-942f-e68eb19eea32", "544f8ac9-7de8-4f52-a36e-6b5856eb6d94", "37149201-188e-4bba-8e9e-e14881220793"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/_app.py", "file_name": "_app.py", "file_type": "text/x-python", "file_size": 3102, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "b638b416-ecc0-4bc2-b7a0-9036fa25eadd": {"node_ids": ["c307adb0-525e-497c-8e25-55f445c6f5f3", "583dc71a-44d7-4f49-b374-7f894f9df73b", "bbea61af-1b00-44ab-9a3e-2c7c731a2021", "bca5290a-7fc1-4e93-afe3-4ad6e43f1ac3", "25682b46-b908-4ef7-b8b5-c21f06c394a2", "0ea3d157-6746-47f8-803a-8da2bbbd3e7d", "95f95432-996e-4cfd-910f-14088f608eff", "ac330bac-217b-43c0-b9da-0a983b84b0fb", "6bc34ab1-e39a-4401-b379-75248ddb2b1d", "4edcf930-8b82-48cd-93bb-54270f4f433e", "ae2f71dd-3b50-4d96-a29f-7379f561cb3c", "09946359-af37-4958-accd-651e7fb242b8", "ba59611b-d33a-4b01-8aec-36f60f2f0323", "e146c8ab-2115-46c0-b015-86576d9ed762", "414952b7-9d42-4ca5-a5ce-ef1319d3c83b"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/studio.py", "file_name": "studio.py", "file_type": "text/x-python", "file_size": 9329, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}, "0b6929b6-7aa2-41df-b674-a5cae732811b": {"node_ids": ["4134abfc-88f6-4d93-9b3c-8b0cd4690cf1", "ee2a8775-cf99-4311-9ea9-3521030aafaf", "0b968c84-01ed-45f2-9007-04b1b7cb2a4f", "8d2b77ed-a5e3-45a1-97d0-fd09e2ff43b1", "75182db6-ff49-4f8f-8d8a-03346b266235", "22f13fd2-1628-4cb6-a0b1-fdcbb241df1c"], "metadata": {"file_path": "/Users/feiwei/Projects/agentscope/examples/conversation_with_RAG_agents/../../src/agentscope/web/studio/utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 6073, "creation_date": "2024-04-11", "last_modified_date": "2024-04-11"}}}}